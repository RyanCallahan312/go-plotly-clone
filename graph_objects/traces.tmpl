{{- define "traces" -}}
{{- $g := . -}}
package grob

import (
	"encoding/json"
	"errors"
)
{{- $allTypes := dict }}
{{- $enumerates := dict }}
{{- $objects := dict }}
{{- $flaglists := dict }}
{{- $layoutAttributes := dict }}
{{ range $name,$trace := .traces }}
{{ $formatName := $name | title }}

// {{ $formatName }} {{ .meta.description }}
type {{ $formatName }} struct {

    // Type is the type of the plot
    Type TraceType `json:"type,omitempty"`
    {{- $params := (dict "parent" $formatName "attributes" .attributes  ) }}
    {{ template "attributes" $params }}
    {{- $enumerates =  merge $enumerates $params.enumerates }}
    {{- $objects = merge $objects $params.objects }}
    {{- $flaglists = merge $flaglists $params.flaglists }}
}


func New{{ $formatName }}() *{{$formatName}} {
    return &{{$formatName}}{
    Type: TraceType{{ $formatName }},
    }
}

func (this *{{$formatName}}) GetType() TraceType {
    return this.Type
}
{{- $layoutAttributes = merge $layoutAttributes $trace.layoutAttributes }}
{{- $_ := set $allTypes $trace.attributes.type 1 }}
{{ end }}


// Trace is an interface to identify all available traces. The main purpose is to provide autocompletion. 
type Trace interface {
    GetType() TraceType
}

// TraceType represents an specific trace type.
type TraceType string

const (
{{- range $name, $type := $allTypes }}
    TraceType{{ $name | title }} TraceType = {{ quote $name }}
{{- end }}
)

type unmarshalType struct {
	Type TraceType `json:"type,omitempty"`
}


// UnmarshallTrace decodes an array of bytes into a Trace interface.
func UnmarshallTrace(data []byte) (Trace,error) {
	traceType := unmarshalType{}
	err := json.Unmarshal(data, &traceType)
	if err != nil {
		return nil, err
	}
	switch traceType.Type {
{{- range $name, $type := $allTypes }}
    case TraceType{{ $name | title }}:
        trace := &{{ $name | title }}{}
        err = json.Unmarshal(data,trace)
        if err != nil {
            return nil, err
        }
        return trace, nil
{{- end }}
    default:
        return nil, errors.New("Trace Type is not registered")
	}
}
{{/* return values */}}
{{- $_ := set . "enumerates" $enumerates }}
{{- $_ := set . "objects" $objects }}
{{- $_ := set . "flaglists" $flaglists }}
{{- $_ := set . "layoutAttributes" $layoutAttributes }}
{{- end -}}