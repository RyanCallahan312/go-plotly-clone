package grob

// DEEP 0
type AreaHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align AreaHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *AreaHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type AreaMarker struct {

	// Color color Area traces are deprecated! Please switch to the *barpolar* trace type. Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Opacity number Area traces are deprecated! Please switch to the *barpolar* trace type. Sets the marker opacity.
	Opacity interface{} `json:"opacity,omitempty"`

	// Opacitysrc string Sets the source reference on Chart Studio Cloud for  opacity .
	Opacitysrc String `json:"opacitysrc,omitempty"`

	// Size number Area traces are deprecated! Please switch to the *barpolar* trace type. Sets the marker size (in px).
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`

	// Symbol enumerated Area traces are deprecated! Please switch to the *barpolar* trace type. Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.
	Symbol AreaMarkerSymbol `json:"symbol,omitempty"`

	// Symbolsrc string Sets the source reference on Chart Studio Cloud for  symbol .
	Symbolsrc String `json:"symbolsrc,omitempty"`
}

type AreaStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

// AreaTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type AreaTransforms interface{}

type BarErrorX struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Array data_array Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.
	Array interface{} `json:"array,omitempty"`

	// Arrayminus data_array Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.
	Arrayminus interface{} `json:"arrayminus,omitempty"`

	// Arrayminussrc string Sets the source reference on Chart Studio Cloud for  arrayminus .
	Arrayminussrc String `json:"arrayminussrc,omitempty"`

	// Arraysrc string Sets the source reference on Chart Studio Cloud for  array .
	Arraysrc String `json:"arraysrc,omitempty"`

	// Color color Sets the stoke color of the error bars.
	Color String `json:"color,omitempty"`

	// Copy_ystyle boolean <no value>
	Copy_ystyle Bool `json:"copy_ystyle,omitempty"`

	// Symmetric boolean Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.
	Symmetric Bool `json:"symmetric,omitempty"`

	// Thickness number Sets the thickness (in px) of the error bars.
	Thickness float64 `json:"thickness,omitempty"`

	// Traceref integer <no value>
	Traceref int64 `json:"traceref,omitempty"`

	// Tracerefminus integer <no value>
	Tracerefminus int64 `json:"tracerefminus,omitempty"`

	// Type enumerated Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.
	Type BarErrorXType `json:"type,omitempty"`

	// Value number Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.
	Value float64 `json:"value,omitempty"`

	// Valueminus number Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars
	Valueminus float64 `json:"valueminus,omitempty"`

	// Visible boolean Determines whether or not this set of error bars is visible.
	Visible Bool `json:"visible,omitempty"`

	// Width number Sets the width (in px) of the cross-bar at both ends of the error bars.
	Width float64 `json:"width,omitempty"`
}

type BarErrorY struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Array data_array Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.
	Array interface{} `json:"array,omitempty"`

	// Arrayminus data_array Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.
	Arrayminus interface{} `json:"arrayminus,omitempty"`

	// Arrayminussrc string Sets the source reference on Chart Studio Cloud for  arrayminus .
	Arrayminussrc String `json:"arrayminussrc,omitempty"`

	// Arraysrc string Sets the source reference on Chart Studio Cloud for  array .
	Arraysrc String `json:"arraysrc,omitempty"`

	// Color color Sets the stoke color of the error bars.
	Color String `json:"color,omitempty"`

	// Symmetric boolean Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.
	Symmetric Bool `json:"symmetric,omitempty"`

	// Thickness number Sets the thickness (in px) of the error bars.
	Thickness float64 `json:"thickness,omitempty"`

	// Traceref integer <no value>
	Traceref int64 `json:"traceref,omitempty"`

	// Tracerefminus integer <no value>
	Tracerefminus int64 `json:"tracerefminus,omitempty"`

	// Type enumerated Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.
	Type BarErrorYType `json:"type,omitempty"`

	// Value number Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.
	Value float64 `json:"value,omitempty"`

	// Valueminus number Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars
	Valueminus float64 `json:"valueminus,omitempty"`

	// Visible boolean Determines whether or not this set of error bars is visible.
	Visible Bool `json:"visible,omitempty"`

	// Width number Sets the width (in px) of the cross-bar at both ends of the error bars.
	Width float64 `json:"width,omitempty"`
}

type BarHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align BarHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *BarHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type BarInsidetextfont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type BarMarker struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorbar <no value> <no value>
	Colorbar *BarMarkerColorbar `json:"colorbar,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Line <no value> <no value>
	Line *BarMarkerLine `json:"line,omitempty"`

	// Opacity number Sets the opacity of the bars.
	Opacity interface{} `json:"opacity,omitempty"`

	// Opacitysrc string Sets the source reference on Chart Studio Cloud for  opacity .
	Opacitysrc String `json:"opacitysrc,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Showscale boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.
	Showscale Bool `json:"showscale,omitempty"`
}

type BarOutsidetextfont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type BarSelected struct {

	// Marker <no value> <no value>
	Marker *BarSelectedMarker `json:"marker,omitempty"`

	// Textfont <no value> <no value>
	Textfont *BarSelectedTextfont `json:"textfont,omitempty"`
}

type BarStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type BarTextfont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

// BarTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type BarTransforms interface{}

type BarUnselected struct {

	// Marker <no value> <no value>
	Marker *BarUnselectedMarker `json:"marker,omitempty"`

	// Textfont <no value> <no value>
	Textfont *BarUnselectedTextfont `json:"textfont,omitempty"`
}

type BarpolarHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align BarpolarHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *BarpolarHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type BarpolarMarker struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorbar <no value> <no value>
	Colorbar *BarpolarMarkerColorbar `json:"colorbar,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Line <no value> <no value>
	Line *BarpolarMarkerLine `json:"line,omitempty"`

	// Opacity number Sets the opacity of the bars.
	Opacity interface{} `json:"opacity,omitempty"`

	// Opacitysrc string Sets the source reference on Chart Studio Cloud for  opacity .
	Opacitysrc String `json:"opacitysrc,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Showscale boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.
	Showscale Bool `json:"showscale,omitempty"`
}

type BarpolarSelected struct {

	// Marker <no value> <no value>
	Marker *BarpolarSelectedMarker `json:"marker,omitempty"`

	// Textfont <no value> <no value>
	Textfont *BarpolarSelectedTextfont `json:"textfont,omitempty"`
}

type BarpolarStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

// BarpolarTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type BarpolarTransforms interface{}

type BarpolarUnselected struct {

	// Marker <no value> <no value>
	Marker *BarpolarUnselectedMarker `json:"marker,omitempty"`

	// Textfont <no value> <no value>
	Textfont *BarpolarUnselectedTextfont `json:"textfont,omitempty"`
}

type BoxHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align BoxHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *BoxHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type BoxLine struct {

	// Color color Sets the color of line bounding the box(es).
	Color String `json:"color,omitempty"`

	// Width number Sets the width (in px) of line bounding the box(es).
	Width float64 `json:"width,omitempty"`
}

type BoxMarker struct {

	// Color color Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
	Color String `json:"color,omitempty"`

	// Line <no value> <no value>
	Line *BoxMarkerLine `json:"line,omitempty"`

	// Opacity number Sets the marker opacity.
	Opacity float64 `json:"opacity,omitempty"`

	// Outliercolor color Sets the color of the outlier sample points.
	Outliercolor String `json:"outliercolor,omitempty"`

	// Size number Sets the marker size (in px).
	Size float64 `json:"size,omitempty"`

	// Symbol enumerated Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.
	Symbol BoxMarkerSymbol `json:"symbol,omitempty"`
}

type BoxSelected struct {

	// Marker <no value> <no value>
	Marker *BoxSelectedMarker `json:"marker,omitempty"`
}

type BoxStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

// BoxTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type BoxTransforms interface{}

type BoxUnselected struct {

	// Marker <no value> <no value>
	Marker *BoxUnselectedMarker `json:"marker,omitempty"`
}

type CandlestickDecreasing struct {

	// Fillcolor color Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
	Fillcolor String `json:"fillcolor,omitempty"`

	// Line <no value> <no value>
	Line *CandlestickDecreasingLine `json:"line,omitempty"`
}

type CandlestickHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align CandlestickHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *CandlestickHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`

	// Split boolean Show hover information (open, close, high, low) in separate labels.
	Split Bool `json:"split,omitempty"`
}

type CandlestickIncreasing struct {

	// Fillcolor color Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
	Fillcolor String `json:"fillcolor,omitempty"`

	// Line <no value> <no value>
	Line *CandlestickIncreasingLine `json:"line,omitempty"`
}

type CandlestickLine struct {

	// Width number Sets the width (in px) of line bounding the box(es). Note that this style setting can also be set per direction via `increasing.line.width` and `decreasing.line.width`.
	Width float64 `json:"width,omitempty"`
}

type CandlestickStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

// CandlestickTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type CandlestickTransforms interface{}

type CarpetAaxis struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Arraydtick integer The stride between grid lines along the axis
	Arraydtick int64 `json:"arraydtick,omitempty"`

	// Arraytick0 integer The starting index of grid lines along the axis
	Arraytick0 int64 `json:"arraytick0,omitempty"`

	// Autorange enumerated Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.
	Autorange CarpetAaxisAutorange `json:"autorange,omitempty"`

	// Autotypenumbers enumerated Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
	Autotypenumbers CarpetAaxisAutotypenumbers `json:"autotypenumbers,omitempty"`

	// Categoryarray data_array Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
	Categoryarray interface{} `json:"categoryarray,omitempty"`

	// Categoryarraysrc string Sets the source reference on Chart Studio Cloud for  categoryarray .
	Categoryarraysrc String `json:"categoryarraysrc,omitempty"`

	// Categoryorder enumerated Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.
	Categoryorder CarpetAaxisCategoryorder `json:"categoryorder,omitempty"`

	// Cheatertype enumerated <no value>
	Cheatertype CarpetAaxisCheatertype `json:"cheatertype,omitempty"`

	// Color color Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	Color String `json:"color,omitempty"`

	// Dtick number The stride between grid lines along the axis
	Dtick float64 `json:"dtick,omitempty"`

	// Endline boolean Determines whether or not a line is drawn at along the final value of this axis. If *true*, the end line is drawn on top of the grid lines.
	Endline Bool `json:"endline,omitempty"`

	// Endlinecolor color Sets the line color of the end line.
	Endlinecolor String `json:"endlinecolor,omitempty"`

	// Endlinewidth number Sets the width (in px) of the end line.
	Endlinewidth float64 `json:"endlinewidth,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat CarpetAaxisExponentformat `json:"exponentformat,omitempty"`

	// Fixedrange boolean Determines whether or not this axis is zoom-able. If true, then zoom is disabled.
	Fixedrange Bool `json:"fixedrange,omitempty"`

	// Gridcolor color Sets the axis line color.
	Gridcolor String `json:"gridcolor,omitempty"`

	// Gridwidth number Sets the width (in px) of the axis line.
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Labelpadding integer Extra padding between label and the axis
	Labelpadding int64 `json:"labelpadding,omitempty"`

	// Labelprefix string Sets a axis label prefix.
	Labelprefix String `json:"labelprefix,omitempty"`

	// Labelsuffix string Sets a axis label suffix.
	Labelsuffix String `json:"labelsuffix,omitempty"`

	// Linecolor color Sets the axis line color.
	Linecolor String `json:"linecolor,omitempty"`

	// Linewidth number Sets the width (in px) of the axis line.
	Linewidth float64 `json:"linewidth,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number
	Minexponent float64 `json:"minexponent,omitempty"`

	// Minorgridcolor color Sets the color of the grid lines.
	Minorgridcolor String `json:"minorgridcolor,omitempty"`

	// Minorgridcount integer Sets the number of minor grid ticks per major grid tick
	Minorgridcount int64 `json:"minorgridcount,omitempty"`

	// Minorgridwidth number Sets the width (in px) of the grid lines.
	Minorgridwidth float64 `json:"minorgridwidth,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Range info_array Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.
	Range interface{} `json:"range,omitempty"`

	// Rangemode enumerated If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data.
	Rangemode CarpetAaxisRangemode `json:"rangemode,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent CarpetAaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid boolean Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Showline boolean Determines whether or not a line bounding this axis is drawn.
	Showline Bool `json:"showline,omitempty"`

	// Showticklabels enumerated Determines whether axis labels are drawn on the low side, the high side, both, or neither side of the axis.
	Showticklabels CarpetAaxisShowticklabels `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix CarpetAaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix CarpetAaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Smoothing number <no value>
	Smoothing float64 `json:"smoothing,omitempty"`

	// Startline boolean Determines whether or not a line is drawn at along the starting value of this axis. If *true*, the start line is drawn on top of the grid lines.
	Startline Bool `json:"startline,omitempty"`

	// Startlinecolor color Sets the line color of the start line.
	Startlinecolor String `json:"startlinecolor,omitempty"`

	// Startlinewidth number Sets the width (in px) of the start line.
	Startlinewidth float64 `json:"startlinewidth,omitempty"`

	// Tick0 number The starting index of grid lines along the axis
	Tick0 float64 `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickfont <no value> Sets the tick font.
	Tickfont *CarpetAaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see:  We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops CarpetAaxisTickformatstops `json:"tickformatstops,omitempty"`

	// Tickmode enumerated <no value>
	Tickmode CarpetAaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Title <no value> <no value>
	Title *CarpetAaxisTitle `json:"title,omitempty"`

	// Type enumerated Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
	Type CarpetAaxisType `json:"type,omitempty"`
}

type CarpetBaxis struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Arraydtick integer The stride between grid lines along the axis
	Arraydtick int64 `json:"arraydtick,omitempty"`

	// Arraytick0 integer The starting index of grid lines along the axis
	Arraytick0 int64 `json:"arraytick0,omitempty"`

	// Autorange enumerated Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.
	Autorange CarpetBaxisAutorange `json:"autorange,omitempty"`

	// Autotypenumbers enumerated Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
	Autotypenumbers CarpetBaxisAutotypenumbers `json:"autotypenumbers,omitempty"`

	// Categoryarray data_array Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
	Categoryarray interface{} `json:"categoryarray,omitempty"`

	// Categoryarraysrc string Sets the source reference on Chart Studio Cloud for  categoryarray .
	Categoryarraysrc String `json:"categoryarraysrc,omitempty"`

	// Categoryorder enumerated Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.
	Categoryorder CarpetBaxisCategoryorder `json:"categoryorder,omitempty"`

	// Cheatertype enumerated <no value>
	Cheatertype CarpetBaxisCheatertype `json:"cheatertype,omitempty"`

	// Color color Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	Color String `json:"color,omitempty"`

	// Dtick number The stride between grid lines along the axis
	Dtick float64 `json:"dtick,omitempty"`

	// Endline boolean Determines whether or not a line is drawn at along the final value of this axis. If *true*, the end line is drawn on top of the grid lines.
	Endline Bool `json:"endline,omitempty"`

	// Endlinecolor color Sets the line color of the end line.
	Endlinecolor String `json:"endlinecolor,omitempty"`

	// Endlinewidth number Sets the width (in px) of the end line.
	Endlinewidth float64 `json:"endlinewidth,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat CarpetBaxisExponentformat `json:"exponentformat,omitempty"`

	// Fixedrange boolean Determines whether or not this axis is zoom-able. If true, then zoom is disabled.
	Fixedrange Bool `json:"fixedrange,omitempty"`

	// Gridcolor color Sets the axis line color.
	Gridcolor String `json:"gridcolor,omitempty"`

	// Gridwidth number Sets the width (in px) of the axis line.
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Labelpadding integer Extra padding between label and the axis
	Labelpadding int64 `json:"labelpadding,omitempty"`

	// Labelprefix string Sets a axis label prefix.
	Labelprefix String `json:"labelprefix,omitempty"`

	// Labelsuffix string Sets a axis label suffix.
	Labelsuffix String `json:"labelsuffix,omitempty"`

	// Linecolor color Sets the axis line color.
	Linecolor String `json:"linecolor,omitempty"`

	// Linewidth number Sets the width (in px) of the axis line.
	Linewidth float64 `json:"linewidth,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number
	Minexponent float64 `json:"minexponent,omitempty"`

	// Minorgridcolor color Sets the color of the grid lines.
	Minorgridcolor String `json:"minorgridcolor,omitempty"`

	// Minorgridcount integer Sets the number of minor grid ticks per major grid tick
	Minorgridcount int64 `json:"minorgridcount,omitempty"`

	// Minorgridwidth number Sets the width (in px) of the grid lines.
	Minorgridwidth float64 `json:"minorgridwidth,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Range info_array Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.
	Range interface{} `json:"range,omitempty"`

	// Rangemode enumerated If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data.
	Rangemode CarpetBaxisRangemode `json:"rangemode,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent CarpetBaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid boolean Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Showline boolean Determines whether or not a line bounding this axis is drawn.
	Showline Bool `json:"showline,omitempty"`

	// Showticklabels enumerated Determines whether axis labels are drawn on the low side, the high side, both, or neither side of the axis.
	Showticklabels CarpetBaxisShowticklabels `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix CarpetBaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix CarpetBaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Smoothing number <no value>
	Smoothing float64 `json:"smoothing,omitempty"`

	// Startline boolean Determines whether or not a line is drawn at along the starting value of this axis. If *true*, the start line is drawn on top of the grid lines.
	Startline Bool `json:"startline,omitempty"`

	// Startlinecolor color Sets the line color of the start line.
	Startlinecolor String `json:"startlinecolor,omitempty"`

	// Startlinewidth number Sets the width (in px) of the start line.
	Startlinewidth float64 `json:"startlinewidth,omitempty"`

	// Tick0 number The starting index of grid lines along the axis
	Tick0 float64 `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickfont <no value> Sets the tick font.
	Tickfont *CarpetBaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see:  We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops CarpetBaxisTickformatstops `json:"tickformatstops,omitempty"`

	// Tickmode enumerated <no value>
	Tickmode CarpetBaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Title <no value> <no value>
	Title *CarpetBaxisTitle `json:"title,omitempty"`

	// Type enumerated Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
	Type CarpetBaxisType `json:"type,omitempty"`
}

type CarpetFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type CarpetStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type ChoroplethColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat ChoroplethColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode ChoroplethColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent ChoroplethColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix ChoroplethColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix ChoroplethColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode ChoroplethColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *ChoroplethColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops ChoroplethColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition ChoroplethColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode ChoroplethColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks ChoroplethColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *ChoroplethColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor ChoroplethColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor ChoroplethColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type ChoroplethHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align ChoroplethHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *ChoroplethHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type ChoroplethMarker struct {

	// Line <no value> <no value>
	Line *ChoroplethMarkerLine `json:"line,omitempty"`

	// Opacity number Sets the opacity of the locations.
	Opacity interface{} `json:"opacity,omitempty"`

	// Opacitysrc string Sets the source reference on Chart Studio Cloud for  opacity .
	Opacitysrc String `json:"opacitysrc,omitempty"`
}

type ChoroplethSelected struct {

	// Marker <no value> <no value>
	Marker *ChoroplethSelectedMarker `json:"marker,omitempty"`
}

type ChoroplethStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

// ChoroplethTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type ChoroplethTransforms interface{}

type ChoroplethUnselected struct {

	// Marker <no value> <no value>
	Marker *ChoroplethUnselectedMarker `json:"marker,omitempty"`
}

type ChoroplethmapboxColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat ChoroplethmapboxColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode ChoroplethmapboxColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent ChoroplethmapboxColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix ChoroplethmapboxColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix ChoroplethmapboxColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode ChoroplethmapboxColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *ChoroplethmapboxColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops ChoroplethmapboxColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition ChoroplethmapboxColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode ChoroplethmapboxColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks ChoroplethmapboxColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *ChoroplethmapboxColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor ChoroplethmapboxColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor ChoroplethmapboxColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type ChoroplethmapboxHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align ChoroplethmapboxHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *ChoroplethmapboxHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type ChoroplethmapboxMarker struct {

	// Line <no value> <no value>
	Line *ChoroplethmapboxMarkerLine `json:"line,omitempty"`

	// Opacity number Sets the opacity of the locations.
	Opacity interface{} `json:"opacity,omitempty"`

	// Opacitysrc string Sets the source reference on Chart Studio Cloud for  opacity .
	Opacitysrc String `json:"opacitysrc,omitempty"`
}

type ChoroplethmapboxSelected struct {

	// Marker <no value> <no value>
	Marker *ChoroplethmapboxSelectedMarker `json:"marker,omitempty"`
}

type ChoroplethmapboxStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

// ChoroplethmapboxTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type ChoroplethmapboxTransforms interface{}

type ChoroplethmapboxUnselected struct {

	// Marker <no value> <no value>
	Marker *ChoroplethmapboxUnselectedMarker `json:"marker,omitempty"`
}

type ConeColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat ConeColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode ConeColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent ConeColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix ConeColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix ConeColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode ConeColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *ConeColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops ConeColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition ConeColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode ConeColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks ConeColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *ConeColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor ConeColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor ConeColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type ConeHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align ConeHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *ConeHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type ConeLighting struct {

	// Ambient number Ambient light increases overall color visibility but can wash out the image.
	Ambient float64 `json:"ambient,omitempty"`

	// Diffuse number Represents the extent that incident rays are reflected in a range of angles.
	Diffuse float64 `json:"diffuse,omitempty"`

	// Facenormalsepsilon number Epsilon for face normals calculation avoids math issues arising from degenerate geometry.
	Facenormalsepsilon float64 `json:"facenormalsepsilon,omitempty"`

	// Fresnel number Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.
	Fresnel float64 `json:"fresnel,omitempty"`

	// Roughness number Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.
	Roughness float64 `json:"roughness,omitempty"`

	// Specular number Represents the level that incident rays are reflected in a single direction, causing shine.
	Specular float64 `json:"specular,omitempty"`

	// Vertexnormalsepsilon number Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.
	Vertexnormalsepsilon float64 `json:"vertexnormalsepsilon,omitempty"`
}

type ConeLightposition struct {

	// X number Numeric vector, representing the X coordinate for each vertex.
	X float64 `json:"x,omitempty"`

	// Y number Numeric vector, representing the Y coordinate for each vertex.
	Y float64 `json:"y,omitempty"`

	// Z number Numeric vector, representing the Z coordinate for each vertex.
	Z float64 `json:"z,omitempty"`
}

type ConeStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type ConfigEdits struct {

	// AnnotationPosition boolean Determines if the main anchor of the annotation is editable. The main anchor corresponds to the text (if no arrow) or the arrow (which drags the whole thing leaving the arrow length & direction unchanged).
	AnnotationPosition Bool `json:"annotationPosition,omitempty"`

	// AnnotationTail boolean Has only an effect for annotations with arrows. Enables changing the length and direction of the arrow.
	AnnotationTail Bool `json:"annotationTail,omitempty"`

	// AnnotationText boolean Enables editing annotation text.
	AnnotationText Bool `json:"annotationText,omitempty"`

	// AxisTitleText boolean Enables editing axis title text.
	AxisTitleText Bool `json:"axisTitleText,omitempty"`

	// ColorbarPosition boolean Enables moving colorbars.
	ColorbarPosition Bool `json:"colorbarPosition,omitempty"`

	// ColorbarTitleText boolean Enables editing colorbar title text.
	ColorbarTitleText Bool `json:"colorbarTitleText,omitempty"`

	// LegendPosition boolean Enables moving the legend.
	LegendPosition Bool `json:"legendPosition,omitempty"`

	// LegendText boolean Enables editing the trace name fields from the legend
	LegendText Bool `json:"legendText,omitempty"`

	// ShapePosition boolean Enables moving shapes.
	ShapePosition Bool `json:"shapePosition,omitempty"`

	// TitleText boolean Enables editing the global layout title.
	TitleText Bool `json:"titleText,omitempty"`
}

type ContourColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat ContourColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode ContourColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent ContourColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix ContourColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix ContourColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode ContourColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *ContourColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops ContourColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition ContourColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode ContourColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks ContourColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *ContourColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor ContourColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor ContourColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type ContourContours struct {

	// Coloring enumerated Determines the coloring method showing the contour values. If *fill*, coloring is done evenly between each contour level If *heatmap*, a heatmap gradient coloring is applied between each contour level. If *lines*, coloring is done on the contour lines. If *none*, no coloring is applied on this trace.
	Coloring ContourContoursColoring `json:"coloring,omitempty"`

	// End number Sets the end contour level value. Must be more than `contours.start`
	End float64 `json:"end,omitempty"`

	// ImpliedEdits <no value> <no value>
	ImpliedEdits *ContourContoursImpliededits `json:"impliedEdits,omitempty"`

	// Labelfont <no value> Sets the font used for labeling the contour levels. The default color comes from the lines, if shown. The default family and size come from `layout.font`.
	Labelfont *ContourContoursLabelfont `json:"labelfont,omitempty"`

	// Labelformat string Sets the contour label formatting rule using d3 formatting mini-language which is very similar to Python, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format
	Labelformat String `json:"labelformat,omitempty"`

	// Operation enumerated Sets the constraint operation. *=* keeps regions equal to `value` *<* and *<=* keep regions less than `value` *>* and *>=* keep regions greater than `value` *[]*, *()*, *[)*, and *(]* keep regions inside `value[0]` to `value[1]` *][*, *)(*, *](*, *)[* keep regions outside `value[0]` to value[1]` Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.
	Operation ContourContoursOperation `json:"operation,omitempty"`

	// Showlabels boolean Determines whether to label the contour lines with their values.
	Showlabels Bool `json:"showlabels,omitempty"`

	// Showlines boolean Determines whether or not the contour lines are drawn. Has an effect only if `contours.coloring` is set to *fill*.
	Showlines Bool `json:"showlines,omitempty"`

	// Size number Sets the step between each contour level. Must be positive.
	Size float64 `json:"size,omitempty"`

	// Start number Sets the starting contour level value. Must be less than `contours.end`
	Start float64 `json:"start,omitempty"`

	// Type enumerated If `levels`, the data is represented as a contour plot with multiple levels displayed. If `constraint`, the data is represented as constraints with the invalid region shaded as specified by the `operation` and `value` parameters.
	Type ContourContoursType `json:"type,omitempty"`

	// Value any Sets the value or values of the constraint boundary. When `operation` is set to one of the comparison values (=,<,>=,>,<=) *value* is expected to be a number. When `operation` is set to one of the interval values ([],(),[),(],][,)(,](,)[) *value* is expected to be an array of two numbers where the first is the lower bound and the second is the upper bound.
	Value interface{} `json:"value,omitempty"`
}

type ContourHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align ContourHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *ContourHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type ContourLine struct {

	// Color color Sets the color of the contour level. Has no effect if `contours.coloring` is set to *lines*.
	Color String `json:"color,omitempty"`

	// Dash string Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Dash String `json:"dash,omitempty"`

	// Smoothing number Sets the amount of smoothing for the contour lines, where *0* corresponds to no smoothing.
	Smoothing float64 `json:"smoothing,omitempty"`

	// Width number Sets the contour line width in (in px) Defaults to *0.5* when `contours.type` is *levels*. Defaults to *2* when `contour.type` is *constraint*.
	Width float64 `json:"width,omitempty"`
}

type ContourStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

// ContourTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type ContourTransforms interface{}

type ContourcarpetColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat ContourcarpetColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode ContourcarpetColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent ContourcarpetColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix ContourcarpetColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix ContourcarpetColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode ContourcarpetColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *ContourcarpetColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops ContourcarpetColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition ContourcarpetColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode ContourcarpetColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks ContourcarpetColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *ContourcarpetColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor ContourcarpetColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor ContourcarpetColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type ContourcarpetContours struct {

	// Coloring enumerated Determines the coloring method showing the contour values. If *fill*, coloring is done evenly between each contour level If *lines*, coloring is done on the contour lines. If *none*, no coloring is applied on this trace.
	Coloring ContourcarpetContoursColoring `json:"coloring,omitempty"`

	// End number Sets the end contour level value. Must be more than `contours.start`
	End float64 `json:"end,omitempty"`

	// ImpliedEdits <no value> <no value>
	ImpliedEdits *ContourcarpetContoursImpliededits `json:"impliedEdits,omitempty"`

	// Labelfont <no value> Sets the font used for labeling the contour levels. The default color comes from the lines, if shown. The default family and size come from `layout.font`.
	Labelfont *ContourcarpetContoursLabelfont `json:"labelfont,omitempty"`

	// Labelformat string Sets the contour label formatting rule using d3 formatting mini-language which is very similar to Python, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format
	Labelformat String `json:"labelformat,omitempty"`

	// Operation enumerated Sets the constraint operation. *=* keeps regions equal to `value` *<* and *<=* keep regions less than `value` *>* and *>=* keep regions greater than `value` *[]*, *()*, *[)*, and *(]* keep regions inside `value[0]` to `value[1]` *][*, *)(*, *](*, *)[* keep regions outside `value[0]` to value[1]` Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.
	Operation ContourcarpetContoursOperation `json:"operation,omitempty"`

	// Showlabels boolean Determines whether to label the contour lines with their values.
	Showlabels Bool `json:"showlabels,omitempty"`

	// Showlines boolean Determines whether or not the contour lines are drawn. Has an effect only if `contours.coloring` is set to *fill*.
	Showlines Bool `json:"showlines,omitempty"`

	// Size number Sets the step between each contour level. Must be positive.
	Size float64 `json:"size,omitempty"`

	// Start number Sets the starting contour level value. Must be less than `contours.end`
	Start float64 `json:"start,omitempty"`

	// Type enumerated If `levels`, the data is represented as a contour plot with multiple levels displayed. If `constraint`, the data is represented as constraints with the invalid region shaded as specified by the `operation` and `value` parameters.
	Type ContourcarpetContoursType `json:"type,omitempty"`

	// Value any Sets the value or values of the constraint boundary. When `operation` is set to one of the comparison values (=,<,>=,>,<=) *value* is expected to be a number. When `operation` is set to one of the interval values ([],(),[),(],][,)(,](,)[) *value* is expected to be an array of two numbers where the first is the lower bound and the second is the upper bound.
	Value interface{} `json:"value,omitempty"`
}

type ContourcarpetLine struct {

	// Color color Sets the color of the contour level. Has no effect if `contours.coloring` is set to *lines*.
	Color String `json:"color,omitempty"`

	// Dash string Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Dash String `json:"dash,omitempty"`

	// Smoothing number Sets the amount of smoothing for the contour lines, where *0* corresponds to no smoothing.
	Smoothing float64 `json:"smoothing,omitempty"`

	// Width number Sets the contour line width in (in px) Defaults to *0.5* when `contours.type` is *levels*. Defaults to *2* when `contour.type` is *constraint*.
	Width float64 `json:"width,omitempty"`
}

type ContourcarpetStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type DensitymapboxColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat DensitymapboxColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode DensitymapboxColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent DensitymapboxColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix DensitymapboxColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix DensitymapboxColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode DensitymapboxColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *DensitymapboxColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops DensitymapboxColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition DensitymapboxColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode DensitymapboxColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks DensitymapboxColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *DensitymapboxColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor DensitymapboxColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor DensitymapboxColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type DensitymapboxHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align DensitymapboxHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *DensitymapboxHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type DensitymapboxStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

// DensitymapboxTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type DensitymapboxTransforms interface{}

type FunnelConnector struct {

	// Fillcolor color Sets the fill color.
	Fillcolor String `json:"fillcolor,omitempty"`

	// Line <no value> <no value>
	Line *FunnelConnectorLine `json:"line,omitempty"`

	// Visible boolean Determines if connector regions and lines are drawn.
	Visible Bool `json:"visible,omitempty"`
}

type FunnelHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align FunnelHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *FunnelHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type FunnelInsidetextfont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type FunnelMarker struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorbar <no value> <no value>
	Colorbar *FunnelMarkerColorbar `json:"colorbar,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Line <no value> <no value>
	Line *FunnelMarkerLine `json:"line,omitempty"`

	// Opacity number Sets the opacity of the bars.
	Opacity interface{} `json:"opacity,omitempty"`

	// Opacitysrc string Sets the source reference on Chart Studio Cloud for  opacity .
	Opacitysrc String `json:"opacitysrc,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Showscale boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.
	Showscale Bool `json:"showscale,omitempty"`
}

type FunnelOutsidetextfont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type FunnelStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type FunnelTextfont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

// FunnelTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type FunnelTransforms interface{}

type FunnelareaDomain struct {

	// Column integer If there is a layout grid, use the domain for this column in the grid for this funnelarea trace .
	Column int64 `json:"column,omitempty"`

	// Row integer If there is a layout grid, use the domain for this row in the grid for this funnelarea trace .
	Row int64 `json:"row,omitempty"`

	// X info_array Sets the horizontal domain of this funnelarea trace (in plot fraction).
	X interface{} `json:"x,omitempty"`

	// Y info_array Sets the vertical domain of this funnelarea trace (in plot fraction).
	Y interface{} `json:"y,omitempty"`
}

type FunnelareaHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align FunnelareaHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *FunnelareaHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type FunnelareaInsidetextfont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type FunnelareaMarker struct {

	// Colors data_array Sets the color of each sector. If not specified, the default trace color set is used to pick the sector colors.
	Colors interface{} `json:"colors,omitempty"`

	// Colorssrc string Sets the source reference on Chart Studio Cloud for  colors .
	Colorssrc String `json:"colorssrc,omitempty"`

	// Line <no value> <no value>
	Line *FunnelareaMarkerLine `json:"line,omitempty"`
}

type FunnelareaStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type FunnelareaTextfont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type FunnelareaTitle struct {

	// Font <no value> Sets the font used for `title`. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *FunnelareaTitleFont `json:"font,omitempty"`

	// Position enumerated Specifies the location of the `title`. Note that the title's position used to be set by the now deprecated `titleposition` attribute.
	Position FunnelareaTitlePosition `json:"position,omitempty"`

	// Text string Sets the title of the chart. If it is empty, no title is displayed. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

// FunnelareaTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type FunnelareaTransforms interface{}

type HeatmapColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat HeatmapColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode HeatmapColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent HeatmapColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix HeatmapColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix HeatmapColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode HeatmapColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *HeatmapColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops HeatmapColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition HeatmapColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode HeatmapColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks HeatmapColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *HeatmapColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor HeatmapColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor HeatmapColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type HeatmapHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align HeatmapHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *HeatmapHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type HeatmapStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

// HeatmapTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type HeatmapTransforms interface{}

type HeatmapglColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat HeatmapglColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode HeatmapglColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent HeatmapglColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix HeatmapglColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix HeatmapglColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode HeatmapglColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *HeatmapglColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops HeatmapglColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition HeatmapglColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode HeatmapglColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks HeatmapglColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *HeatmapglColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor HeatmapglColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor HeatmapglColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type HeatmapglHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align HeatmapglHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *HeatmapglHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type HeatmapglStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

// HeatmapglTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type HeatmapglTransforms interface{}

type Histogram2dColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat Histogram2dColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode Histogram2dColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent Histogram2dColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix Histogram2dColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix Histogram2dColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode Histogram2dColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *Histogram2dColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops Histogram2dColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition Histogram2dColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode Histogram2dColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks Histogram2dColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *Histogram2dColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor Histogram2dColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor Histogram2dColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type Histogram2dHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align Histogram2dHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *Histogram2dHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type Histogram2dMarker struct {

	// Color data_array Sets the aggregation data.
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`
}

type Histogram2dStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

// Histogram2dTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type Histogram2dTransforms interface{}

type Histogram2dXbins struct {

	// End any Sets the end value for the x axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.
	End interface{} `json:"end,omitempty"`

	// Size any Sets the size of each x axis bin. Default behavior: If `nbinsx` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsx` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or *M<n>* for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1).
	Size interface{} `json:"size,omitempty"`

	// Start any Sets the starting value for the x axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5.
	Start interface{} `json:"start,omitempty"`
}

type Histogram2dYbins struct {

	// End any Sets the end value for the y axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.
	End interface{} `json:"end,omitempty"`

	// Size any Sets the size of each y axis bin. Default behavior: If `nbinsy` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsy` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or *M<n>* for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1).
	Size interface{} `json:"size,omitempty"`

	// Start any Sets the starting value for the y axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5.
	Start interface{} `json:"start,omitempty"`
}

type Histogram2dcontourColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat Histogram2dcontourColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode Histogram2dcontourColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent Histogram2dcontourColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix Histogram2dcontourColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix Histogram2dcontourColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode Histogram2dcontourColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *Histogram2dcontourColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops Histogram2dcontourColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition Histogram2dcontourColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode Histogram2dcontourColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks Histogram2dcontourColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *Histogram2dcontourColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor Histogram2dcontourColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor Histogram2dcontourColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type Histogram2dcontourContours struct {

	// Coloring enumerated Determines the coloring method showing the contour values. If *fill*, coloring is done evenly between each contour level If *heatmap*, a heatmap gradient coloring is applied between each contour level. If *lines*, coloring is done on the contour lines. If *none*, no coloring is applied on this trace.
	Coloring Histogram2dcontourContoursColoring `json:"coloring,omitempty"`

	// End number Sets the end contour level value. Must be more than `contours.start`
	End float64 `json:"end,omitempty"`

	// ImpliedEdits <no value> <no value>
	ImpliedEdits *Histogram2dcontourContoursImpliededits `json:"impliedEdits,omitempty"`

	// Labelfont <no value> Sets the font used for labeling the contour levels. The default color comes from the lines, if shown. The default family and size come from `layout.font`.
	Labelfont *Histogram2dcontourContoursLabelfont `json:"labelfont,omitempty"`

	// Labelformat string Sets the contour label formatting rule using d3 formatting mini-language which is very similar to Python, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format
	Labelformat String `json:"labelformat,omitempty"`

	// Operation enumerated Sets the constraint operation. *=* keeps regions equal to `value` *<* and *<=* keep regions less than `value` *>* and *>=* keep regions greater than `value` *[]*, *()*, *[)*, and *(]* keep regions inside `value[0]` to `value[1]` *][*, *)(*, *](*, *)[* keep regions outside `value[0]` to value[1]` Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.
	Operation Histogram2dcontourContoursOperation `json:"operation,omitempty"`

	// Showlabels boolean Determines whether to label the contour lines with their values.
	Showlabels Bool `json:"showlabels,omitempty"`

	// Showlines boolean Determines whether or not the contour lines are drawn. Has an effect only if `contours.coloring` is set to *fill*.
	Showlines Bool `json:"showlines,omitempty"`

	// Size number Sets the step between each contour level. Must be positive.
	Size float64 `json:"size,omitempty"`

	// Start number Sets the starting contour level value. Must be less than `contours.end`
	Start float64 `json:"start,omitempty"`

	// Type enumerated If `levels`, the data is represented as a contour plot with multiple levels displayed. If `constraint`, the data is represented as constraints with the invalid region shaded as specified by the `operation` and `value` parameters.
	Type Histogram2dcontourContoursType `json:"type,omitempty"`

	// Value any Sets the value or values of the constraint boundary. When `operation` is set to one of the comparison values (=,<,>=,>,<=) *value* is expected to be a number. When `operation` is set to one of the interval values ([],(),[),(],][,)(,](,)[) *value* is expected to be an array of two numbers where the first is the lower bound and the second is the upper bound.
	Value interface{} `json:"value,omitempty"`
}

type Histogram2dcontourHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align Histogram2dcontourHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *Histogram2dcontourHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type Histogram2dcontourLine struct {

	// Color color Sets the color of the contour level. Has no effect if `contours.coloring` is set to *lines*.
	Color String `json:"color,omitempty"`

	// Dash string Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Dash String `json:"dash,omitempty"`

	// Smoothing number Sets the amount of smoothing for the contour lines, where *0* corresponds to no smoothing.
	Smoothing float64 `json:"smoothing,omitempty"`

	// Width number Sets the contour line width in (in px)
	Width float64 `json:"width,omitempty"`
}

type Histogram2dcontourMarker struct {

	// Color data_array Sets the aggregation data.
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`
}

type Histogram2dcontourStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

// Histogram2dcontourTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type Histogram2dcontourTransforms interface{}

type Histogram2dcontourXbins struct {

	// End any Sets the end value for the x axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.
	End interface{} `json:"end,omitempty"`

	// Size any Sets the size of each x axis bin. Default behavior: If `nbinsx` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsx` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or *M<n>* for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1).
	Size interface{} `json:"size,omitempty"`

	// Start any Sets the starting value for the x axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5.
	Start interface{} `json:"start,omitempty"`
}

type Histogram2dcontourYbins struct {

	// End any Sets the end value for the y axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.
	End interface{} `json:"end,omitempty"`

	// Size any Sets the size of each y axis bin. Default behavior: If `nbinsy` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsy` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or *M<n>* for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1).
	Size interface{} `json:"size,omitempty"`

	// Start any Sets the starting value for the y axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5.
	Start interface{} `json:"start,omitempty"`
}

type HistogramCumulative struct {

	// Currentbin enumerated Only applies if cumulative is enabled. Sets whether the current bin is included, excluded, or has half of its value included in the current cumulative value. *include* is the default for compatibility with various other tools, however it introduces a half-bin bias to the results. *exclude* makes the opposite half-bin bias, and *half* removes it.
	Currentbin HistogramCumulativeCurrentbin `json:"currentbin,omitempty"`

	// Direction enumerated Only applies if cumulative is enabled. If *increasing* (default) we sum all prior bins, so the result increases from left to right. If *decreasing* we sum later bins so the result decreases from left to right.
	Direction HistogramCumulativeDirection `json:"direction,omitempty"`

	// Enabled boolean If true, display the cumulative distribution by summing the binned values. Use the `direction` and `centralbin` attributes to tune the accumulation method. Note: in this mode, the *density* `histnorm` settings behave the same as their equivalents without *density*: ** and *density* both rise to the number of data points, and *probability* and *probability density* both rise to the number of sample points.
	Enabled Bool `json:"enabled,omitempty"`
}

type HistogramErrorX struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Array data_array Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.
	Array interface{} `json:"array,omitempty"`

	// Arrayminus data_array Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.
	Arrayminus interface{} `json:"arrayminus,omitempty"`

	// Arrayminussrc string Sets the source reference on Chart Studio Cloud for  arrayminus .
	Arrayminussrc String `json:"arrayminussrc,omitempty"`

	// Arraysrc string Sets the source reference on Chart Studio Cloud for  array .
	Arraysrc String `json:"arraysrc,omitempty"`

	// Color color Sets the stoke color of the error bars.
	Color String `json:"color,omitempty"`

	// Copy_ystyle boolean <no value>
	Copy_ystyle Bool `json:"copy_ystyle,omitempty"`

	// Symmetric boolean Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.
	Symmetric Bool `json:"symmetric,omitempty"`

	// Thickness number Sets the thickness (in px) of the error bars.
	Thickness float64 `json:"thickness,omitempty"`

	// Traceref integer <no value>
	Traceref int64 `json:"traceref,omitempty"`

	// Tracerefminus integer <no value>
	Tracerefminus int64 `json:"tracerefminus,omitempty"`

	// Type enumerated Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.
	Type HistogramErrorXType `json:"type,omitempty"`

	// Value number Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.
	Value float64 `json:"value,omitempty"`

	// Valueminus number Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars
	Valueminus float64 `json:"valueminus,omitempty"`

	// Visible boolean Determines whether or not this set of error bars is visible.
	Visible Bool `json:"visible,omitempty"`

	// Width number Sets the width (in px) of the cross-bar at both ends of the error bars.
	Width float64 `json:"width,omitempty"`
}

type HistogramErrorY struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Array data_array Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.
	Array interface{} `json:"array,omitempty"`

	// Arrayminus data_array Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.
	Arrayminus interface{} `json:"arrayminus,omitempty"`

	// Arrayminussrc string Sets the source reference on Chart Studio Cloud for  arrayminus .
	Arrayminussrc String `json:"arrayminussrc,omitempty"`

	// Arraysrc string Sets the source reference on Chart Studio Cloud for  array .
	Arraysrc String `json:"arraysrc,omitempty"`

	// Color color Sets the stoke color of the error bars.
	Color String `json:"color,omitempty"`

	// Symmetric boolean Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.
	Symmetric Bool `json:"symmetric,omitempty"`

	// Thickness number Sets the thickness (in px) of the error bars.
	Thickness float64 `json:"thickness,omitempty"`

	// Traceref integer <no value>
	Traceref int64 `json:"traceref,omitempty"`

	// Tracerefminus integer <no value>
	Tracerefminus int64 `json:"tracerefminus,omitempty"`

	// Type enumerated Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.
	Type HistogramErrorYType `json:"type,omitempty"`

	// Value number Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.
	Value float64 `json:"value,omitempty"`

	// Valueminus number Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars
	Valueminus float64 `json:"valueminus,omitempty"`

	// Visible boolean Determines whether or not this set of error bars is visible.
	Visible Bool `json:"visible,omitempty"`

	// Width number Sets the width (in px) of the cross-bar at both ends of the error bars.
	Width float64 `json:"width,omitempty"`
}

type HistogramHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align HistogramHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *HistogramHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type HistogramMarker struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorbar <no value> <no value>
	Colorbar *HistogramMarkerColorbar `json:"colorbar,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Line <no value> <no value>
	Line *HistogramMarkerLine `json:"line,omitempty"`

	// Opacity number Sets the opacity of the bars.
	Opacity interface{} `json:"opacity,omitempty"`

	// Opacitysrc string Sets the source reference on Chart Studio Cloud for  opacity .
	Opacitysrc String `json:"opacitysrc,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Showscale boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.
	Showscale Bool `json:"showscale,omitempty"`
}

type HistogramSelected struct {

	// Marker <no value> <no value>
	Marker *HistogramSelectedMarker `json:"marker,omitempty"`

	// Textfont <no value> <no value>
	Textfont *HistogramSelectedTextfont `json:"textfont,omitempty"`
}

type HistogramStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

// HistogramTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type HistogramTransforms interface{}

type HistogramUnselected struct {

	// Marker <no value> <no value>
	Marker *HistogramUnselectedMarker `json:"marker,omitempty"`

	// Textfont <no value> <no value>
	Textfont *HistogramUnselectedTextfont `json:"textfont,omitempty"`
}

type HistogramXbins struct {

	// End any Sets the end value for the x axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.
	End interface{} `json:"end,omitempty"`

	// Size any Sets the size of each x axis bin. Default behavior: If `nbinsx` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsx` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or *M<n>* for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1). If multiple non-overlaying histograms share a subplot, the first explicit `size` is used and all others discarded. If no `size` is provided,the sample data from all traces is combined to determine `size` as described above.
	Size interface{} `json:"size,omitempty"`

	// Start any Sets the starting value for the x axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5. If multiple non-overlaying histograms share a subplot, the first explicit `start` is used exactly and all others are shifted down (if necessary) to differ from that one by an integer number of bins.
	Start interface{} `json:"start,omitempty"`
}

type HistogramYbins struct {

	// End any Sets the end value for the y axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.
	End interface{} `json:"end,omitempty"`

	// Size any Sets the size of each y axis bin. Default behavior: If `nbinsy` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsy` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or *M<n>* for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1). If multiple non-overlaying histograms share a subplot, the first explicit `size` is used and all others discarded. If no `size` is provided,the sample data from all traces is combined to determine `size` as described above.
	Size interface{} `json:"size,omitempty"`

	// Start any Sets the starting value for the y axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5. If multiple non-overlaying histograms share a subplot, the first explicit `start` is used exactly and all others are shifted down (if necessary) to differ from that one by an integer number of bins.
	Start interface{} `json:"start,omitempty"`
}

type ImageHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align ImageHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *ImageHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type ImageStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type IndicatorDelta struct {

	// Decreasing <no value> <no value>
	Decreasing *IndicatorDeltaDecreasing `json:"decreasing,omitempty"`

	// Font <no value> Set the font used to display the delta
	Font *IndicatorDeltaFont `json:"font,omitempty"`

	// Increasing <no value> <no value>
	Increasing *IndicatorDeltaIncreasing `json:"increasing,omitempty"`

	// Position enumerated Sets the position of delta with respect to the number.
	Position IndicatorDeltaPosition `json:"position,omitempty"`

	// Reference number Sets the reference value to compute the delta. By default, it is set to the current value.
	Reference float64 `json:"reference,omitempty"`

	// Relative boolean Show relative change
	Relative Bool `json:"relative,omitempty"`

	// Valueformat string Sets the value formatting rule using d3 formatting mini-language which is similar to those of Python. See https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format
	Valueformat String `json:"valueformat,omitempty"`
}

type IndicatorDomain struct {

	// Column integer If there is a layout grid, use the domain for this column in the grid for this indicator trace .
	Column int64 `json:"column,omitempty"`

	// Row integer If there is a layout grid, use the domain for this row in the grid for this indicator trace .
	Row int64 `json:"row,omitempty"`

	// X info_array Sets the horizontal domain of this indicator trace (in plot fraction).
	X interface{} `json:"x,omitempty"`

	// Y info_array Sets the vertical domain of this indicator trace (in plot fraction).
	Y interface{} `json:"y,omitempty"`
}

type IndicatorGauge struct {

	// Axis <no value> <no value>
	Axis *IndicatorGaugeAxis `json:"axis,omitempty"`

	// Bar <no value> Set the appearance of the gauge's value
	Bar *IndicatorGaugeBar `json:"bar,omitempty"`

	// Bgcolor color Sets the gauge background color.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the color of the border enclosing the gauge.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) of the border enclosing the gauge.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Shape enumerated Set the shape of the gauge
	Shape IndicatorGaugeShape `json:"shape,omitempty"`

	// Steps <no value> <no value>
	Steps IndicatorGaugeSteps `json:"steps,omitempty"`

	// Threshold <no value> <no value>
	Threshold *IndicatorGaugeThreshold `json:"threshold,omitempty"`
}

type IndicatorNumber struct {

	// Font <no value> Set the font used to display main number
	Font *IndicatorNumberFont `json:"font,omitempty"`

	// Prefix string Sets a prefix appearing before the number.
	Prefix String `json:"prefix,omitempty"`

	// Suffix string Sets a suffix appearing next to the number.
	Suffix String `json:"suffix,omitempty"`

	// Valueformat string Sets the value formatting rule using d3 formatting mini-language which is similar to those of Python. See https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format
	Valueformat String `json:"valueformat,omitempty"`
}

type IndicatorStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type IndicatorTitle struct {

	// Align enumerated Sets the horizontal alignment of the title. It defaults to `center` except for bullet charts for which it defaults to right.
	Align IndicatorTitleAlign `json:"align,omitempty"`

	// Font <no value> Set the font used to display the title
	Font *IndicatorTitleFont `json:"font,omitempty"`

	// Text string Sets the title of this indicator.
	Text String `json:"text,omitempty"`
}

// IndicatorTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type IndicatorTransforms interface{}

type IsosurfaceCaps struct {

	// X <no value> <no value>
	X *IsosurfaceCapsX `json:"x,omitempty"`

	// Y <no value> <no value>
	Y *IsosurfaceCapsY `json:"y,omitempty"`

	// Z <no value> <no value>
	Z *IsosurfaceCapsZ `json:"z,omitempty"`
}

type IsosurfaceColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat IsosurfaceColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode IsosurfaceColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent IsosurfaceColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix IsosurfaceColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix IsosurfaceColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode IsosurfaceColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *IsosurfaceColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops IsosurfaceColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition IsosurfaceColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode IsosurfaceColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks IsosurfaceColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *IsosurfaceColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor IsosurfaceColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor IsosurfaceColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type IsosurfaceContour struct {

	// Color color Sets the color of the contour lines.
	Color String `json:"color,omitempty"`

	// Show boolean Sets whether or not dynamic contours are shown on hover
	Show Bool `json:"show,omitempty"`

	// Width number Sets the width of the contour lines.
	Width float64 `json:"width,omitempty"`
}

type IsosurfaceHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align IsosurfaceHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *IsosurfaceHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type IsosurfaceLighting struct {

	// Ambient number Ambient light increases overall color visibility but can wash out the image.
	Ambient float64 `json:"ambient,omitempty"`

	// Diffuse number Represents the extent that incident rays are reflected in a range of angles.
	Diffuse float64 `json:"diffuse,omitempty"`

	// Facenormalsepsilon number Epsilon for face normals calculation avoids math issues arising from degenerate geometry.
	Facenormalsepsilon float64 `json:"facenormalsepsilon,omitempty"`

	// Fresnel number Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.
	Fresnel float64 `json:"fresnel,omitempty"`

	// Roughness number Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.
	Roughness float64 `json:"roughness,omitempty"`

	// Specular number Represents the level that incident rays are reflected in a single direction, causing shine.
	Specular float64 `json:"specular,omitempty"`

	// Vertexnormalsepsilon number Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.
	Vertexnormalsepsilon float64 `json:"vertexnormalsepsilon,omitempty"`
}

type IsosurfaceLightposition struct {

	// X number Numeric vector, representing the X coordinate for each vertex.
	X float64 `json:"x,omitempty"`

	// Y number Numeric vector, representing the Y coordinate for each vertex.
	Y float64 `json:"y,omitempty"`

	// Z number Numeric vector, representing the Z coordinate for each vertex.
	Z float64 `json:"z,omitempty"`
}

type IsosurfaceSlices struct {

	// X <no value> <no value>
	X *IsosurfaceSlicesX `json:"x,omitempty"`

	// Y <no value> <no value>
	Y *IsosurfaceSlicesY `json:"y,omitempty"`

	// Z <no value> <no value>
	Z *IsosurfaceSlicesZ `json:"z,omitempty"`
}

type IsosurfaceSpaceframe struct {

	// Fill number Sets the fill ratio of the `spaceframe` elements. The default fill value is 0.15 meaning that only 15% of the area of every faces of tetras would be shaded. Applying a greater `fill` ratio would allow the creation of stronger elements or could be sued to have entirely closed areas (in case of using 1).
	Fill float64 `json:"fill,omitempty"`

	// Show boolean Displays/hides tetrahedron shapes between minimum and maximum iso-values. Often useful when either caps or surfaces are disabled or filled with values less than 1.
	Show Bool `json:"show,omitempty"`
}

type IsosurfaceStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type IsosurfaceSurface struct {

	// Count integer Sets the number of iso-surfaces between minimum and maximum iso-values. By default this value is 2 meaning that only minimum and maximum surfaces would be drawn.
	Count int64 `json:"count,omitempty"`

	// Fill number Sets the fill ratio of the iso-surface. The default fill value of the surface is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.
	Fill float64 `json:"fill,omitempty"`

	// Pattern flaglist Sets the surface pattern of the iso-surface 3-D sections. The default pattern of the surface is `all` meaning that the rest of surface elements would be shaded. The check options (either 1 or 2) could be used to draw half of the squares on the surface. Using various combinations of capital `A`, `B`, `C`, `D` and `E` may also be used to reduce the number of triangles on the iso-surfaces and creating other patterns of interest.
	Pattern IsosurfaceSurfacePattern `json:"pattern,omitempty"`

	// Show boolean Hides/displays surfaces between minimum and maximum iso-values.
	Show Bool `json:"show,omitempty"`
}

type LayoutActiveshape struct {

	// Fillcolor color Sets the color filling the active shape' interior.
	Fillcolor String `json:"fillcolor,omitempty"`

	// Opacity number Sets the opacity of the active shape.
	Opacity float64 `json:"opacity,omitempty"`
}

type LayoutAngularaxis struct {

	// Domain info_array Polar chart subplots are not supported yet. This key has currently no effect.
	Domain interface{} `json:"domain,omitempty"`

	// Endpadding number Legacy polar charts are deprecated! Please switch to *polar* subplots.
	Endpadding float64 `json:"endpadding,omitempty"`

	// Range info_array Legacy polar charts are deprecated! Please switch to *polar* subplots. Defines the start and end point of this angular axis.
	Range interface{} `json:"range,omitempty"`

	// Showline boolean Legacy polar charts are deprecated! Please switch to *polar* subplots. Determines whether or not the line bounding this angular axis will be shown on the figure.
	Showline Bool `json:"showline,omitempty"`

	// Showticklabels boolean Legacy polar charts are deprecated! Please switch to *polar* subplots. Determines whether or not the angular axis ticks will feature tick labels.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Tickcolor color Legacy polar charts are deprecated! Please switch to *polar* subplots. Sets the color of the tick lines on this angular axis.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Ticklen number Legacy polar charts are deprecated! Please switch to *polar* subplots. Sets the length of the tick lines on this angular axis.
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickorientation enumerated Legacy polar charts are deprecated! Please switch to *polar* subplots. Sets the orientation (from the paper perspective) of the angular axis tick labels.
	Tickorientation LayoutAngularaxisTickorientation `json:"tickorientation,omitempty"`

	// Ticksuffix string Legacy polar charts are deprecated! Please switch to *polar* subplots. Sets the length of the tick lines on this angular axis.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Visible boolean Legacy polar charts are deprecated! Please switch to *polar* subplots. Determines whether or not this axis will be visible.
	Visible Bool `json:"visible,omitempty"`
}

// LayoutAnnotations It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// annotation
//      _deprecated
//      align
//      arrowcolor
//      arrowhead
//      arrowside
//      arrowsize
//      arrowwidth
//      ax
//      axref
//      ay
//      ayref
//      bgcolor
//      bordercolor
//      borderpad
//      borderwidth
//      captureevents
//      clicktoshow
//      editType
//      font
//      height
//      hoverlabel
//      hovertext
//      name
//      opacity
//      role
//      showarrow
//      standoff
//      startarrowhead
//      startarrowsize
//      startstandoff
//      templateitemname
//      text
//      textangle
//      valign
//      visible
//      width
//      x
//      xanchor
//      xclick
//      xref
//      xshift
//      y
//      yanchor
//      yclick
//      yref
//      yshift
type LayoutAnnotations interface{}

type LayoutColoraxis struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here corresponding trace color array(s)) or the bounds set in `cmin` and `cmax`  Defaults to `false` when `cmin` and `cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Value should have the same units as corresponding trace color array(s) and if set, `cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as corresponding trace color array(s). Has no effect when `cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Value should have the same units as corresponding trace color array(s) and if set, `cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Colorbar <no value> <no value>
	Colorbar *LayoutColoraxisColorbar `json:"colorbar,omitempty"`

	// Colorscale colorscale Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Showscale boolean Determines whether or not a colorbar is displayed for this trace.
	Showscale Bool `json:"showscale,omitempty"`
}

type LayoutColorscale struct {

	// Diverging colorscale Sets the default diverging colorscale. Note that `autocolorscale` must be true for this attribute to work.
	// Pending of type "colorscale"Diverging  `json:"diverging,omitempty"`

	// Sequential colorscale Sets the default sequential colorscale for positive values. Note that `autocolorscale` must be true for this attribute to work.
	// Pending of type "colorscale"Sequential  `json:"sequential,omitempty"`

	// Sequentialminus colorscale Sets the default sequential colorscale for negative values. Note that `autocolorscale` must be true for this attribute to work.
	// Pending of type "colorscale"Sequentialminus  `json:"sequentialminus,omitempty"`

}

type LayoutFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type LayoutGeo struct {

	// Bgcolor color Set the background color of the map
	Bgcolor String `json:"bgcolor,omitempty"`

	// Center <no value> <no value>
	Center *LayoutGeoCenter `json:"center,omitempty"`

	// Coastlinecolor color Sets the coastline color.
	Coastlinecolor String `json:"coastlinecolor,omitempty"`

	// Coastlinewidth number Sets the coastline stroke width (in px).
	Coastlinewidth float64 `json:"coastlinewidth,omitempty"`

	// Countrycolor color Sets line color of the country boundaries.
	Countrycolor String `json:"countrycolor,omitempty"`

	// Countrywidth number Sets line width (in px) of the country boundaries.
	Countrywidth float64 `json:"countrywidth,omitempty"`

	// Domain <no value> <no value>
	Domain *LayoutGeoDomain `json:"domain,omitempty"`

	// Fitbounds enumerated Determines if this subplot's view settings are auto-computed to fit trace data. On scoped maps, setting `fitbounds` leads to `center.lon` and `center.lat` getting auto-filled. On maps with a non-clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`, and `projection.rotation.lon` getting auto-filled. On maps with a clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`, `projection.rotation.lon`, `projection.rotation.lat`, `lonaxis.range` and `lonaxis.range` getting auto-filled. If *locations*, only the trace's visible locations are considered in the `fitbounds` computations. If *geojson*, the entire trace input `geojson` (if provided) is considered in the `fitbounds` computations, Defaults to *false*.
	Fitbounds LayoutGeoFitbounds `json:"fitbounds,omitempty"`

	// Framecolor color Sets the color the frame.
	Framecolor String `json:"framecolor,omitempty"`

	// Framewidth number Sets the stroke width (in px) of the frame.
	Framewidth float64 `json:"framewidth,omitempty"`

	// Lakecolor color Sets the color of the lakes.
	Lakecolor String `json:"lakecolor,omitempty"`

	// Landcolor color Sets the land mass color.
	Landcolor String `json:"landcolor,omitempty"`

	// Lataxis <no value> <no value>
	Lataxis *LayoutGeoLataxis `json:"lataxis,omitempty"`

	// Lonaxis <no value> <no value>
	Lonaxis *LayoutGeoLonaxis `json:"lonaxis,omitempty"`

	// Oceancolor color Sets the ocean color
	Oceancolor String `json:"oceancolor,omitempty"`

	// Projection <no value> <no value>
	Projection *LayoutGeoProjection `json:"projection,omitempty"`

	// Resolution enumerated Sets the resolution of the base layers. The values have units of km/mm e.g. 110 corresponds to a scale ratio of 1:110,000,000.
	Resolution LayoutGeoResolution `json:"resolution,omitempty"`

	// Rivercolor color Sets color of the rivers.
	Rivercolor String `json:"rivercolor,omitempty"`

	// Riverwidth number Sets the stroke width (in px) of the rivers.
	Riverwidth float64 `json:"riverwidth,omitempty"`

	// Scope enumerated Set the scope of the map.
	Scope LayoutGeoScope `json:"scope,omitempty"`

	// Showcoastlines boolean Sets whether or not the coastlines are drawn.
	Showcoastlines Bool `json:"showcoastlines,omitempty"`

	// Showcountries boolean Sets whether or not country boundaries are drawn.
	Showcountries Bool `json:"showcountries,omitempty"`

	// Showframe boolean Sets whether or not a frame is drawn around the map.
	Showframe Bool `json:"showframe,omitempty"`

	// Showlakes boolean Sets whether or not lakes are drawn.
	Showlakes Bool `json:"showlakes,omitempty"`

	// Showland boolean Sets whether or not land masses are filled in color.
	Showland Bool `json:"showland,omitempty"`

	// Showocean boolean Sets whether or not oceans are filled in color.
	Showocean Bool `json:"showocean,omitempty"`

	// Showrivers boolean Sets whether or not rivers are drawn.
	Showrivers Bool `json:"showrivers,omitempty"`

	// Showsubunits boolean Sets whether or not boundaries of subunits within countries (e.g. states, provinces) are drawn.
	Showsubunits Bool `json:"showsubunits,omitempty"`

	// Subunitcolor color Sets the color of the subunits boundaries.
	Subunitcolor String `json:"subunitcolor,omitempty"`

	// Subunitwidth number Sets the stroke width (in px) of the subunits boundaries.
	Subunitwidth float64 `json:"subunitwidth,omitempty"`

	// Uirevision any Controls persistence of user-driven changes in the view (projection and center). Defaults to `layout.uirevision`.
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Visible boolean Sets the default visibility of the base layers.
	Visible Bool `json:"visible,omitempty"`
}

type LayoutGrid struct {

	// Columns integer The number of columns in the grid. If you provide a 2D `subplots` array, the length of its longest row is used as the default. If you give an `xaxes` array, its length is used as the default. But it's also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.
	Columns int64 `json:"columns,omitempty"`

	// Domain <no value> <no value>
	Domain *LayoutGridDomain `json:"domain,omitempty"`

	// Pattern enumerated If no `subplots`, `xaxes`, or `yaxes` are given but we do have `rows` and `columns`, we can generate defaults using consecutive axis IDs, in two ways: *coupled* gives one x axis per column and one y axis per row. *independent* uses a new xy pair for each cell, left-to-right across each row then iterating rows according to `roworder`.
	Pattern LayoutGridPattern `json:"pattern,omitempty"`

	// Roworder enumerated Is the first row the top or the bottom? Note that columns are always enumerated from left to right.
	Roworder LayoutGridRoworder `json:"roworder,omitempty"`

	// Rows integer The number of rows in the grid. If you provide a 2D `subplots` array or a `yaxes` array, its length is used as the default. But it's also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.
	Rows int64 `json:"rows,omitempty"`

	// Subplots info_array Used for freeform grids, where some axes may be shared across subplots but others are not. Each entry should be a cartesian subplot id, like *xy* or *x3y2*, or ** to leave that cell empty. You may reuse x axes within the same column, and y axes within the same row. Non-cartesian subplots and traces that support `domain` can place themselves in this grid separately using the `gridcell` attribute.
	Subplots interface{} `json:"subplots,omitempty"`

	// Xaxes info_array Used with `yaxes` when the x and y axes are shared across columns and rows. Each entry should be an x axis id like *x*, *x2*, etc., or ** to not put an x axis in that column. Entries other than ** must be unique. Ignored if `subplots` is present. If missing but `yaxes` is present, will generate consecutive IDs.
	Xaxes interface{} `json:"xaxes,omitempty"`

	// Xgap number Horizontal space between grid cells, expressed as a fraction of the total width available to one cell. Defaults to 0.1 for coupled-axes grids and 0.2 for independent grids.
	Xgap float64 `json:"xgap,omitempty"`

	// Xside enumerated Sets where the x axis labels and titles go. *bottom* means the very bottom of the grid. *bottom plot* is the lowest plot that each x axis is used in. *top* and *top plot* are similar.
	Xside LayoutGridXside `json:"xside,omitempty"`

	// Yaxes info_array Used with `yaxes` when the x and y axes are shared across columns and rows. Each entry should be an y axis id like *y*, *y2*, etc., or ** to not put a y axis in that row. Entries other than ** must be unique. Ignored if `subplots` is present. If missing but `xaxes` is present, will generate consecutive IDs.
	Yaxes interface{} `json:"yaxes,omitempty"`

	// Ygap number Vertical space between grid cells, expressed as a fraction of the total height available to one cell. Defaults to 0.1 for coupled-axes grids and 0.3 for independent grids.
	Ygap float64 `json:"ygap,omitempty"`

	// Yside enumerated Sets where the y axis labels and titles go. *left* means the very left edge of the grid. *left plot* is the leftmost plot that each y axis is used in. *right* and *right plot* are similar.
	Yside LayoutGridYside `json:"yside,omitempty"`
}

type LayoutHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align LayoutHoverlabelAlign `json:"align,omitempty"`

	// Bgcolor color Sets the background color of all hover labels on graph
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the border color of all hover labels on graph.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Font <no value> Sets the default hover label font used by all traces on the graph.
	Font *LayoutHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength int64 `json:"namelength,omitempty"`
}

// LayoutImages It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// image
//      editType
//      layer
//      name
//      opacity
//      role
//      sizex
//      sizey
//      sizing
//      source
//      templateitemname
//      visible
//      x
//      xanchor
//      xref
//      y
//      yanchor
//      yref
type LayoutImages interface{}

type LayoutLegend struct {

	// Bgcolor color Sets the legend background color. Defaults to `layout.paper_bgcolor`.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the color of the border enclosing the legend.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) of the border enclosing the legend.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Font <no value> Sets the font used to text the legend items.
	Font *LayoutLegendFont `json:"font,omitempty"`

	// Itemclick enumerated Determines the behavior on legend item click. *toggle* toggles the visibility of the item clicked on the graph. *toggleothers* makes the clicked item the sole visible item on the graph. *false* disable legend item click interactions.
	Itemclick LayoutLegendItemclick `json:"itemclick,omitempty"`

	// Itemdoubleclick enumerated Determines the behavior on legend item double-click. *toggle* toggles the visibility of the item clicked on the graph. *toggleothers* makes the clicked item the sole visible item on the graph. *false* disable legend item double-click interactions.
	Itemdoubleclick LayoutLegendItemdoubleclick `json:"itemdoubleclick,omitempty"`

	// Itemsizing enumerated Determines if the legend items symbols scale with their corresponding *trace* attributes or remain *constant* independent of the symbol size on the graph.
	Itemsizing LayoutLegendItemsizing `json:"itemsizing,omitempty"`

	// Itemwidth number Sets the width (in px) of the legend item symbols (the part other than the title.text).
	Itemwidth float64 `json:"itemwidth,omitempty"`

	// Orientation enumerated Sets the orientation of the legend.
	Orientation LayoutLegendOrientation `json:"orientation,omitempty"`

	// Title <no value> <no value>
	Title *LayoutLegendTitle `json:"title,omitempty"`

	// Tracegroupgap number Sets the amount of vertical space (in px) between legend groups.
	Tracegroupgap float64 `json:"tracegroupgap,omitempty"`

	// Traceorder flaglist Determines the order at which the legend items are displayed. If *normal*, the items are displayed top-to-bottom in the same order as the input data. If *reversed*, the items are displayed in the opposite order as *normal*. If *grouped*, the items are displayed in groups (when a trace `legendgroup` is provided). if *grouped+reversed*, the items are displayed in the opposite order as *grouped*.
	Traceorder LayoutLegendTraceorder `json:"traceorder,omitempty"`

	// Uirevision any Controls persistence of legend-driven changes in trace and pie label visibility. Defaults to `layout.uirevision`.
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Valign enumerated Sets the vertical alignment of the symbols with respect to their associated text.
	Valign LayoutLegendValign `json:"valign,omitempty"`

	// X number Sets the x position (in normalized coordinates) of the legend. Defaults to *1.02* for vertical legends and defaults to *0* for horizontal legends.
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets the legend's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the legend. Value *auto* anchors legends to the right for `x` values greater than or equal to 2/3, anchors legends to the left for `x` values less than or equal to 1/3 and anchors legends with respect to their center otherwise.
	Xanchor LayoutLegendXanchor `json:"xanchor,omitempty"`

	// Y number Sets the y position (in normalized coordinates) of the legend. Defaults to *1* for vertical legends, defaults to *-0.1* for horizontal legends on graphs w/o range sliders and defaults to *1.1* for horizontal legends on graph with one or multiple range sliders.
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets the legend's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the legend. Value *auto* anchors legends at their bottom for `y` values less than or equal to 1/3, anchors legends to at their top for `y` values greater than or equal to 2/3 and anchors legends with respect to their middle otherwise.
	Yanchor LayoutLegendYanchor `json:"yanchor,omitempty"`
}

type LayoutMapbox struct {

	// Accesstoken string Sets the mapbox access token to be used for this mapbox map. Alternatively, the mapbox access token can be set in the configuration options under `mapboxAccessToken`. Note that accessToken are only required when `style` (e.g with values : basic, streets, outdoors, light, dark, satellite, satellite-streets ) and/or a layout layer references the Mapbox server.
	Accesstoken String `json:"accesstoken,omitempty"`

	// Bearing number Sets the bearing angle of the map in degrees counter-clockwise from North (mapbox.bearing).
	Bearing float64 `json:"bearing,omitempty"`

	// Center <no value> <no value>
	Center *LayoutMapboxCenter `json:"center,omitempty"`

	// Domain <no value> <no value>
	Domain *LayoutMapboxDomain `json:"domain,omitempty"`

	// Layers <no value> <no value>
	Layers LayoutMapboxLayers `json:"layers,omitempty"`

	// Pitch number Sets the pitch angle of the map (in degrees, where *0* means perpendicular to the surface of the map) (mapbox.pitch).
	Pitch float64 `json:"pitch,omitempty"`

	// Style any Defines the map layers that are rendered by default below the trace layers defined in `data`, which are themselves by default rendered below the layers defined in `layout.mapbox.layers`.  These layers can be defined either explicitly as a Mapbox Style object which can contain multiple layer definitions that load data from any public or private Tile Map Service (TMS or XYZ) or Web Map Service (WMS) or implicitly by using one of the built-in style objects which use WMSes which do not require any access tokens, or by using a default Mapbox style or custom Mapbox style URL, both of which require a Mapbox access token  Note that Mapbox access token can be set in the `accesstoken` attribute or in the `mapboxAccessToken` config option.  Mapbox Style objects are of the form described in the Mapbox GL JS documentation available at https://docs.mapbox.com/mapbox-gl-js/style-spec  The built-in plotly.js styles objects are: open-street-map, white-bg, carto-positron, carto-darkmatter, stamen-terrain, stamen-toner, stamen-watercolor  The built-in Mapbox styles are: basic, streets, outdoors, light, dark, satellite, satellite-streets  Mapbox style URLs are of the form: mapbox://mapbox.mapbox-<name>-<version>
	Style interface{} `json:"style,omitempty"`

	// Uirevision any Controls persistence of user-driven changes in the view: `center`, `zoom`, `bearing`, `pitch`. Defaults to `layout.uirevision`.
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Zoom number Sets the zoom level of the map (mapbox.zoom).
	Zoom float64 `json:"zoom,omitempty"`
}

type LayoutMargin struct {

	// Autoexpand boolean Turns on/off margin expansion computations. Legends, colorbars, updatemenus, sliders, axis rangeselector and rangeslider are allowed to push the margins by defaults.
	Autoexpand Bool `json:"autoexpand,omitempty"`

	// B number Sets the bottom margin (in px).
	B float64 `json:"b,omitempty"`

	// L number Sets the left margin (in px).
	L float64 `json:"l,omitempty"`

	// Pad number Sets the amount of padding (in px) between the plotting area and the axis lines
	Pad float64 `json:"pad,omitempty"`

	// R number Sets the right margin (in px).
	R float64 `json:"r,omitempty"`

	// T number Sets the top margin (in px).
	T float64 `json:"t,omitempty"`
}

type LayoutModebar struct {

	// Activecolor color Sets the color of the active or hovered on icons in the modebar.
	Activecolor String `json:"activecolor,omitempty"`

	// Bgcolor color Sets the background color of the modebar.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Color color Sets the color of the icons in the modebar.
	Color String `json:"color,omitempty"`

	// Orientation enumerated Sets the orientation of the modebar.
	Orientation LayoutModebarOrientation `json:"orientation,omitempty"`

	// Uirevision any Controls persistence of user-driven changes related to the modebar, including `hovermode`, `dragmode`, and `showspikes` at both the root level and inside subplots. Defaults to `layout.uirevision`.
	Uirevision interface{} `json:"uirevision,omitempty"`
}

type LayoutNewshape struct {

	// Drawdirection enumerated When `dragmode` is set to *drawrect*, *drawline* or *drawcircle* this limits the drag to be horizontal, vertical or diagonal. Using *diagonal* there is no limit e.g. in drawing lines in any direction. *ortho* limits the draw to be either horizontal or vertical. *horizontal* allows horizontal extend. *vertical* allows vertical extend.
	Drawdirection LayoutNewshapeDrawdirection `json:"drawdirection,omitempty"`

	// Fillcolor color Sets the color filling new shapes' interior. Please note that if using a fillcolor with alpha greater than half, drag inside the active shape starts moving the shape underneath, otherwise a new shape could be started over.
	Fillcolor String `json:"fillcolor,omitempty"`

	// Fillrule enumerated Determines the path's interior. For more info please visit https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule
	Fillrule LayoutNewshapeFillrule `json:"fillrule,omitempty"`

	// Layer enumerated Specifies whether new shapes are drawn below or above traces.
	Layer LayoutNewshapeLayer `json:"layer,omitempty"`

	// Line <no value> <no value>
	Line *LayoutNewshapeLine `json:"line,omitempty"`

	// Opacity number Sets the opacity of new shapes.
	Opacity float64 `json:"opacity,omitempty"`
}

type LayoutPolar struct {

	// Angularaxis <no value> <no value>
	Angularaxis *LayoutPolarAngularaxis `json:"angularaxis,omitempty"`

	// Bgcolor color Set the background color of the subplot
	Bgcolor String `json:"bgcolor,omitempty"`

	// Domain <no value> <no value>
	Domain *LayoutPolarDomain `json:"domain,omitempty"`

	// Gridshape enumerated Determines if the radial axis grid lines and angular axis line are drawn as *circular* sectors or as *linear* (polygon) sectors. Has an effect only when the angular axis has `type` *category*. Note that `radialaxis.angle` is snapped to the angle of the closest vertex when `gridshape` is *circular* (so that radial axis scale is the same as the data scale).
	Gridshape LayoutPolarGridshape `json:"gridshape,omitempty"`

	// Hole number Sets the fraction of the radius to cut out of the polar subplot.
	Hole float64 `json:"hole,omitempty"`

	// Radialaxis <no value> <no value>
	Radialaxis *LayoutPolarRadialaxis `json:"radialaxis,omitempty"`

	// Sector info_array Sets angular span of this polar subplot with two angles (in degrees). Sector are assumed to be spanned in the counterclockwise direction with *0* corresponding to rightmost limit of the polar subplot.
	Sector interface{} `json:"sector,omitempty"`

	// Uirevision any Controls persistence of user-driven changes in axis attributes, if not overridden in the individual axes. Defaults to `layout.uirevision`.
	Uirevision interface{} `json:"uirevision,omitempty"`
}

type LayoutRadialaxis struct {

	// Domain info_array Polar chart subplots are not supported yet. This key has currently no effect.
	Domain interface{} `json:"domain,omitempty"`

	// Endpadding number Legacy polar charts are deprecated! Please switch to *polar* subplots.
	Endpadding float64 `json:"endpadding,omitempty"`

	// Orientation number Legacy polar charts are deprecated! Please switch to *polar* subplots. Sets the orientation (an angle with respect to the origin) of the radial axis.
	Orientation float64 `json:"orientation,omitempty"`

	// Range info_array Legacy polar charts are deprecated! Please switch to *polar* subplots. Defines the start and end point of this radial axis.
	Range interface{} `json:"range,omitempty"`

	// Showline boolean Legacy polar charts are deprecated! Please switch to *polar* subplots. Determines whether or not the line bounding this radial axis will be shown on the figure.
	Showline Bool `json:"showline,omitempty"`

	// Showticklabels boolean Legacy polar charts are deprecated! Please switch to *polar* subplots. Determines whether or not the radial axis ticks will feature tick labels.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Tickcolor color Legacy polar charts are deprecated! Please switch to *polar* subplots. Sets the color of the tick lines on this radial axis.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Ticklen number Legacy polar charts are deprecated! Please switch to *polar* subplots. Sets the length of the tick lines on this radial axis.
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickorientation enumerated Legacy polar charts are deprecated! Please switch to *polar* subplots. Sets the orientation (from the paper perspective) of the radial axis tick labels.
	Tickorientation LayoutRadialaxisTickorientation `json:"tickorientation,omitempty"`

	// Ticksuffix string Legacy polar charts are deprecated! Please switch to *polar* subplots. Sets the length of the tick lines on this radial axis.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Visible boolean Legacy polar charts are deprecated! Please switch to *polar* subplots. Determines whether or not this axis will be visible.
	Visible Bool `json:"visible,omitempty"`
}

type LayoutScene struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Annotations <no value> <no value>
	Annotations LayoutSceneAnnotations `json:"annotations,omitempty"`

	// Aspectmode enumerated If *cube*, this scene's axes are drawn as a cube, regardless of the axes' ranges. If *data*, this scene's axes are drawn in proportion with the axes' ranges. If *manual*, this scene's axes are drawn in proportion with the input of *aspectratio* (the default behavior if *aspectratio* is provided). If *auto*, this scene's axes are drawn using the results of *data* except when one axis is more than four times the size of the two others, where in that case the results of *cube* are used.
	Aspectmode LayoutSceneAspectmode `json:"aspectmode,omitempty"`

	// Aspectratio <no value> Sets this scene's axis aspectratio.
	Aspectratio *LayoutSceneAspectratio `json:"aspectratio,omitempty"`

	// Bgcolor color <no value>
	Bgcolor String `json:"bgcolor,omitempty"`

	// Camera <no value> <no value>
	Camera *LayoutSceneCamera `json:"camera,omitempty"`

	// Domain <no value> <no value>
	Domain *LayoutSceneDomain `json:"domain,omitempty"`

	// Dragmode enumerated Determines the mode of drag interactions for this scene.
	Dragmode LayoutSceneDragmode `json:"dragmode,omitempty"`

	// Hovermode enumerated Determines the mode of hover interactions for this scene.
	Hovermode LayoutSceneHovermode `json:"hovermode,omitempty"`

	// Uirevision any Controls persistence of user-driven changes in camera attributes. Defaults to `layout.uirevision`.
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Xaxis <no value> <no value>
	Xaxis *LayoutSceneXaxis `json:"xaxis,omitempty"`

	// Yaxis <no value> <no value>
	Yaxis *LayoutSceneYaxis `json:"yaxis,omitempty"`

	// Zaxis <no value> <no value>
	Zaxis *LayoutSceneZaxis `json:"zaxis,omitempty"`
}

// LayoutShapes It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// shape
//      editType
//      editable
//      fillcolor
//      fillrule
//      layer
//      line
//      name
//      opacity
//      path
//      role
//      templateitemname
//      type
//      visible
//      x0
//      x1
//      xanchor
//      xref
//      xsizemode
//      y0
//      y1
//      yanchor
//      yref
//      ysizemode
type LayoutShapes interface{}

// LayoutSliders It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// slider
//      active
//      activebgcolor
//      bgcolor
//      bordercolor
//      borderwidth
//      currentvalue
//      editType
//      font
//      len
//      lenmode
//      minorticklen
//      name
//      pad
//      role
//      steps
//      templateitemname
//      tickcolor
//      ticklen
//      tickwidth
//      transition
//      visible
//      x
//      xanchor
//      y
//      yanchor
type LayoutSliders interface{}

type LayoutTernary struct {

	// Aaxis <no value> <no value>
	Aaxis *LayoutTernaryAaxis `json:"aaxis,omitempty"`

	// Baxis <no value> <no value>
	Baxis *LayoutTernaryBaxis `json:"baxis,omitempty"`

	// Bgcolor color Set the background color of the subplot
	Bgcolor String `json:"bgcolor,omitempty"`

	// Caxis <no value> <no value>
	Caxis *LayoutTernaryCaxis `json:"caxis,omitempty"`

	// Domain <no value> <no value>
	Domain *LayoutTernaryDomain `json:"domain,omitempty"`

	// Sum number The number each triplet should sum to, and the maximum range of each axis
	Sum float64 `json:"sum,omitempty"`

	// Uirevision any Controls persistence of user-driven changes in axis `min` and `title`, if not overridden in the individual axes. Defaults to `layout.uirevision`.
	Uirevision interface{} `json:"uirevision,omitempty"`
}

type LayoutTitle struct {

	// Font <no value> Sets the title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
	Font *LayoutTitleFont `json:"font,omitempty"`

	// Pad <no value> Sets the padding of the title. Each padding value only applies when the corresponding `xanchor`/`yanchor` value is set accordingly. E.g. for left padding to take effect, `xanchor` must be set to *left*. The same rule applies if `xanchor`/`yanchor` is determined automatically. Padding is muted if the respective anchor value is *middle*/*center*.
	Pad *LayoutTitlePad `json:"pad,omitempty"`

	// Text string Sets the plot's title. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`

	// X number Sets the x position with respect to `xref` in normalized coordinates from *0* (left) to *1* (right).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets the title's horizontal alignment with respect to its x position. *left* means that the title starts at x, *right* means that the title ends at x and *center* means that the title's center is at x. *auto* divides `xref` by three and calculates the `xanchor` value automatically based on the value of `x`.
	Xanchor LayoutTitleXanchor `json:"xanchor,omitempty"`

	// Xref enumerated Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.
	Xref LayoutTitleXref `json:"xref,omitempty"`

	// Y number Sets the y position with respect to `yref` in normalized coordinates from *0* (bottom) to *1* (top). *auto* places the baseline of the title onto the vertical center of the top margin.
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets the title's vertical alignment with respect to its y position. *top* means that the title's cap line is at y, *bottom* means that the title's baseline is at y and *middle* means that the title's midline is at y. *auto* divides `yref` by three and calculates the `yanchor` value automatically based on the value of `y`.
	Yanchor LayoutTitleYanchor `json:"yanchor,omitempty"`

	// Yref enumerated Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.
	Yref LayoutTitleYref `json:"yref,omitempty"`
}

type LayoutTransition struct {

	// Duration number The duration of the transition, in milliseconds. If equal to zero, updates are synchronous.
	Duration float64 `json:"duration,omitempty"`

	// Easing enumerated The easing function used for the transition
	Easing LayoutTransitionEasing `json:"easing,omitempty"`

	// Ordering enumerated Determines whether the figure's layout or traces smoothly transitions during updates that make both traces and layout change.
	Ordering LayoutTransitionOrdering `json:"ordering,omitempty"`
}

type LayoutUniformtext struct {

	// Minsize number Sets the minimum text size between traces of the same type.
	Minsize float64 `json:"minsize,omitempty"`

	// Mode enumerated Determines how the font size for various text elements are uniformed between each trace type. If the computed text sizes were smaller than the minimum size defined by `uniformtext.minsize` using *hide* option hides the text; and using *show* option shows the text without further downscaling. Please note that if the size defined by `minsize` is greater than the font size defined by trace, then the `minsize` is used.
	Mode LayoutUniformtextMode `json:"mode,omitempty"`
}

// LayoutUpdatemenus It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// updatemenu
//      _arrayAttrRegexps
//      active
//      bgcolor
//      bordercolor
//      borderwidth
//      buttons
//      direction
//      editType
//      font
//      name
//      pad
//      role
//      showactive
//      templateitemname
//      type
//      visible
//      x
//      xanchor
//      y
//      yanchor
type LayoutUpdatemenus interface{}

type LayoutXaxis struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Anchor enumerated If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to the corresponding opposite-letter axis. If set to *free*, this axis' position is determined by `position`.
	Anchor LayoutXaxisAnchor `json:"anchor,omitempty"`

	// Automargin boolean Determines whether long tick labels automatically grow the figure margins.
	Automargin Bool `json:"automargin,omitempty"`

	// Autorange enumerated Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.
	Autorange LayoutXaxisAutorange `json:"autorange,omitempty"`

	// Autotypenumbers enumerated Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
	Autotypenumbers LayoutXaxisAutotypenumbers `json:"autotypenumbers,omitempty"`

	// Calendar enumerated Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
	Calendar LayoutXaxisCalendar `json:"calendar,omitempty"`

	// Categoryarray data_array Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
	Categoryarray interface{} `json:"categoryarray,omitempty"`

	// Categoryarraysrc string Sets the source reference on Chart Studio Cloud for  categoryarray .
	Categoryarraysrc String `json:"categoryarraysrc,omitempty"`

	// Categoryorder enumerated Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.
	Categoryorder LayoutXaxisCategoryorder `json:"categoryorder,omitempty"`

	// Color color Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	Color String `json:"color,omitempty"`

	// Constrain enumerated If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines how that happens: by increasing the *range*, or by decreasing the *domain*. Default is *domain* for axes containing image traces, *range* otherwise.
	Constrain LayoutXaxisConstrain `json:"constrain,omitempty"`

	// Constraintoward enumerated If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines which direction we push the originally specified plot area. Options are *left*, *center* (default), and *right* for x axes, and *top*, *middle* (default), and *bottom* for y axes.
	Constraintoward LayoutXaxisConstraintoward `json:"constraintoward,omitempty"`

	// Dividercolor color Sets the color of the dividers Only has an effect on *multicategory* axes.
	Dividercolor String `json:"dividercolor,omitempty"`

	// Dividerwidth number Sets the width (in px) of the dividers Only has an effect on *multicategory* axes.
	Dividerwidth float64 `json:"dividerwidth,omitempty"`

	// Domain info_array Sets the domain of this axis (in plot fraction).
	Domain interface{} `json:"domain,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat LayoutXaxisExponentformat `json:"exponentformat,omitempty"`

	// Fixedrange boolean Determines whether or not this axis is zoom-able. If true, then zoom is disabled.
	Fixedrange Bool `json:"fixedrange,omitempty"`

	// Gridcolor color Sets the color of the grid lines.
	Gridcolor String `json:"gridcolor,omitempty"`

	// Gridwidth number Sets the width (in px) of the grid lines.
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Hoverformat string Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Hoverformat String `json:"hoverformat,omitempty"`

	// Layer enumerated Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
	Layer LayoutXaxisLayer `json:"layer,omitempty"`

	// Linecolor color Sets the axis line color.
	Linecolor String `json:"linecolor,omitempty"`

	// Linewidth number Sets the width (in px) of the axis line.
	Linewidth float64 `json:"linewidth,omitempty"`

	// Matches enumerated If set to another axis id (e.g. `x2`, `y`), the range of this axis will match the range of the corresponding axis in data-coordinates space. Moreover, matching axes share auto-range values, category lists and histogram auto-bins. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Moreover, note that matching axes must have the same `type`.
	Matches LayoutXaxisMatches `json:"matches,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Mirror enumerated Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.
	Mirror LayoutXaxisMirror `json:"mirror,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Overlaying enumerated If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis, with traces and axes visible for both axes. If *false*, this axis does not overlay any same-letter axes. In this case, for axes with overlapping domains only the highest-numbered axis will be visible.
	Overlaying LayoutXaxisOverlaying `json:"overlaying,omitempty"`

	// Position number Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to *free*.
	Position float64 `json:"position,omitempty"`

	// Range info_array Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.
	Range interface{} `json:"range,omitempty"`

	// Rangebreaks <no value> <no value>
	Rangebreaks LayoutXaxisRangebreaks `json:"rangebreaks,omitempty"`

	// Rangemode enumerated If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.
	Rangemode LayoutXaxisRangemode `json:"rangemode,omitempty"`

	// Rangeselector <no value> <no value>
	Rangeselector *LayoutXaxisRangeselector `json:"rangeselector,omitempty"`

	// Rangeslider <no value> <no value>
	Rangeslider *LayoutXaxisRangeslider `json:"rangeslider,omitempty"`

	// Scaleanchor enumerated If set to another axis id (e.g. `x2`, `y`), the range of this axis changes together with the range of the corresponding axis such that the scale of pixels per unit is in a constant ratio. Both axes are still zoomable, but when you zoom one, the other will zoom the same amount, keeping a fixed midpoint. `constrain` and `constraintoward` determine how we enforce the constraint. You can chain these, ie `yaxis: {scaleanchor: *x*}, xaxis2: {scaleanchor: *y*}` but you can only link axes of the same `type`. The linked axis can have the opposite letter (to constrain the aspect ratio) or the same letter (to match scales across subplots). Loops (`yaxis: {scaleanchor: *x*}, xaxis: {scaleanchor: *y*}` or longer) are redundant and the last constraint encountered will be ignored to avoid possible inconsistent constraints via `scaleratio`. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden.
	Scaleanchor LayoutXaxisScaleanchor `json:"scaleanchor,omitempty"`

	// Scaleratio number If this axis is linked to another by `scaleanchor`, this determines the pixel to unit scale ratio. For example, if this value is 10, then every unit on this axis spans 10 times the number of pixels as a unit on the linked axis. Use this for example to create an elevation profile where the vertical scale is exaggerated a fixed amount with respect to the horizontal.
	Scaleratio float64 `json:"scaleratio,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showdividers boolean Determines whether or not a dividers are drawn between the category levels of this axis. Only has an effect on *multicategory* axes.
	Showdividers Bool `json:"showdividers,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent LayoutXaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid boolean Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Showline boolean Determines whether or not a line bounding this axis is drawn.
	Showline Bool `json:"showline,omitempty"`

	// Showspikes boolean Determines whether or not spikes (aka droplines) are drawn for this axis. Note: This only takes affect when hovermode = closest
	Showspikes Bool `json:"showspikes,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix LayoutXaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix LayoutXaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Side enumerated Determines whether a x (y) axis is positioned at the *bottom* (*left*) or *top* (*right*) of the plotting area.
	Side LayoutXaxisSide `json:"side,omitempty"`

	// Spikecolor color Sets the spike color. If undefined, will use the series color
	Spikecolor String `json:"spikecolor,omitempty"`

	// Spikedash string Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Spikedash String `json:"spikedash,omitempty"`

	// Spikemode flaglist Determines the drawing mode for the spike line If *toaxis*, the line is drawn from the data point to the axis the  series is plotted on. If *across*, the line is drawn across the entire plot area, and supercedes *toaxis*. If *marker*, then a marker dot is drawn on the axis the series is plotted on
	Spikemode LayoutXaxisSpikemode `json:"spikemode,omitempty"`

	// Spikesnap enumerated Determines whether spikelines are stuck to the cursor or to the closest datapoints.
	Spikesnap LayoutXaxisSpikesnap `json:"spikesnap,omitempty"`

	// Spikethickness number Sets the width (in px) of the zero line.
	Spikethickness float64 `json:"spikethickness,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the tick font.
	Tickfont *LayoutXaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops LayoutXaxisTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelmode enumerated Determines where tick labels are drawn with respect to their corresponding ticks and grid lines. Only has an effect for axes of `type` *date* When set to *period*, tick labels are drawn in the middle of the period between ticks.
	Ticklabelmode LayoutXaxisTicklabelmode `json:"ticklabelmode,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn with respect to the axis Please note that top or bottom has no effect on x axes or when `ticklabelmode` is set to *period*. Similarly left or right has no effect on y axes or when `ticklabelmode` is set to *period*. Has no effect on *multicategory* axes or when `tickson` is set to *boundaries*. When used on axes linked by `matches` or `scaleanchor`, no extra padding for inside labels would be added by autorange, so that the scales could match.
	Ticklabelposition LayoutXaxisTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode LayoutXaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks LayoutXaxisTicks `json:"ticks,omitempty"`

	// Tickson enumerated Determines where ticks and grid lines are drawn with respect to their corresponding tick labels. Only has an effect for axes of `type` *category* or *multicategory*. When set to *boundaries*, ticks and grid lines are drawn half a category to the left/bottom of labels.
	Tickson LayoutXaxisTickson `json:"tickson,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *LayoutXaxisTitle `json:"title,omitempty"`

	// Type enumerated Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
	Type LayoutXaxisType `json:"type,omitempty"`

	// Uirevision any Controls persistence of user-driven changes in axis `range`, `autorange`, and `title` if in `editable: true` configuration. Defaults to `layout.uirevision`.
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Visible boolean A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false
	Visible Bool `json:"visible,omitempty"`

	// Zeroline boolean Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.
	Zeroline Bool `json:"zeroline,omitempty"`

	// Zerolinecolor color Sets the line color of the zero line.
	Zerolinecolor String `json:"zerolinecolor,omitempty"`

	// Zerolinewidth number Sets the width (in px) of the zero line.
	Zerolinewidth float64 `json:"zerolinewidth,omitempty"`
}

type LayoutYaxis struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Anchor enumerated If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to the corresponding opposite-letter axis. If set to *free*, this axis' position is determined by `position`.
	Anchor LayoutYaxisAnchor `json:"anchor,omitempty"`

	// Automargin boolean Determines whether long tick labels automatically grow the figure margins.
	Automargin Bool `json:"automargin,omitempty"`

	// Autorange enumerated Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.
	Autorange LayoutYaxisAutorange `json:"autorange,omitempty"`

	// Autotypenumbers enumerated Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
	Autotypenumbers LayoutYaxisAutotypenumbers `json:"autotypenumbers,omitempty"`

	// Calendar enumerated Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
	Calendar LayoutYaxisCalendar `json:"calendar,omitempty"`

	// Categoryarray data_array Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
	Categoryarray interface{} `json:"categoryarray,omitempty"`

	// Categoryarraysrc string Sets the source reference on Chart Studio Cloud for  categoryarray .
	Categoryarraysrc String `json:"categoryarraysrc,omitempty"`

	// Categoryorder enumerated Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.
	Categoryorder LayoutYaxisCategoryorder `json:"categoryorder,omitempty"`

	// Color color Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	Color String `json:"color,omitempty"`

	// Constrain enumerated If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines how that happens: by increasing the *range*, or by decreasing the *domain*. Default is *domain* for axes containing image traces, *range* otherwise.
	Constrain LayoutYaxisConstrain `json:"constrain,omitempty"`

	// Constraintoward enumerated If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines which direction we push the originally specified plot area. Options are *left*, *center* (default), and *right* for x axes, and *top*, *middle* (default), and *bottom* for y axes.
	Constraintoward LayoutYaxisConstraintoward `json:"constraintoward,omitempty"`

	// Dividercolor color Sets the color of the dividers Only has an effect on *multicategory* axes.
	Dividercolor String `json:"dividercolor,omitempty"`

	// Dividerwidth number Sets the width (in px) of the dividers Only has an effect on *multicategory* axes.
	Dividerwidth float64 `json:"dividerwidth,omitempty"`

	// Domain info_array Sets the domain of this axis (in plot fraction).
	Domain interface{} `json:"domain,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat LayoutYaxisExponentformat `json:"exponentformat,omitempty"`

	// Fixedrange boolean Determines whether or not this axis is zoom-able. If true, then zoom is disabled.
	Fixedrange Bool `json:"fixedrange,omitempty"`

	// Gridcolor color Sets the color of the grid lines.
	Gridcolor String `json:"gridcolor,omitempty"`

	// Gridwidth number Sets the width (in px) of the grid lines.
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Hoverformat string Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Hoverformat String `json:"hoverformat,omitempty"`

	// Layer enumerated Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
	Layer LayoutYaxisLayer `json:"layer,omitempty"`

	// Linecolor color Sets the axis line color.
	Linecolor String `json:"linecolor,omitempty"`

	// Linewidth number Sets the width (in px) of the axis line.
	Linewidth float64 `json:"linewidth,omitempty"`

	// Matches enumerated If set to another axis id (e.g. `x2`, `y`), the range of this axis will match the range of the corresponding axis in data-coordinates space. Moreover, matching axes share auto-range values, category lists and histogram auto-bins. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Moreover, note that matching axes must have the same `type`.
	Matches LayoutYaxisMatches `json:"matches,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Mirror enumerated Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.
	Mirror LayoutYaxisMirror `json:"mirror,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Overlaying enumerated If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis, with traces and axes visible for both axes. If *false*, this axis does not overlay any same-letter axes. In this case, for axes with overlapping domains only the highest-numbered axis will be visible.
	Overlaying LayoutYaxisOverlaying `json:"overlaying,omitempty"`

	// Position number Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to *free*.
	Position float64 `json:"position,omitempty"`

	// Range info_array Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.
	Range interface{} `json:"range,omitempty"`

	// Rangebreaks <no value> <no value>
	Rangebreaks LayoutYaxisRangebreaks `json:"rangebreaks,omitempty"`

	// Rangemode enumerated If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.
	Rangemode LayoutYaxisRangemode `json:"rangemode,omitempty"`

	// Scaleanchor enumerated If set to another axis id (e.g. `x2`, `y`), the range of this axis changes together with the range of the corresponding axis such that the scale of pixels per unit is in a constant ratio. Both axes are still zoomable, but when you zoom one, the other will zoom the same amount, keeping a fixed midpoint. `constrain` and `constraintoward` determine how we enforce the constraint. You can chain these, ie `yaxis: {scaleanchor: *x*}, xaxis2: {scaleanchor: *y*}` but you can only link axes of the same `type`. The linked axis can have the opposite letter (to constrain the aspect ratio) or the same letter (to match scales across subplots). Loops (`yaxis: {scaleanchor: *x*}, xaxis: {scaleanchor: *y*}` or longer) are redundant and the last constraint encountered will be ignored to avoid possible inconsistent constraints via `scaleratio`. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden.
	Scaleanchor LayoutYaxisScaleanchor `json:"scaleanchor,omitempty"`

	// Scaleratio number If this axis is linked to another by `scaleanchor`, this determines the pixel to unit scale ratio. For example, if this value is 10, then every unit on this axis spans 10 times the number of pixels as a unit on the linked axis. Use this for example to create an elevation profile where the vertical scale is exaggerated a fixed amount with respect to the horizontal.
	Scaleratio float64 `json:"scaleratio,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showdividers boolean Determines whether or not a dividers are drawn between the category levels of this axis. Only has an effect on *multicategory* axes.
	Showdividers Bool `json:"showdividers,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent LayoutYaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid boolean Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Showline boolean Determines whether or not a line bounding this axis is drawn.
	Showline Bool `json:"showline,omitempty"`

	// Showspikes boolean Determines whether or not spikes (aka droplines) are drawn for this axis. Note: This only takes affect when hovermode = closest
	Showspikes Bool `json:"showspikes,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix LayoutYaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix LayoutYaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Side enumerated Determines whether a x (y) axis is positioned at the *bottom* (*left*) or *top* (*right*) of the plotting area.
	Side LayoutYaxisSide `json:"side,omitempty"`

	// Spikecolor color Sets the spike color. If undefined, will use the series color
	Spikecolor String `json:"spikecolor,omitempty"`

	// Spikedash string Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Spikedash String `json:"spikedash,omitempty"`

	// Spikemode flaglist Determines the drawing mode for the spike line If *toaxis*, the line is drawn from the data point to the axis the  series is plotted on. If *across*, the line is drawn across the entire plot area, and supercedes *toaxis*. If *marker*, then a marker dot is drawn on the axis the series is plotted on
	Spikemode LayoutYaxisSpikemode `json:"spikemode,omitempty"`

	// Spikesnap enumerated Determines whether spikelines are stuck to the cursor or to the closest datapoints.
	Spikesnap LayoutYaxisSpikesnap `json:"spikesnap,omitempty"`

	// Spikethickness number Sets the width (in px) of the zero line.
	Spikethickness float64 `json:"spikethickness,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the tick font.
	Tickfont *LayoutYaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops LayoutYaxisTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelmode enumerated Determines where tick labels are drawn with respect to their corresponding ticks and grid lines. Only has an effect for axes of `type` *date* When set to *period*, tick labels are drawn in the middle of the period between ticks.
	Ticklabelmode LayoutYaxisTicklabelmode `json:"ticklabelmode,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn with respect to the axis Please note that top or bottom has no effect on x axes or when `ticklabelmode` is set to *period*. Similarly left or right has no effect on y axes or when `ticklabelmode` is set to *period*. Has no effect on *multicategory* axes or when `tickson` is set to *boundaries*. When used on axes linked by `matches` or `scaleanchor`, no extra padding for inside labels would be added by autorange, so that the scales could match.
	Ticklabelposition LayoutYaxisTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode LayoutYaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks LayoutYaxisTicks `json:"ticks,omitempty"`

	// Tickson enumerated Determines where ticks and grid lines are drawn with respect to their corresponding tick labels. Only has an effect for axes of `type` *category* or *multicategory*. When set to *boundaries*, ticks and grid lines are drawn half a category to the left/bottom of labels.
	Tickson LayoutYaxisTickson `json:"tickson,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *LayoutYaxisTitle `json:"title,omitempty"`

	// Type enumerated Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
	Type LayoutYaxisType `json:"type,omitempty"`

	// Uirevision any Controls persistence of user-driven changes in axis `range`, `autorange`, and `title` if in `editable: true` configuration. Defaults to `layout.uirevision`.
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Visible boolean A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false
	Visible Bool `json:"visible,omitempty"`

	// Zeroline boolean Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.
	Zeroline Bool `json:"zeroline,omitempty"`

	// Zerolinecolor color Sets the line color of the zero line.
	Zerolinecolor String `json:"zerolinecolor,omitempty"`

	// Zerolinewidth number Sets the width (in px) of the zero line.
	Zerolinewidth float64 `json:"zerolinewidth,omitempty"`
}

type Mesh3dColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat Mesh3dColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode Mesh3dColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent Mesh3dColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix Mesh3dColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix Mesh3dColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode Mesh3dColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *Mesh3dColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops Mesh3dColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition Mesh3dColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode Mesh3dColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks Mesh3dColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *Mesh3dColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor Mesh3dColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor Mesh3dColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type Mesh3dContour struct {

	// Color color Sets the color of the contour lines.
	Color String `json:"color,omitempty"`

	// Show boolean Sets whether or not dynamic contours are shown on hover
	Show Bool `json:"show,omitempty"`

	// Width number Sets the width of the contour lines.
	Width float64 `json:"width,omitempty"`
}

type Mesh3dHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align Mesh3dHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *Mesh3dHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type Mesh3dLighting struct {

	// Ambient number Ambient light increases overall color visibility but can wash out the image.
	Ambient float64 `json:"ambient,omitempty"`

	// Diffuse number Represents the extent that incident rays are reflected in a range of angles.
	Diffuse float64 `json:"diffuse,omitempty"`

	// Facenormalsepsilon number Epsilon for face normals calculation avoids math issues arising from degenerate geometry.
	Facenormalsepsilon float64 `json:"facenormalsepsilon,omitempty"`

	// Fresnel number Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.
	Fresnel float64 `json:"fresnel,omitempty"`

	// Roughness number Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.
	Roughness float64 `json:"roughness,omitempty"`

	// Specular number Represents the level that incident rays are reflected in a single direction, causing shine.
	Specular float64 `json:"specular,omitempty"`

	// Vertexnormalsepsilon number Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.
	Vertexnormalsepsilon float64 `json:"vertexnormalsepsilon,omitempty"`
}

type Mesh3dLightposition struct {

	// X number Numeric vector, representing the X coordinate for each vertex.
	X float64 `json:"x,omitempty"`

	// Y number Numeric vector, representing the Y coordinate for each vertex.
	Y float64 `json:"y,omitempty"`

	// Z number Numeric vector, representing the Z coordinate for each vertex.
	Z float64 `json:"z,omitempty"`
}

type Mesh3dStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type OhlcDecreasing struct {

	// Line <no value> <no value>
	Line *OhlcDecreasingLine `json:"line,omitempty"`
}

type OhlcHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align OhlcHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *OhlcHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`

	// Split boolean Show hover information (open, close, high, low) in separate labels.
	Split Bool `json:"split,omitempty"`
}

type OhlcIncreasing struct {

	// Line <no value> <no value>
	Line *OhlcIncreasingLine `json:"line,omitempty"`
}

type OhlcLine struct {

	// Dash string Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*). Note that this style setting can also be set per direction via `increasing.line.dash` and `decreasing.line.dash`.
	Dash String `json:"dash,omitempty"`

	// Width number [object Object] Note that this style setting can also be set per direction via `increasing.line.width` and `decreasing.line.width`.
	Width float64 `json:"width,omitempty"`
}

type OhlcStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

// OhlcTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type OhlcTransforms interface{}

// ParcatsDimensions It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// dimension
//      categoryarray
//      categoryarraysrc
//      categoryorder
//      description
//      displayindex
//      editType
//      label
//      role
//      ticktext
//      ticktextsrc
//      values
//      valuessrc
//      visible
type ParcatsDimensions interface{}

type ParcatsDomain struct {

	// Column integer If there is a layout grid, use the domain for this column in the grid for this parcats trace .
	Column int64 `json:"column,omitempty"`

	// Row integer If there is a layout grid, use the domain for this row in the grid for this parcats trace .
	Row int64 `json:"row,omitempty"`

	// X info_array Sets the horizontal domain of this parcats trace (in plot fraction).
	X interface{} `json:"x,omitempty"`

	// Y info_array Sets the vertical domain of this parcats trace (in plot fraction).
	Y interface{} `json:"y,omitempty"`
}

type ParcatsLabelfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type ParcatsLine struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `line.colorscale`. Has an effect only if in `line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `line.color`) or the bounds set in `line.cmin` and `line.cmax`  Has an effect only if in `line.color`is set to a numerical array. Defaults to `false` when `line.cmin` and `line.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `line.cmin` and/or `line.cmax` to be equidistant to this point. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color`. Has no effect when `line.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets thelinecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `line.cmin` and `line.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorbar <no value> <no value>
	Colorbar *ParcatsLineColorbar `json:"colorbar,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`line.cmin` and `line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Hovertemplate string Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `count` and `probability`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
	Hovertemplate String `json:"hovertemplate,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `line.color`is set to a numerical array. If true, `line.cmin` will correspond to the last color in the array and `line.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Shape enumerated Sets the shape of the paths. If `linear`, paths are composed of straight lines. If `hspline`, paths are composed of horizontal curved splines
	Shape ParcatsLineShape `json:"shape,omitempty"`

	// Showscale boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `line.color`is set to a numerical array.
	Showscale Bool `json:"showscale,omitempty"`
}

type ParcatsStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type ParcatsTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// ParcatsTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type ParcatsTransforms interface{}

// ParcoordsDimensions It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// dimension
//      constraintrange
//      description
//      editType
//      label
//      multiselect
//      name
//      range
//      role
//      templateitemname
//      tickformat
//      ticktext
//      ticktextsrc
//      tickvals
//      tickvalssrc
//      values
//      valuessrc
//      visible
type ParcoordsDimensions interface{}

type ParcoordsDomain struct {

	// Column integer If there is a layout grid, use the domain for this column in the grid for this parcoords trace .
	Column int64 `json:"column,omitempty"`

	// Row integer If there is a layout grid, use the domain for this row in the grid for this parcoords trace .
	Row int64 `json:"row,omitempty"`

	// X info_array Sets the horizontal domain of this parcoords trace (in plot fraction).
	X interface{} `json:"x,omitempty"`

	// Y info_array Sets the vertical domain of this parcoords trace (in plot fraction).
	Y interface{} `json:"y,omitempty"`
}

type ParcoordsLabelfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type ParcoordsLine struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `line.colorscale`. Has an effect only if in `line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `line.color`) or the bounds set in `line.cmin` and `line.cmax`  Has an effect only if in `line.color`is set to a numerical array. Defaults to `false` when `line.cmin` and `line.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `line.cmin` and/or `line.cmax` to be equidistant to this point. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color`. Has no effect when `line.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets thelinecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `line.cmin` and `line.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorbar <no value> <no value>
	Colorbar *ParcoordsLineColorbar `json:"colorbar,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`line.cmin` and `line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `line.color`is set to a numerical array. If true, `line.cmin` will correspond to the last color in the array and `line.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Showscale boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `line.color`is set to a numerical array.
	Showscale Bool `json:"showscale,omitempty"`
}

type ParcoordsRangefont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type ParcoordsStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type ParcoordsTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// ParcoordsTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type ParcoordsTransforms interface{}

type PieDomain struct {

	// Column integer If there is a layout grid, use the domain for this column in the grid for this pie trace .
	Column int64 `json:"column,omitempty"`

	// Row integer If there is a layout grid, use the domain for this row in the grid for this pie trace .
	Row int64 `json:"row,omitempty"`

	// X info_array Sets the horizontal domain of this pie trace (in plot fraction).
	X interface{} `json:"x,omitempty"`

	// Y info_array Sets the vertical domain of this pie trace (in plot fraction).
	Y interface{} `json:"y,omitempty"`
}

type PieHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align PieHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *PieHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type PieInsidetextfont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type PieMarker struct {

	// Colors data_array Sets the color of each sector. If not specified, the default trace color set is used to pick the sector colors.
	Colors interface{} `json:"colors,omitempty"`

	// Colorssrc string Sets the source reference on Chart Studio Cloud for  colors .
	Colorssrc String `json:"colorssrc,omitempty"`

	// Line <no value> <no value>
	Line *PieMarkerLine `json:"line,omitempty"`
}

type PieOutsidetextfont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type PieStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type PieTextfont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type PieTitle struct {

	// Font <no value> Sets the font used for `title`. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *PieTitleFont `json:"font,omitempty"`

	// Position enumerated Specifies the location of the `title`. Note that the title's position used to be set by the now deprecated `titleposition` attribute.
	Position PieTitlePosition `json:"position,omitempty"`

	// Text string Sets the title of the chart. If it is empty, no title is displayed. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

// PieTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type PieTransforms interface{}

type PointcloudHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align PointcloudHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *PointcloudHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type PointcloudMarker struct {

	// Blend boolean Determines if colors are blended together for a translucency effect in case `opacity` is specified as a value less then `1`. Setting `blend` to `true` reduces zoom/pan speed if used with large numbers of points.
	Blend Bool `json:"blend,omitempty"`

	// Border <no value> <no value>
	Border *PointcloudMarkerBorder `json:"border,omitempty"`

	// Color color Sets the marker fill color. It accepts a specific color.If the color is not fully opaque and there are hundreds of thousandsof points, it may cause slower zooming and panning.
	Color String `json:"color,omitempty"`

	// Opacity number Sets the marker opacity. The default value is `1` (fully opaque). If the markers are not fully opaque and there are hundreds of thousands of points, it may cause slower zooming and panning. Opacity fades the color even if `blend` is left on `false` even if there is no translucency effect in that case.
	Opacity float64 `json:"opacity,omitempty"`

	// Sizemax number Sets the maximum size (in px) of the rendered marker points. Effective when the `pointcloud` shows only few points.
	Sizemax float64 `json:"sizemax,omitempty"`

	// Sizemin number Sets the minimum size (in px) of the rendered marker points, effective when the `pointcloud` shows a million or more points.
	Sizemin float64 `json:"sizemin,omitempty"`
}

type PointcloudStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type SankeyDomain struct {

	// Column integer If there is a layout grid, use the domain for this column in the grid for this sankey trace .
	Column int64 `json:"column,omitempty"`

	// Row integer If there is a layout grid, use the domain for this row in the grid for this sankey trace .
	Row int64 `json:"row,omitempty"`

	// X info_array Sets the horizontal domain of this sankey trace (in plot fraction).
	X interface{} `json:"x,omitempty"`

	// Y info_array Sets the vertical domain of this sankey trace (in plot fraction).
	Y interface{} `json:"y,omitempty"`
}

type SankeyHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align SankeyHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *SankeyHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type SankeyLink struct {

	// Color color Sets the `link` color. It can be a single value, or an array for specifying color for each `link`. If `link.color` is omitted, then by default, a translucent grey link will be used.
	Color interface{} `json:"color,omitempty"`

	// Colorscales <no value> <no value>
	Colorscales SankeyLinkColorscales `json:"colorscales,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Customdata data_array Assigns extra data to each link.
	Customdata interface{} `json:"customdata,omitempty"`

	// Customdatasrc string Sets the source reference on Chart Studio Cloud for  customdata .
	Customdatasrc String `json:"customdatasrc,omitempty"`

	// Hoverinfo enumerated Determines which trace information appear when hovering links. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
	Hoverinfo SankeyLinkHoverinfo `json:"hoverinfo,omitempty"`

	// Hoverlabel <no value> <no value>
	Hoverlabel *SankeyLinkHoverlabel `json:"hoverlabel,omitempty"`

	// Hovertemplate string Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `value` and `label`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
	Hovertemplate interface{} `json:"hovertemplate,omitempty"`

	// Hovertemplatesrc string Sets the source reference on Chart Studio Cloud for  hovertemplate .
	Hovertemplatesrc String `json:"hovertemplatesrc,omitempty"`

	// Label data_array The shown name of the link.
	Label interface{} `json:"label,omitempty"`

	// Labelsrc string Sets the source reference on Chart Studio Cloud for  label .
	Labelsrc String `json:"labelsrc,omitempty"`

	// Line <no value> <no value>
	Line *SankeyLinkLine `json:"line,omitempty"`

	// Source data_array An integer number `[0..nodes.length - 1]` that represents the source node.
	Source interface{} `json:"source,omitempty"`

	// Sourcesrc string Sets the source reference on Chart Studio Cloud for  source .
	Sourcesrc String `json:"sourcesrc,omitempty"`

	// Target data_array An integer number `[0..nodes.length - 1]` that represents the target node.
	Target interface{} `json:"target,omitempty"`

	// Targetsrc string Sets the source reference on Chart Studio Cloud for  target .
	Targetsrc String `json:"targetsrc,omitempty"`

	// Value data_array A numeric value representing the flow volume value.
	Value interface{} `json:"value,omitempty"`

	// Valuesrc string Sets the source reference on Chart Studio Cloud for  value .
	Valuesrc String `json:"valuesrc,omitempty"`
}

type SankeyNode struct {

	// Color color Sets the `node` color. It can be a single value, or an array for specifying color for each `node`. If `node.color` is omitted, then the default `Plotly` color palette will be cycled through to have a variety of colors. These defaults are not fully opaque, to allow some visibility of what is beneath the node.
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Customdata data_array Assigns extra data to each node.
	Customdata interface{} `json:"customdata,omitempty"`

	// Customdatasrc string Sets the source reference on Chart Studio Cloud for  customdata .
	Customdatasrc String `json:"customdatasrc,omitempty"`

	// Groups info_array Groups of nodes. Each group is defined by an array with the indices of the nodes it contains. Multiple groups can be specified.
	Groups interface{} `json:"groups,omitempty"`

	// Hoverinfo enumerated Determines which trace information appear when hovering nodes. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
	Hoverinfo SankeyNodeHoverinfo `json:"hoverinfo,omitempty"`

	// Hoverlabel <no value> <no value>
	Hoverlabel *SankeyNodeHoverlabel `json:"hoverlabel,omitempty"`

	// Hovertemplate string Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `value` and `label`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
	Hovertemplate interface{} `json:"hovertemplate,omitempty"`

	// Hovertemplatesrc string Sets the source reference on Chart Studio Cloud for  hovertemplate .
	Hovertemplatesrc String `json:"hovertemplatesrc,omitempty"`

	// Label data_array The shown name of the node.
	Label interface{} `json:"label,omitempty"`

	// Labelsrc string Sets the source reference on Chart Studio Cloud for  label .
	Labelsrc String `json:"labelsrc,omitempty"`

	// Line <no value> <no value>
	Line *SankeyNodeLine `json:"line,omitempty"`

	// Pad number Sets the padding (in px) between the `nodes`.
	Pad float64 `json:"pad,omitempty"`

	// Thickness number Sets the thickness (in px) of the `nodes`.
	Thickness float64 `json:"thickness,omitempty"`

	// X data_array The normalized horizontal position of the node.
	X interface{} `json:"x,omitempty"`

	// Xsrc string Sets the source reference on Chart Studio Cloud for  x .
	Xsrc String `json:"xsrc,omitempty"`

	// Y data_array The normalized vertical position of the node.
	Y interface{} `json:"y,omitempty"`

	// Ysrc string Sets the source reference on Chart Studio Cloud for  y .
	Ysrc String `json:"ysrc,omitempty"`
}

type SankeyStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type SankeyTextfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type Scatter3dErrorX struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Array data_array Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.
	Array interface{} `json:"array,omitempty"`

	// Arrayminus data_array Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.
	Arrayminus interface{} `json:"arrayminus,omitempty"`

	// Arrayminussrc string Sets the source reference on Chart Studio Cloud for  arrayminus .
	Arrayminussrc String `json:"arrayminussrc,omitempty"`

	// Arraysrc string Sets the source reference on Chart Studio Cloud for  array .
	Arraysrc String `json:"arraysrc,omitempty"`

	// Color color Sets the stoke color of the error bars.
	Color String `json:"color,omitempty"`

	// Copy_zstyle boolean <no value>
	Copy_zstyle Bool `json:"copy_zstyle,omitempty"`

	// Symmetric boolean Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.
	Symmetric Bool `json:"symmetric,omitempty"`

	// Thickness number Sets the thickness (in px) of the error bars.
	Thickness float64 `json:"thickness,omitempty"`

	// Traceref integer <no value>
	Traceref int64 `json:"traceref,omitempty"`

	// Tracerefminus integer <no value>
	Tracerefminus int64 `json:"tracerefminus,omitempty"`

	// Type enumerated Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.
	Type Scatter3dErrorXType `json:"type,omitempty"`

	// Value number Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.
	Value float64 `json:"value,omitempty"`

	// Valueminus number Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars
	Valueminus float64 `json:"valueminus,omitempty"`

	// Visible boolean Determines whether or not this set of error bars is visible.
	Visible Bool `json:"visible,omitempty"`

	// Width number Sets the width (in px) of the cross-bar at both ends of the error bars.
	Width float64 `json:"width,omitempty"`
}

type Scatter3dErrorY struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Array data_array Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.
	Array interface{} `json:"array,omitempty"`

	// Arrayminus data_array Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.
	Arrayminus interface{} `json:"arrayminus,omitempty"`

	// Arrayminussrc string Sets the source reference on Chart Studio Cloud for  arrayminus .
	Arrayminussrc String `json:"arrayminussrc,omitempty"`

	// Arraysrc string Sets the source reference on Chart Studio Cloud for  array .
	Arraysrc String `json:"arraysrc,omitempty"`

	// Color color Sets the stoke color of the error bars.
	Color String `json:"color,omitempty"`

	// Copy_zstyle boolean <no value>
	Copy_zstyle Bool `json:"copy_zstyle,omitempty"`

	// Symmetric boolean Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.
	Symmetric Bool `json:"symmetric,omitempty"`

	// Thickness number Sets the thickness (in px) of the error bars.
	Thickness float64 `json:"thickness,omitempty"`

	// Traceref integer <no value>
	Traceref int64 `json:"traceref,omitempty"`

	// Tracerefminus integer <no value>
	Tracerefminus int64 `json:"tracerefminus,omitempty"`

	// Type enumerated Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.
	Type Scatter3dErrorYType `json:"type,omitempty"`

	// Value number Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.
	Value float64 `json:"value,omitempty"`

	// Valueminus number Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars
	Valueminus float64 `json:"valueminus,omitempty"`

	// Visible boolean Determines whether or not this set of error bars is visible.
	Visible Bool `json:"visible,omitempty"`

	// Width number Sets the width (in px) of the cross-bar at both ends of the error bars.
	Width float64 `json:"width,omitempty"`
}

type Scatter3dErrorZ struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Array data_array Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.
	Array interface{} `json:"array,omitempty"`

	// Arrayminus data_array Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.
	Arrayminus interface{} `json:"arrayminus,omitempty"`

	// Arrayminussrc string Sets the source reference on Chart Studio Cloud for  arrayminus .
	Arrayminussrc String `json:"arrayminussrc,omitempty"`

	// Arraysrc string Sets the source reference on Chart Studio Cloud for  array .
	Arraysrc String `json:"arraysrc,omitempty"`

	// Color color Sets the stoke color of the error bars.
	Color String `json:"color,omitempty"`

	// Symmetric boolean Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.
	Symmetric Bool `json:"symmetric,omitempty"`

	// Thickness number Sets the thickness (in px) of the error bars.
	Thickness float64 `json:"thickness,omitempty"`

	// Traceref integer <no value>
	Traceref int64 `json:"traceref,omitempty"`

	// Tracerefminus integer <no value>
	Tracerefminus int64 `json:"tracerefminus,omitempty"`

	// Type enumerated Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.
	Type Scatter3dErrorZType `json:"type,omitempty"`

	// Value number Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.
	Value float64 `json:"value,omitempty"`

	// Valueminus number Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars
	Valueminus float64 `json:"valueminus,omitempty"`

	// Visible boolean Determines whether or not this set of error bars is visible.
	Visible Bool `json:"visible,omitempty"`

	// Width number Sets the width (in px) of the cross-bar at both ends of the error bars.
	Width float64 `json:"width,omitempty"`
}

type Scatter3dHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align Scatter3dHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *Scatter3dHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type Scatter3dLine struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `line.colorscale`. Has an effect only if in `line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `line.color`) or the bounds set in `line.cmin` and `line.cmax`  Has an effect only if in `line.color`is set to a numerical array. Defaults to `false` when `line.cmin` and `line.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `line.cmin` and/or `line.cmax` to be equidistant to this point. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color`. Has no effect when `line.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets thelinecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `line.cmin` and `line.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorbar <no value> <no value>
	Colorbar *Scatter3dLineColorbar `json:"colorbar,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`line.cmin` and `line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Dash enumerated Sets the dash style of the lines.
	Dash Scatter3dLineDash `json:"dash,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `line.color`is set to a numerical array. If true, `line.cmin` will correspond to the last color in the array and `line.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Showscale boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `line.color`is set to a numerical array.
	Showscale Bool `json:"showscale,omitempty"`

	// Width number Sets the line width (in px).
	Width float64 `json:"width,omitempty"`
}

type Scatter3dMarker struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorbar <no value> <no value>
	Colorbar *Scatter3dMarkerColorbar `json:"colorbar,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Line <no value> <no value>
	Line *Scatter3dMarkerLine `json:"line,omitempty"`

	// Opacity number Sets the marker opacity. Note that the marker opacity for scatter3d traces must be a scalar value for performance reasons. To set a blending opacity value (i.e. which is not transparent), set *marker.color* to an rgba color and use its alpha channel.
	Opacity float64 `json:"opacity,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Showscale boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.
	Showscale Bool `json:"showscale,omitempty"`

	// Size number Sets the marker size (in px).
	Size interface{} `json:"size,omitempty"`

	// Sizemin number Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.
	Sizemin float64 `json:"sizemin,omitempty"`

	// Sizemode enumerated Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.
	Sizemode Scatter3dMarkerSizemode `json:"sizemode,omitempty"`

	// Sizeref number Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.
	Sizeref float64 `json:"sizeref,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`

	// Symbol enumerated Sets the marker symbol type.
	Symbol Scatter3dMarkerSymbol `json:"symbol,omitempty"`

	// Symbolsrc string Sets the source reference on Chart Studio Cloud for  symbol .
	Symbolsrc String `json:"symbolsrc,omitempty"`
}

type Scatter3dProjection struct {

	// X <no value> <no value>
	X *Scatter3dProjectionX `json:"x,omitempty"`

	// Y <no value> <no value>
	Y *Scatter3dProjectionY `json:"y,omitempty"`

	// Z <no value> <no value>
	Z *Scatter3dProjectionZ `json:"z,omitempty"`
}

type Scatter3dStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type Scatter3dTextfont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

// Scatter3dTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type Scatter3dTransforms interface{}

type ScatterErrorX struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Array data_array Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.
	Array interface{} `json:"array,omitempty"`

	// Arrayminus data_array Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.
	Arrayminus interface{} `json:"arrayminus,omitempty"`

	// Arrayminussrc string Sets the source reference on Chart Studio Cloud for  arrayminus .
	Arrayminussrc String `json:"arrayminussrc,omitempty"`

	// Arraysrc string Sets the source reference on Chart Studio Cloud for  array .
	Arraysrc String `json:"arraysrc,omitempty"`

	// Color color Sets the stoke color of the error bars.
	Color String `json:"color,omitempty"`

	// Copy_ystyle boolean <no value>
	Copy_ystyle Bool `json:"copy_ystyle,omitempty"`

	// Symmetric boolean Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.
	Symmetric Bool `json:"symmetric,omitempty"`

	// Thickness number Sets the thickness (in px) of the error bars.
	Thickness float64 `json:"thickness,omitempty"`

	// Traceref integer <no value>
	Traceref int64 `json:"traceref,omitempty"`

	// Tracerefminus integer <no value>
	Tracerefminus int64 `json:"tracerefminus,omitempty"`

	// Type enumerated Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.
	Type ScatterErrorXType `json:"type,omitempty"`

	// Value number Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.
	Value float64 `json:"value,omitempty"`

	// Valueminus number Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars
	Valueminus float64 `json:"valueminus,omitempty"`

	// Visible boolean Determines whether or not this set of error bars is visible.
	Visible Bool `json:"visible,omitempty"`

	// Width number Sets the width (in px) of the cross-bar at both ends of the error bars.
	Width float64 `json:"width,omitempty"`
}

type ScatterErrorY struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Array data_array Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.
	Array interface{} `json:"array,omitempty"`

	// Arrayminus data_array Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.
	Arrayminus interface{} `json:"arrayminus,omitempty"`

	// Arrayminussrc string Sets the source reference on Chart Studio Cloud for  arrayminus .
	Arrayminussrc String `json:"arrayminussrc,omitempty"`

	// Arraysrc string Sets the source reference on Chart Studio Cloud for  array .
	Arraysrc String `json:"arraysrc,omitempty"`

	// Color color Sets the stoke color of the error bars.
	Color String `json:"color,omitempty"`

	// Symmetric boolean Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.
	Symmetric Bool `json:"symmetric,omitempty"`

	// Thickness number Sets the thickness (in px) of the error bars.
	Thickness float64 `json:"thickness,omitempty"`

	// Traceref integer <no value>
	Traceref int64 `json:"traceref,omitempty"`

	// Tracerefminus integer <no value>
	Tracerefminus int64 `json:"tracerefminus,omitempty"`

	// Type enumerated Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.
	Type ScatterErrorYType `json:"type,omitempty"`

	// Value number Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.
	Value float64 `json:"value,omitempty"`

	// Valueminus number Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars
	Valueminus float64 `json:"valueminus,omitempty"`

	// Visible boolean Determines whether or not this set of error bars is visible.
	Visible Bool `json:"visible,omitempty"`

	// Width number Sets the width (in px) of the cross-bar at both ends of the error bars.
	Width float64 `json:"width,omitempty"`
}

type ScatterHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align ScatterHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *ScatterHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type ScatterLine struct {

	// Color color Sets the line color.
	Color String `json:"color,omitempty"`

	// Dash string Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Dash String `json:"dash,omitempty"`

	// Shape enumerated Determines the line shape. With *spline* the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.
	Shape ScatterLineShape `json:"shape,omitempty"`

	// Simplify boolean Simplifies lines by removing nearly-collinear points. When transitioning lines, it may be desirable to disable this so that the number of points along the resulting SVG path is unaffected.
	Simplify Bool `json:"simplify,omitempty"`

	// Smoothing number Has an effect only if `shape` is set to *spline* Sets the amount of smoothing. *0* corresponds to no smoothing (equivalent to a *linear* shape).
	Smoothing float64 `json:"smoothing,omitempty"`

	// Width number Sets the line width (in px).
	Width float64 `json:"width,omitempty"`
}

type ScatterMarker struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorbar <no value> <no value>
	Colorbar *ScatterMarkerColorbar `json:"colorbar,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Gradient <no value> <no value>
	Gradient *ScatterMarkerGradient `json:"gradient,omitempty"`

	// Line <no value> <no value>
	Line *ScatterMarkerLine `json:"line,omitempty"`

	// Maxdisplayed number Sets a maximum number of points to be drawn on the graph. *0* corresponds to no limit.
	Maxdisplayed float64 `json:"maxdisplayed,omitempty"`

	// Opacity number Sets the marker opacity.
	Opacity interface{} `json:"opacity,omitempty"`

	// Opacitysrc string Sets the source reference on Chart Studio Cloud for  opacity .
	Opacitysrc String `json:"opacitysrc,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Showscale boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.
	Showscale Bool `json:"showscale,omitempty"`

	// Size number Sets the marker size (in px).
	Size interface{} `json:"size,omitempty"`

	// Sizemin number Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.
	Sizemin float64 `json:"sizemin,omitempty"`

	// Sizemode enumerated Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.
	Sizemode ScatterMarkerSizemode `json:"sizemode,omitempty"`

	// Sizeref number Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.
	Sizeref float64 `json:"sizeref,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`

	// Symbol enumerated Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.
	Symbol ScatterMarkerSymbol `json:"symbol,omitempty"`

	// Symbolsrc string Sets the source reference on Chart Studio Cloud for  symbol .
	Symbolsrc String `json:"symbolsrc,omitempty"`
}

type ScatterSelected struct {

	// Marker <no value> <no value>
	Marker *ScatterSelectedMarker `json:"marker,omitempty"`

	// Textfont <no value> <no value>
	Textfont *ScatterSelectedTextfont `json:"textfont,omitempty"`
}

type ScatterStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type ScatterTextfont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

// ScatterTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type ScatterTransforms interface{}

type ScatterUnselected struct {

	// Marker <no value> <no value>
	Marker *ScatterUnselectedMarker `json:"marker,omitempty"`

	// Textfont <no value> <no value>
	Textfont *ScatterUnselectedTextfont `json:"textfont,omitempty"`
}

type ScattercarpetHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align ScattercarpetHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *ScattercarpetHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type ScattercarpetLine struct {

	// Color color Sets the line color.
	Color String `json:"color,omitempty"`

	// Dash string Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Dash String `json:"dash,omitempty"`

	// Shape enumerated Determines the line shape. With *spline* the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.
	Shape ScattercarpetLineShape `json:"shape,omitempty"`

	// Smoothing number Has an effect only if `shape` is set to *spline* Sets the amount of smoothing. *0* corresponds to no smoothing (equivalent to a *linear* shape).
	Smoothing float64 `json:"smoothing,omitempty"`

	// Width number Sets the line width (in px).
	Width float64 `json:"width,omitempty"`
}

type ScattercarpetMarker struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorbar <no value> <no value>
	Colorbar *ScattercarpetMarkerColorbar `json:"colorbar,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Gradient <no value> <no value>
	Gradient *ScattercarpetMarkerGradient `json:"gradient,omitempty"`

	// Line <no value> <no value>
	Line *ScattercarpetMarkerLine `json:"line,omitempty"`

	// Maxdisplayed number Sets a maximum number of points to be drawn on the graph. *0* corresponds to no limit.
	Maxdisplayed float64 `json:"maxdisplayed,omitempty"`

	// Opacity number Sets the marker opacity.
	Opacity interface{} `json:"opacity,omitempty"`

	// Opacitysrc string Sets the source reference on Chart Studio Cloud for  opacity .
	Opacitysrc String `json:"opacitysrc,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Showscale boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.
	Showscale Bool `json:"showscale,omitempty"`

	// Size number Sets the marker size (in px).
	Size interface{} `json:"size,omitempty"`

	// Sizemin number Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.
	Sizemin float64 `json:"sizemin,omitempty"`

	// Sizemode enumerated Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.
	Sizemode ScattercarpetMarkerSizemode `json:"sizemode,omitempty"`

	// Sizeref number Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.
	Sizeref float64 `json:"sizeref,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`

	// Symbol enumerated Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.
	Symbol ScattercarpetMarkerSymbol `json:"symbol,omitempty"`

	// Symbolsrc string Sets the source reference on Chart Studio Cloud for  symbol .
	Symbolsrc String `json:"symbolsrc,omitempty"`
}

type ScattercarpetSelected struct {

	// Marker <no value> <no value>
	Marker *ScattercarpetSelectedMarker `json:"marker,omitempty"`

	// Textfont <no value> <no value>
	Textfont *ScattercarpetSelectedTextfont `json:"textfont,omitempty"`
}

type ScattercarpetStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type ScattercarpetTextfont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

// ScattercarpetTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type ScattercarpetTransforms interface{}

type ScattercarpetUnselected struct {

	// Marker <no value> <no value>
	Marker *ScattercarpetUnselectedMarker `json:"marker,omitempty"`

	// Textfont <no value> <no value>
	Textfont *ScattercarpetUnselectedTextfont `json:"textfont,omitempty"`
}

type ScattergeoHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align ScattergeoHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *ScattergeoHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type ScattergeoLine struct {

	// Color color Sets the line color.
	Color String `json:"color,omitempty"`

	// Dash string Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Dash String `json:"dash,omitempty"`

	// Width number Sets the line width (in px).
	Width float64 `json:"width,omitempty"`
}

type ScattergeoMarker struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorbar <no value> <no value>
	Colorbar *ScattergeoMarkerColorbar `json:"colorbar,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Gradient <no value> <no value>
	Gradient *ScattergeoMarkerGradient `json:"gradient,omitempty"`

	// Line <no value> <no value>
	Line *ScattergeoMarkerLine `json:"line,omitempty"`

	// Opacity number Sets the marker opacity.
	Opacity interface{} `json:"opacity,omitempty"`

	// Opacitysrc string Sets the source reference on Chart Studio Cloud for  opacity .
	Opacitysrc String `json:"opacitysrc,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Showscale boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.
	Showscale Bool `json:"showscale,omitempty"`

	// Size number Sets the marker size (in px).
	Size interface{} `json:"size,omitempty"`

	// Sizemin number Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.
	Sizemin float64 `json:"sizemin,omitempty"`

	// Sizemode enumerated Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.
	Sizemode ScattergeoMarkerSizemode `json:"sizemode,omitempty"`

	// Sizeref number Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.
	Sizeref float64 `json:"sizeref,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`

	// Symbol enumerated Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.
	Symbol ScattergeoMarkerSymbol `json:"symbol,omitempty"`

	// Symbolsrc string Sets the source reference on Chart Studio Cloud for  symbol .
	Symbolsrc String `json:"symbolsrc,omitempty"`
}

type ScattergeoSelected struct {

	// Marker <no value> <no value>
	Marker *ScattergeoSelectedMarker `json:"marker,omitempty"`

	// Textfont <no value> <no value>
	Textfont *ScattergeoSelectedTextfont `json:"textfont,omitempty"`
}

type ScattergeoStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type ScattergeoTextfont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

// ScattergeoTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type ScattergeoTransforms interface{}

type ScattergeoUnselected struct {

	// Marker <no value> <no value>
	Marker *ScattergeoUnselectedMarker `json:"marker,omitempty"`

	// Textfont <no value> <no value>
	Textfont *ScattergeoUnselectedTextfont `json:"textfont,omitempty"`
}

type ScatterglErrorX struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Array data_array Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.
	Array interface{} `json:"array,omitempty"`

	// Arrayminus data_array Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.
	Arrayminus interface{} `json:"arrayminus,omitempty"`

	// Arrayminussrc string Sets the source reference on Chart Studio Cloud for  arrayminus .
	Arrayminussrc String `json:"arrayminussrc,omitempty"`

	// Arraysrc string Sets the source reference on Chart Studio Cloud for  array .
	Arraysrc String `json:"arraysrc,omitempty"`

	// Color color Sets the stoke color of the error bars.
	Color String `json:"color,omitempty"`

	// Copy_ystyle boolean <no value>
	Copy_ystyle Bool `json:"copy_ystyle,omitempty"`

	// Symmetric boolean Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.
	Symmetric Bool `json:"symmetric,omitempty"`

	// Thickness number Sets the thickness (in px) of the error bars.
	Thickness float64 `json:"thickness,omitempty"`

	// Traceref integer <no value>
	Traceref int64 `json:"traceref,omitempty"`

	// Tracerefminus integer <no value>
	Tracerefminus int64 `json:"tracerefminus,omitempty"`

	// Type enumerated Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.
	Type ScatterglErrorXType `json:"type,omitempty"`

	// Value number Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.
	Value float64 `json:"value,omitempty"`

	// Valueminus number Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars
	Valueminus float64 `json:"valueminus,omitempty"`

	// Visible boolean Determines whether or not this set of error bars is visible.
	Visible Bool `json:"visible,omitempty"`

	// Width number Sets the width (in px) of the cross-bar at both ends of the error bars.
	Width float64 `json:"width,omitempty"`
}

type ScatterglErrorY struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Array data_array Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.
	Array interface{} `json:"array,omitempty"`

	// Arrayminus data_array Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.
	Arrayminus interface{} `json:"arrayminus,omitempty"`

	// Arrayminussrc string Sets the source reference on Chart Studio Cloud for  arrayminus .
	Arrayminussrc String `json:"arrayminussrc,omitempty"`

	// Arraysrc string Sets the source reference on Chart Studio Cloud for  array .
	Arraysrc String `json:"arraysrc,omitempty"`

	// Color color Sets the stoke color of the error bars.
	Color String `json:"color,omitempty"`

	// Symmetric boolean Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.
	Symmetric Bool `json:"symmetric,omitempty"`

	// Thickness number Sets the thickness (in px) of the error bars.
	Thickness float64 `json:"thickness,omitempty"`

	// Traceref integer <no value>
	Traceref int64 `json:"traceref,omitempty"`

	// Tracerefminus integer <no value>
	Tracerefminus int64 `json:"tracerefminus,omitempty"`

	// Type enumerated Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.
	Type ScatterglErrorYType `json:"type,omitempty"`

	// Value number Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.
	Value float64 `json:"value,omitempty"`

	// Valueminus number Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars
	Valueminus float64 `json:"valueminus,omitempty"`

	// Visible boolean Determines whether or not this set of error bars is visible.
	Visible Bool `json:"visible,omitempty"`

	// Width number Sets the width (in px) of the cross-bar at both ends of the error bars.
	Width float64 `json:"width,omitempty"`
}

type ScatterglHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align ScatterglHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *ScatterglHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type ScatterglLine struct {

	// Color color Sets the line color.
	Color String `json:"color,omitempty"`

	// Dash enumerated Sets the style of the lines.
	Dash ScatterglLineDash `json:"dash,omitempty"`

	// Shape enumerated Determines the line shape. The values correspond to step-wise line shapes.
	Shape ScatterglLineShape `json:"shape,omitempty"`

	// Width number Sets the line width (in px).
	Width float64 `json:"width,omitempty"`
}

type ScatterglMarker struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorbar <no value> <no value>
	Colorbar *ScatterglMarkerColorbar `json:"colorbar,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Line <no value> <no value>
	Line *ScatterglMarkerLine `json:"line,omitempty"`

	// Opacity number Sets the marker opacity.
	Opacity interface{} `json:"opacity,omitempty"`

	// Opacitysrc string Sets the source reference on Chart Studio Cloud for  opacity .
	Opacitysrc String `json:"opacitysrc,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Showscale boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.
	Showscale Bool `json:"showscale,omitempty"`

	// Size number Sets the marker size (in px).
	Size interface{} `json:"size,omitempty"`

	// Sizemin number Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.
	Sizemin float64 `json:"sizemin,omitempty"`

	// Sizemode enumerated Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.
	Sizemode ScatterglMarkerSizemode `json:"sizemode,omitempty"`

	// Sizeref number Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.
	Sizeref float64 `json:"sizeref,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`

	// Symbol enumerated Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.
	Symbol ScatterglMarkerSymbol `json:"symbol,omitempty"`

	// Symbolsrc string Sets the source reference on Chart Studio Cloud for  symbol .
	Symbolsrc String `json:"symbolsrc,omitempty"`
}

type ScatterglSelected struct {

	// Marker <no value> <no value>
	Marker *ScatterglSelectedMarker `json:"marker,omitempty"`

	// Textfont <no value> <no value>
	Textfont *ScatterglSelectedTextfont `json:"textfont,omitempty"`
}

type ScatterglStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type ScatterglTextfont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

// ScatterglTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type ScatterglTransforms interface{}

type ScatterglUnselected struct {

	// Marker <no value> <no value>
	Marker *ScatterglUnselectedMarker `json:"marker,omitempty"`

	// Textfont <no value> <no value>
	Textfont *ScatterglUnselectedTextfont `json:"textfont,omitempty"`
}

type ScattermapboxHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align ScattermapboxHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *ScattermapboxHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type ScattermapboxLine struct {

	// Color color Sets the line color.
	Color String `json:"color,omitempty"`

	// Width number Sets the line width (in px).
	Width float64 `json:"width,omitempty"`
}

type ScattermapboxMarker struct {

	// Allowoverlap boolean Flag to draw all symbols, even if they overlap.
	Allowoverlap Bool `json:"allowoverlap,omitempty"`

	// Angle number Sets the marker orientation from true North, in degrees clockwise. When using the *auto* default, no rotation would be applied in perspective views which is different from using a zero angle.
	Angle interface{} `json:"angle,omitempty"`

	// Anglesrc string Sets the source reference on Chart Studio Cloud for  angle .
	Anglesrc String `json:"anglesrc,omitempty"`

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorbar <no value> <no value>
	Colorbar *ScattermapboxMarkerColorbar `json:"colorbar,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Opacity number Sets the marker opacity.
	Opacity interface{} `json:"opacity,omitempty"`

	// Opacitysrc string Sets the source reference on Chart Studio Cloud for  opacity .
	Opacitysrc String `json:"opacitysrc,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Showscale boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.
	Showscale Bool `json:"showscale,omitempty"`

	// Size number Sets the marker size (in px).
	Size interface{} `json:"size,omitempty"`

	// Sizemin number Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.
	Sizemin float64 `json:"sizemin,omitempty"`

	// Sizemode enumerated Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.
	Sizemode ScattermapboxMarkerSizemode `json:"sizemode,omitempty"`

	// Sizeref number Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.
	Sizeref float64 `json:"sizeref,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`

	// Symbol string Sets the marker symbol. Full list: https://www.mapbox.com/maki-icons/ Note that the array `marker.color` and `marker.size` are only available for *circle* symbols.
	Symbol interface{} `json:"symbol,omitempty"`

	// Symbolsrc string Sets the source reference on Chart Studio Cloud for  symbol .
	Symbolsrc String `json:"symbolsrc,omitempty"`
}

type ScattermapboxSelected struct {

	// Marker <no value> <no value>
	Marker *ScattermapboxSelectedMarker `json:"marker,omitempty"`
}

type ScattermapboxStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type ScattermapboxTextfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// ScattermapboxTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type ScattermapboxTransforms interface{}

type ScattermapboxUnselected struct {

	// Marker <no value> <no value>
	Marker *ScattermapboxUnselectedMarker `json:"marker,omitempty"`
}

type ScatterpolarHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align ScatterpolarHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *ScatterpolarHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type ScatterpolarLine struct {

	// Color color Sets the line color.
	Color String `json:"color,omitempty"`

	// Dash string Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Dash String `json:"dash,omitempty"`

	// Shape enumerated Determines the line shape. With *spline* the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.
	Shape ScatterpolarLineShape `json:"shape,omitempty"`

	// Smoothing number Has an effect only if `shape` is set to *spline* Sets the amount of smoothing. *0* corresponds to no smoothing (equivalent to a *linear* shape).
	Smoothing float64 `json:"smoothing,omitempty"`

	// Width number Sets the line width (in px).
	Width float64 `json:"width,omitempty"`
}

type ScatterpolarMarker struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorbar <no value> <no value>
	Colorbar *ScatterpolarMarkerColorbar `json:"colorbar,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Gradient <no value> <no value>
	Gradient *ScatterpolarMarkerGradient `json:"gradient,omitempty"`

	// Line <no value> <no value>
	Line *ScatterpolarMarkerLine `json:"line,omitempty"`

	// Maxdisplayed number Sets a maximum number of points to be drawn on the graph. *0* corresponds to no limit.
	Maxdisplayed float64 `json:"maxdisplayed,omitempty"`

	// Opacity number Sets the marker opacity.
	Opacity interface{} `json:"opacity,omitempty"`

	// Opacitysrc string Sets the source reference on Chart Studio Cloud for  opacity .
	Opacitysrc String `json:"opacitysrc,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Showscale boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.
	Showscale Bool `json:"showscale,omitempty"`

	// Size number Sets the marker size (in px).
	Size interface{} `json:"size,omitempty"`

	// Sizemin number Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.
	Sizemin float64 `json:"sizemin,omitempty"`

	// Sizemode enumerated Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.
	Sizemode ScatterpolarMarkerSizemode `json:"sizemode,omitempty"`

	// Sizeref number Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.
	Sizeref float64 `json:"sizeref,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`

	// Symbol enumerated Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.
	Symbol ScatterpolarMarkerSymbol `json:"symbol,omitempty"`

	// Symbolsrc string Sets the source reference on Chart Studio Cloud for  symbol .
	Symbolsrc String `json:"symbolsrc,omitempty"`
}

type ScatterpolarSelected struct {

	// Marker <no value> <no value>
	Marker *ScatterpolarSelectedMarker `json:"marker,omitempty"`

	// Textfont <no value> <no value>
	Textfont *ScatterpolarSelectedTextfont `json:"textfont,omitempty"`
}

type ScatterpolarStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type ScatterpolarTextfont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

// ScatterpolarTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type ScatterpolarTransforms interface{}

type ScatterpolarUnselected struct {

	// Marker <no value> <no value>
	Marker *ScatterpolarUnselectedMarker `json:"marker,omitempty"`

	// Textfont <no value> <no value>
	Textfont *ScatterpolarUnselectedTextfont `json:"textfont,omitempty"`
}

type ScatterpolarglHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align ScatterpolarglHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *ScatterpolarglHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type ScatterpolarglLine struct {

	// Color color Sets the line color.
	Color String `json:"color,omitempty"`

	// Dash enumerated Sets the style of the lines.
	Dash ScatterpolarglLineDash `json:"dash,omitempty"`

	// Shape enumerated Determines the line shape. The values correspond to step-wise line shapes.
	Shape ScatterpolarglLineShape `json:"shape,omitempty"`

	// Width number Sets the line width (in px).
	Width float64 `json:"width,omitempty"`
}

type ScatterpolarglMarker struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorbar <no value> <no value>
	Colorbar *ScatterpolarglMarkerColorbar `json:"colorbar,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Line <no value> <no value>
	Line *ScatterpolarglMarkerLine `json:"line,omitempty"`

	// Opacity number Sets the marker opacity.
	Opacity interface{} `json:"opacity,omitempty"`

	// Opacitysrc string Sets the source reference on Chart Studio Cloud for  opacity .
	Opacitysrc String `json:"opacitysrc,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Showscale boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.
	Showscale Bool `json:"showscale,omitempty"`

	// Size number Sets the marker size (in px).
	Size interface{} `json:"size,omitempty"`

	// Sizemin number Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.
	Sizemin float64 `json:"sizemin,omitempty"`

	// Sizemode enumerated Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.
	Sizemode ScatterpolarglMarkerSizemode `json:"sizemode,omitempty"`

	// Sizeref number Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.
	Sizeref float64 `json:"sizeref,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`

	// Symbol enumerated Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.
	Symbol ScatterpolarglMarkerSymbol `json:"symbol,omitempty"`

	// Symbolsrc string Sets the source reference on Chart Studio Cloud for  symbol .
	Symbolsrc String `json:"symbolsrc,omitempty"`
}

type ScatterpolarglSelected struct {

	// Marker <no value> <no value>
	Marker *ScatterpolarglSelectedMarker `json:"marker,omitempty"`

	// Textfont <no value> <no value>
	Textfont *ScatterpolarglSelectedTextfont `json:"textfont,omitempty"`
}

type ScatterpolarglStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type ScatterpolarglTextfont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

// ScatterpolarglTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type ScatterpolarglTransforms interface{}

type ScatterpolarglUnselected struct {

	// Marker <no value> <no value>
	Marker *ScatterpolarglUnselectedMarker `json:"marker,omitempty"`

	// Textfont <no value> <no value>
	Textfont *ScatterpolarglUnselectedTextfont `json:"textfont,omitempty"`
}

type ScatterternaryHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align ScatterternaryHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *ScatterternaryHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type ScatterternaryLine struct {

	// Color color Sets the line color.
	Color String `json:"color,omitempty"`

	// Dash string Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Dash String `json:"dash,omitempty"`

	// Shape enumerated Determines the line shape. With *spline* the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.
	Shape ScatterternaryLineShape `json:"shape,omitempty"`

	// Smoothing number Has an effect only if `shape` is set to *spline* Sets the amount of smoothing. *0* corresponds to no smoothing (equivalent to a *linear* shape).
	Smoothing float64 `json:"smoothing,omitempty"`

	// Width number Sets the line width (in px).
	Width float64 `json:"width,omitempty"`
}

type ScatterternaryMarker struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorbar <no value> <no value>
	Colorbar *ScatterternaryMarkerColorbar `json:"colorbar,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Gradient <no value> <no value>
	Gradient *ScatterternaryMarkerGradient `json:"gradient,omitempty"`

	// Line <no value> <no value>
	Line *ScatterternaryMarkerLine `json:"line,omitempty"`

	// Maxdisplayed number Sets a maximum number of points to be drawn on the graph. *0* corresponds to no limit.
	Maxdisplayed float64 `json:"maxdisplayed,omitempty"`

	// Opacity number Sets the marker opacity.
	Opacity interface{} `json:"opacity,omitempty"`

	// Opacitysrc string Sets the source reference on Chart Studio Cloud for  opacity .
	Opacitysrc String `json:"opacitysrc,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Showscale boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.
	Showscale Bool `json:"showscale,omitempty"`

	// Size number Sets the marker size (in px).
	Size interface{} `json:"size,omitempty"`

	// Sizemin number Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.
	Sizemin float64 `json:"sizemin,omitempty"`

	// Sizemode enumerated Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.
	Sizemode ScatterternaryMarkerSizemode `json:"sizemode,omitempty"`

	// Sizeref number Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.
	Sizeref float64 `json:"sizeref,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`

	// Symbol enumerated Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.
	Symbol ScatterternaryMarkerSymbol `json:"symbol,omitempty"`

	// Symbolsrc string Sets the source reference on Chart Studio Cloud for  symbol .
	Symbolsrc String `json:"symbolsrc,omitempty"`
}

type ScatterternarySelected struct {

	// Marker <no value> <no value>
	Marker *ScatterternarySelectedMarker `json:"marker,omitempty"`

	// Textfont <no value> <no value>
	Textfont *ScatterternarySelectedTextfont `json:"textfont,omitempty"`
}

type ScatterternaryStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type ScatterternaryTextfont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

// ScatterternaryTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type ScatterternaryTransforms interface{}

type ScatterternaryUnselected struct {

	// Marker <no value> <no value>
	Marker *ScatterternaryUnselectedMarker `json:"marker,omitempty"`

	// Textfont <no value> <no value>
	Textfont *ScatterternaryUnselectedTextfont `json:"textfont,omitempty"`
}

type SplomDiagonal struct {

	// Visible boolean Determines whether or not subplots on the diagonal are displayed.
	Visible Bool `json:"visible,omitempty"`
}

// SplomDimensions It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// dimension
//      axis
//      editType
//      label
//      name
//      role
//      templateitemname
//      values
//      valuessrc
//      visible
type SplomDimensions interface{}

type SplomHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align SplomHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *SplomHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type SplomMarker struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorbar <no value> <no value>
	Colorbar *SplomMarkerColorbar `json:"colorbar,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Line <no value> <no value>
	Line *SplomMarkerLine `json:"line,omitempty"`

	// Opacity number Sets the marker opacity.
	Opacity interface{} `json:"opacity,omitempty"`

	// Opacitysrc string Sets the source reference on Chart Studio Cloud for  opacity .
	Opacitysrc String `json:"opacitysrc,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Showscale boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.
	Showscale Bool `json:"showscale,omitempty"`

	// Size number Sets the marker size (in px).
	Size interface{} `json:"size,omitempty"`

	// Sizemin number Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.
	Sizemin float64 `json:"sizemin,omitempty"`

	// Sizemode enumerated Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.
	Sizemode SplomMarkerSizemode `json:"sizemode,omitempty"`

	// Sizeref number Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.
	Sizeref float64 `json:"sizeref,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`

	// Symbol enumerated Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.
	Symbol SplomMarkerSymbol `json:"symbol,omitempty"`

	// Symbolsrc string Sets the source reference on Chart Studio Cloud for  symbol .
	Symbolsrc String `json:"symbolsrc,omitempty"`
}

type SplomSelected struct {

	// Marker <no value> <no value>
	Marker *SplomSelectedMarker `json:"marker,omitempty"`
}

type SplomStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

// SplomTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type SplomTransforms interface{}

type SplomUnselected struct {

	// Marker <no value> <no value>
	Marker *SplomUnselectedMarker `json:"marker,omitempty"`
}

type StreamtubeColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat StreamtubeColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode StreamtubeColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent StreamtubeColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix StreamtubeColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix StreamtubeColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode StreamtubeColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *StreamtubeColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops StreamtubeColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition StreamtubeColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode StreamtubeColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks StreamtubeColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *StreamtubeColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor StreamtubeColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor StreamtubeColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type StreamtubeHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align StreamtubeHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *StreamtubeHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type StreamtubeLighting struct {

	// Ambient number Ambient light increases overall color visibility but can wash out the image.
	Ambient float64 `json:"ambient,omitempty"`

	// Diffuse number Represents the extent that incident rays are reflected in a range of angles.
	Diffuse float64 `json:"diffuse,omitempty"`

	// Facenormalsepsilon number Epsilon for face normals calculation avoids math issues arising from degenerate geometry.
	Facenormalsepsilon float64 `json:"facenormalsepsilon,omitempty"`

	// Fresnel number Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.
	Fresnel float64 `json:"fresnel,omitempty"`

	// Roughness number Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.
	Roughness float64 `json:"roughness,omitempty"`

	// Specular number Represents the level that incident rays are reflected in a single direction, causing shine.
	Specular float64 `json:"specular,omitempty"`

	// Vertexnormalsepsilon number Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.
	Vertexnormalsepsilon float64 `json:"vertexnormalsepsilon,omitempty"`
}

type StreamtubeLightposition struct {

	// X number Numeric vector, representing the X coordinate for each vertex.
	X float64 `json:"x,omitempty"`

	// Y number Numeric vector, representing the Y coordinate for each vertex.
	Y float64 `json:"y,omitempty"`

	// Z number Numeric vector, representing the Z coordinate for each vertex.
	Z float64 `json:"z,omitempty"`
}

type StreamtubeStarts struct {

	// X data_array Sets the x components of the starting position of the streamtubes
	X interface{} `json:"x,omitempty"`

	// Xsrc string Sets the source reference on Chart Studio Cloud for  x .
	Xsrc String `json:"xsrc,omitempty"`

	// Y data_array Sets the y components of the starting position of the streamtubes
	Y interface{} `json:"y,omitempty"`

	// Ysrc string Sets the source reference on Chart Studio Cloud for  y .
	Ysrc String `json:"ysrc,omitempty"`

	// Z data_array Sets the z components of the starting position of the streamtubes
	Z interface{} `json:"z,omitempty"`

	// Zsrc string Sets the source reference on Chart Studio Cloud for  z .
	Zsrc String `json:"zsrc,omitempty"`
}

type StreamtubeStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type SunburstDomain struct {

	// Column integer If there is a layout grid, use the domain for this column in the grid for this sunburst trace .
	Column int64 `json:"column,omitempty"`

	// Row integer If there is a layout grid, use the domain for this row in the grid for this sunburst trace .
	Row int64 `json:"row,omitempty"`

	// X info_array Sets the horizontal domain of this sunburst trace (in plot fraction).
	X interface{} `json:"x,omitempty"`

	// Y info_array Sets the vertical domain of this sunburst trace (in plot fraction).
	Y interface{} `json:"y,omitempty"`
}

type SunburstHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align SunburstHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *SunburstHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type SunburstInsidetextfont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type SunburstLeaf struct {

	// Opacity number Sets the opacity of the leaves. With colorscale it is defaulted to 1; otherwise it is defaulted to 0.7
	Opacity float64 `json:"opacity,omitempty"`
}

type SunburstMarker struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if colorsis set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here colors) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if colorsis set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if colorsis set to a numerical array. Value should have the same units as colors and if set, `marker.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if colorsis set to a numerical array. Value should have the same units as colors. Has no effect when `marker.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if colorsis set to a numerical array. Value should have the same units as colors and if set, `marker.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorbar <no value> <no value>
	Colorbar *SunburstMarkerColorbar `json:"colorbar,omitempty"`

	// Colors data_array Sets the color of each sector of this trace. If not specified, the default trace color set is used to pick the sector colors.
	Colors interface{} `json:"colors,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if colorsis set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorssrc string Sets the source reference on Chart Studio Cloud for  colors .
	Colorssrc String `json:"colorssrc,omitempty"`

	// Line <no value> <no value>
	Line *SunburstMarkerLine `json:"line,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if colorsis set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Showscale boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if colorsis set to a numerical array.
	Showscale Bool `json:"showscale,omitempty"`
}

type SunburstOutsidetextfont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type SunburstRoot struct {

	// Color color sets the color of the root node for a sunburst or a treemap trace. this has no effect when a colorscale is used to set the markers.
	Color String `json:"color,omitempty"`
}

type SunburstStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type SunburstTextfont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

// SunburstTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type SunburstTransforms interface{}

type SurfaceColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat SurfaceColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode SurfaceColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent SurfaceColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix SurfaceColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix SurfaceColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode SurfaceColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *SurfaceColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops SurfaceColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition SurfaceColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode SurfaceColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks SurfaceColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *SurfaceColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor SurfaceColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor SurfaceColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type SurfaceContours struct {

	// X <no value> <no value>
	X *SurfaceContoursX `json:"x,omitempty"`

	// Y <no value> <no value>
	Y *SurfaceContoursY `json:"y,omitempty"`

	// Z <no value> <no value>
	Z *SurfaceContoursZ `json:"z,omitempty"`
}

type SurfaceHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align SurfaceHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *SurfaceHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type SurfaceLighting struct {

	// Ambient number Ambient light increases overall color visibility but can wash out the image.
	Ambient float64 `json:"ambient,omitempty"`

	// Diffuse number Represents the extent that incident rays are reflected in a range of angles.
	Diffuse float64 `json:"diffuse,omitempty"`

	// Fresnel number Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.
	Fresnel float64 `json:"fresnel,omitempty"`

	// Roughness number Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.
	Roughness float64 `json:"roughness,omitempty"`

	// Specular number Represents the level that incident rays are reflected in a single direction, causing shine.
	Specular float64 `json:"specular,omitempty"`
}

type SurfaceLightposition struct {

	// X number Numeric vector, representing the X coordinate for each vertex.
	X float64 `json:"x,omitempty"`

	// Y number Numeric vector, representing the Y coordinate for each vertex.
	Y float64 `json:"y,omitempty"`

	// Z number Numeric vector, representing the Z coordinate for each vertex.
	Z float64 `json:"z,omitempty"`
}

type SurfaceStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type TableCells struct {

	// Align enumerated Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans two or more lines (i.e. `text` contains one or more <br> HTML tags) or if an explicit width is set to override the text width.
	Align TableCellsAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Fill <no value> <no value>
	Fill *TableCellsFill `json:"fill,omitempty"`

	// Font <no value>
	Font *TableCellsFont `json:"font,omitempty"`

	// Format data_array Sets the cell value formatting rule using d3 formatting mini-language which is similar to those of Python. See https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format
	Format interface{} `json:"format,omitempty"`

	// Formatsrc string Sets the source reference on Chart Studio Cloud for  format .
	Formatsrc String `json:"formatsrc,omitempty"`

	// Height number The height of cells.
	Height float64 `json:"height,omitempty"`

	// Line <no value> <no value>
	Line *TableCellsLine `json:"line,omitempty"`

	// Prefix string Prefix for cell values.
	Prefix interface{} `json:"prefix,omitempty"`

	// Prefixsrc string Sets the source reference on Chart Studio Cloud for  prefix .
	Prefixsrc String `json:"prefixsrc,omitempty"`

	// Suffix string Suffix for cell values.
	Suffix interface{} `json:"suffix,omitempty"`

	// Suffixsrc string Sets the source reference on Chart Studio Cloud for  suffix .
	Suffixsrc String `json:"suffixsrc,omitempty"`

	// Values data_array Cell values. `values[m][n]` represents the value of the `n`th point in column `m`, therefore the `values[m]` vector length for all columns must be the same (longer vectors will be truncated). Each value must be a finite number or a string.
	Values interface{} `json:"values,omitempty"`

	// Valuessrc string Sets the source reference on Chart Studio Cloud for  values .
	Valuessrc String `json:"valuessrc,omitempty"`
}

type TableDomain struct {

	// Column integer If there is a layout grid, use the domain for this column in the grid for this table trace .
	Column int64 `json:"column,omitempty"`

	// Row integer If there is a layout grid, use the domain for this row in the grid for this table trace .
	Row int64 `json:"row,omitempty"`

	// X info_array Sets the horizontal domain of this table trace (in plot fraction).
	X interface{} `json:"x,omitempty"`

	// Y info_array Sets the vertical domain of this table trace (in plot fraction).
	Y interface{} `json:"y,omitempty"`
}

type TableHeader struct {

	// Align enumerated Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans two or more lines (i.e. `text` contains one or more <br> HTML tags) or if an explicit width is set to override the text width.
	Align TableHeaderAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Fill <no value> <no value>
	Fill *TableHeaderFill `json:"fill,omitempty"`

	// Font <no value>
	Font *TableHeaderFont `json:"font,omitempty"`

	// Format data_array Sets the cell value formatting rule using d3 formatting mini-language which is similar to those of Python. See https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format
	Format interface{} `json:"format,omitempty"`

	// Formatsrc string Sets the source reference on Chart Studio Cloud for  format .
	Formatsrc String `json:"formatsrc,omitempty"`

	// Height number The height of cells.
	Height float64 `json:"height,omitempty"`

	// Line <no value> <no value>
	Line *TableHeaderLine `json:"line,omitempty"`

	// Prefix string Prefix for cell values.
	Prefix interface{} `json:"prefix,omitempty"`

	// Prefixsrc string Sets the source reference on Chart Studio Cloud for  prefix .
	Prefixsrc String `json:"prefixsrc,omitempty"`

	// Suffix string Suffix for cell values.
	Suffix interface{} `json:"suffix,omitempty"`

	// Suffixsrc string Sets the source reference on Chart Studio Cloud for  suffix .
	Suffixsrc String `json:"suffixsrc,omitempty"`

	// Values data_array Header cell values. `values[m][n]` represents the value of the `n`th point in column `m`, therefore the `values[m]` vector length for all columns must be the same (longer vectors will be truncated). Each value must be a finite number or a string.
	Values interface{} `json:"values,omitempty"`

	// Valuessrc string Sets the source reference on Chart Studio Cloud for  values .
	Valuessrc String `json:"valuessrc,omitempty"`
}

type TableHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align TableHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *TableHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type TableStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type TreemapDomain struct {

	// Column integer If there is a layout grid, use the domain for this column in the grid for this treemap trace .
	Column int64 `json:"column,omitempty"`

	// Row integer If there is a layout grid, use the domain for this row in the grid for this treemap trace .
	Row int64 `json:"row,omitempty"`

	// X info_array Sets the horizontal domain of this treemap trace (in plot fraction).
	X interface{} `json:"x,omitempty"`

	// Y info_array Sets the vertical domain of this treemap trace (in plot fraction).
	Y interface{} `json:"y,omitempty"`
}

type TreemapHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align TreemapHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *TreemapHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type TreemapInsidetextfont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type TreemapMarker struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if colorsis set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here colors) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if colorsis set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if colorsis set to a numerical array. Value should have the same units as colors and if set, `marker.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if colorsis set to a numerical array. Value should have the same units as colors. Has no effect when `marker.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if colorsis set to a numerical array. Value should have the same units as colors and if set, `marker.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorbar <no value> <no value>
	Colorbar *TreemapMarkerColorbar `json:"colorbar,omitempty"`

	// Colors data_array Sets the color of each sector of this trace. If not specified, the default trace color set is used to pick the sector colors.
	Colors interface{} `json:"colors,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if colorsis set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorssrc string Sets the source reference on Chart Studio Cloud for  colors .
	Colorssrc String `json:"colorssrc,omitempty"`

	// Depthfade enumerated Determines if the sector colors are faded towards the background from the leaves up to the headers. This option is unavailable when a `colorscale` is present, defaults to false when `marker.colors` is set, but otherwise defaults to true. When set to *reversed*, the fading direction is inverted, that is the top elements within hierarchy are drawn with fully saturated colors while the leaves are faded towards the background color.
	Depthfade TreemapMarkerDepthfade `json:"depthfade,omitempty"`

	// Line <no value> <no value>
	Line *TreemapMarkerLine `json:"line,omitempty"`

	// Pad <no value> <no value>
	Pad *TreemapMarkerPad `json:"pad,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if colorsis set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Showscale boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if colorsis set to a numerical array.
	Showscale Bool `json:"showscale,omitempty"`
}

type TreemapOutsidetextfont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type TreemapPathbar struct {

	// Edgeshape enumerated Determines which shape is used for edges between `barpath` labels.
	Edgeshape TreemapPathbarEdgeshape `json:"edgeshape,omitempty"`

	// Side enumerated Determines on which side of the the treemap the `pathbar` should be presented.
	Side TreemapPathbarSide `json:"side,omitempty"`

	// Textfont <no value> Sets the font used inside `pathbar`.
	Textfont *TreemapPathbarTextfont `json:"textfont,omitempty"`

	// Thickness number Sets the thickness of `pathbar` (in px). If not specified the `pathbar.textfont.size` is used with 3 pixles extra padding on each side.
	Thickness float64 `json:"thickness,omitempty"`

	// Visible boolean Determines if the path bar is drawn i.e. outside the trace `domain` and with one pixel gap.
	Visible Bool `json:"visible,omitempty"`
}

type TreemapRoot struct {

	// Color color sets the color of the root node for a sunburst or a treemap trace. this has no effect when a colorscale is used to set the markers.
	Color String `json:"color,omitempty"`
}

type TreemapStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type TreemapTextfont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type TreemapTiling struct {

	// Flip flaglist Determines if the positions obtained from solver are flipped on each axis.
	Flip TreemapTilingFlip `json:"flip,omitempty"`

	// Packing enumerated Determines d3 treemap solver. For more info please refer to https://github.com/d3/d3-hierarchy#treemap-tiling
	Packing TreemapTilingPacking `json:"packing,omitempty"`

	// Pad number Sets the inner padding (in px).
	Pad float64 `json:"pad,omitempty"`

	// Squarifyratio number When using *squarify* `packing` algorithm, according to https://github.com/d3/d3-hierarchy/blob/master/README.md#squarify_ratio this option specifies the desired aspect ratio of the generated rectangles. The ratio must be specified as a number greater than or equal to one. Note that the orientation of the generated rectangles (tall or wide) is not implied by the ratio; for example, a ratio of two will attempt to produce a mixture of rectangles whose width:height ratio is either 2:1 or 1:2. When using *squarify*, unlike d3 which uses the Golden Ratio i.e. 1.618034, Plotly applies 1 to increase squares in treemap layouts.
	Squarifyratio float64 `json:"squarifyratio,omitempty"`
}

// TreemapTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type TreemapTransforms interface{}

type ViolinBox struct {

	// Fillcolor color Sets the inner box plot fill color.
	Fillcolor String `json:"fillcolor,omitempty"`

	// Line <no value> <no value>
	Line *ViolinBoxLine `json:"line,omitempty"`

	// Visible boolean Determines if an miniature box plot is drawn inside the violins.
	Visible Bool `json:"visible,omitempty"`

	// Width number Sets the width of the inner box plots relative to the violins' width. For example, with 1, the inner box plots are as wide as the violins.
	Width float64 `json:"width,omitempty"`
}

type ViolinHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align ViolinHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *ViolinHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type ViolinLine struct {

	// Color color Sets the color of line bounding the violin(s).
	Color String `json:"color,omitempty"`

	// Width number Sets the width (in px) of line bounding the violin(s).
	Width float64 `json:"width,omitempty"`
}

type ViolinMarker struct {

	// Color color Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
	Color String `json:"color,omitempty"`

	// Line <no value> <no value>
	Line *ViolinMarkerLine `json:"line,omitempty"`

	// Opacity number Sets the marker opacity.
	Opacity float64 `json:"opacity,omitempty"`

	// Outliercolor color Sets the color of the outlier sample points.
	Outliercolor String `json:"outliercolor,omitempty"`

	// Size number Sets the marker size (in px).
	Size float64 `json:"size,omitempty"`

	// Symbol enumerated Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.
	Symbol ViolinMarkerSymbol `json:"symbol,omitempty"`
}

type ViolinMeanline struct {

	// Color color Sets the mean line color.
	Color String `json:"color,omitempty"`

	// Visible boolean Determines if a line corresponding to the sample's mean is shown inside the violins. If `box.visible` is turned on, the mean line is drawn inside the inner box. Otherwise, the mean line is drawn from one side of the violin to other.
	Visible Bool `json:"visible,omitempty"`

	// Width number Sets the mean line width.
	Width float64 `json:"width,omitempty"`
}

type ViolinSelected struct {

	// Marker <no value> <no value>
	Marker *ViolinSelectedMarker `json:"marker,omitempty"`
}

type ViolinStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

// ViolinTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type ViolinTransforms interface{}

type ViolinUnselected struct {

	// Marker <no value> <no value>
	Marker *ViolinUnselectedMarker `json:"marker,omitempty"`
}

type VolumeCaps struct {

	// X <no value> <no value>
	X *VolumeCapsX `json:"x,omitempty"`

	// Y <no value> <no value>
	Y *VolumeCapsY `json:"y,omitempty"`

	// Z <no value> <no value>
	Z *VolumeCapsZ `json:"z,omitempty"`
}

type VolumeColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat VolumeColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode VolumeColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent VolumeColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix VolumeColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix VolumeColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode VolumeColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *VolumeColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops VolumeColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition VolumeColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode VolumeColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks VolumeColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *VolumeColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor VolumeColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor VolumeColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type VolumeContour struct {

	// Color color Sets the color of the contour lines.
	Color String `json:"color,omitempty"`

	// Show boolean Sets whether or not dynamic contours are shown on hover
	Show Bool `json:"show,omitempty"`

	// Width number Sets the width of the contour lines.
	Width float64 `json:"width,omitempty"`
}

type VolumeHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align VolumeHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *VolumeHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type VolumeLighting struct {

	// Ambient number Ambient light increases overall color visibility but can wash out the image.
	Ambient float64 `json:"ambient,omitempty"`

	// Diffuse number Represents the extent that incident rays are reflected in a range of angles.
	Diffuse float64 `json:"diffuse,omitempty"`

	// Facenormalsepsilon number Epsilon for face normals calculation avoids math issues arising from degenerate geometry.
	Facenormalsepsilon float64 `json:"facenormalsepsilon,omitempty"`

	// Fresnel number Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.
	Fresnel float64 `json:"fresnel,omitempty"`

	// Roughness number Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.
	Roughness float64 `json:"roughness,omitempty"`

	// Specular number Represents the level that incident rays are reflected in a single direction, causing shine.
	Specular float64 `json:"specular,omitempty"`

	// Vertexnormalsepsilon number Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.
	Vertexnormalsepsilon float64 `json:"vertexnormalsepsilon,omitempty"`
}

type VolumeLightposition struct {

	// X number Numeric vector, representing the X coordinate for each vertex.
	X float64 `json:"x,omitempty"`

	// Y number Numeric vector, representing the Y coordinate for each vertex.
	Y float64 `json:"y,omitempty"`

	// Z number Numeric vector, representing the Z coordinate for each vertex.
	Z float64 `json:"z,omitempty"`
}

type VolumeSlices struct {

	// X <no value> <no value>
	X *VolumeSlicesX `json:"x,omitempty"`

	// Y <no value> <no value>
	Y *VolumeSlicesY `json:"y,omitempty"`

	// Z <no value> <no value>
	Z *VolumeSlicesZ `json:"z,omitempty"`
}

type VolumeSpaceframe struct {

	// Fill number Sets the fill ratio of the `spaceframe` elements. The default fill value is 1 meaning that they are entirely shaded. Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.
	Fill float64 `json:"fill,omitempty"`

	// Show boolean Displays/hides tetrahedron shapes between minimum and maximum iso-values. Often useful when either caps or surfaces are disabled or filled with values less than 1.
	Show Bool `json:"show,omitempty"`
}

type VolumeStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type VolumeSurface struct {

	// Count integer Sets the number of iso-surfaces between minimum and maximum iso-values. By default this value is 2 meaning that only minimum and maximum surfaces would be drawn.
	Count int64 `json:"count,omitempty"`

	// Fill number Sets the fill ratio of the iso-surface. The default fill value of the surface is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.
	Fill float64 `json:"fill,omitempty"`

	// Pattern flaglist Sets the surface pattern of the iso-surface 3-D sections. The default pattern of the surface is `all` meaning that the rest of surface elements would be shaded. The check options (either 1 or 2) could be used to draw half of the squares on the surface. Using various combinations of capital `A`, `B`, `C`, `D` and `E` may also be used to reduce the number of triangles on the iso-surfaces and creating other patterns of interest.
	Pattern VolumeSurfacePattern `json:"pattern,omitempty"`

	// Show boolean Hides/displays surfaces between minimum and maximum iso-values.
	Show Bool `json:"show,omitempty"`
}

type WaterfallConnector struct {

	// Line <no value> <no value>
	Line *WaterfallConnectorLine `json:"line,omitempty"`

	// Mode enumerated Sets the shape of connector lines.
	Mode WaterfallConnectorMode `json:"mode,omitempty"`

	// Visible boolean Determines if connector lines are drawn.
	Visible Bool `json:"visible,omitempty"`
}

type WaterfallDecreasing struct {

	// Marker <no value> <no value>
	Marker *WaterfallDecreasingMarker `json:"marker,omitempty"`
}

type WaterfallHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align WaterfallHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *WaterfallHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type WaterfallIncreasing struct {

	// Marker <no value> <no value>
	Marker *WaterfallIncreasingMarker `json:"marker,omitempty"`
}

type WaterfallInsidetextfont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type WaterfallOutsidetextfont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type WaterfallStream struct {

	// Maxpoints number Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token string The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token String `json:"token,omitempty"`
}

type WaterfallTextfont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type WaterfallTotals struct {

	// Marker <no value> <no value>
	Marker *WaterfallTotalsMarker `json:"marker,omitempty"`
}

// WaterfallTransforms It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// transform
//      description
//      editType
//      role
type WaterfallTransforms interface{}

// DEEP 1
type AreaHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type BarHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type BarMarkerColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat BarMarkerColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode BarMarkerColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent BarMarkerColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix BarMarkerColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix BarMarkerColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode BarMarkerColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *BarMarkerColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops BarMarkerColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition BarMarkerColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode BarMarkerColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks BarMarkerColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *BarMarkerColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor BarMarkerColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor BarMarkerColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type BarMarkerLine struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Width number Sets the width (in px) of the lines bounding the marker points.
	Width interface{} `json:"width,omitempty"`

	// Widthsrc string Sets the source reference on Chart Studio Cloud for  width .
	Widthsrc String `json:"widthsrc,omitempty"`
}

type BarSelectedMarker struct {

	// Color color Sets the marker color of selected points.
	Color String `json:"color,omitempty"`

	// Opacity number Sets the marker opacity of selected points.
	Opacity float64 `json:"opacity,omitempty"`
}

type BarSelectedTextfont struct {

	// Color color Sets the text font color of selected points.
	Color String `json:"color,omitempty"`
}

type BarUnselectedMarker struct {

	// Color color Sets the marker color of unselected points, applied only when a selection exists.
	Color String `json:"color,omitempty"`

	// Opacity number Sets the marker opacity of unselected points, applied only when a selection exists.
	Opacity float64 `json:"opacity,omitempty"`
}

type BarUnselectedTextfont struct {

	// Color color Sets the text font color of unselected points, applied only when a selection exists.
	Color String `json:"color,omitempty"`
}

type BarpolarHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type BarpolarMarkerColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat BarpolarMarkerColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode BarpolarMarkerColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent BarpolarMarkerColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix BarpolarMarkerColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix BarpolarMarkerColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode BarpolarMarkerColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *BarpolarMarkerColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops BarpolarMarkerColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition BarpolarMarkerColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode BarpolarMarkerColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks BarpolarMarkerColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *BarpolarMarkerColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor BarpolarMarkerColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor BarpolarMarkerColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type BarpolarMarkerLine struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Width number Sets the width (in px) of the lines bounding the marker points.
	Width interface{} `json:"width,omitempty"`

	// Widthsrc string Sets the source reference on Chart Studio Cloud for  width .
	Widthsrc String `json:"widthsrc,omitempty"`
}

type BarpolarSelectedMarker struct {

	// Color color Sets the marker color of selected points.
	Color String `json:"color,omitempty"`

	// Opacity number Sets the marker opacity of selected points.
	Opacity float64 `json:"opacity,omitempty"`
}

type BarpolarSelectedTextfont struct {

	// Color color Sets the text font color of selected points.
	Color String `json:"color,omitempty"`
}

type BarpolarUnselectedMarker struct {

	// Color color Sets the marker color of unselected points, applied only when a selection exists.
	Color String `json:"color,omitempty"`

	// Opacity number Sets the marker opacity of unselected points, applied only when a selection exists.
	Opacity float64 `json:"opacity,omitempty"`
}

type BarpolarUnselectedTextfont struct {

	// Color color Sets the text font color of unselected points, applied only when a selection exists.
	Color String `json:"color,omitempty"`
}

type BoxHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type BoxMarkerLine struct {

	// Color color Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
	Color String `json:"color,omitempty"`

	// Outliercolor color Sets the border line color of the outlier sample points. Defaults to marker.color
	Outliercolor String `json:"outliercolor,omitempty"`

	// Outlierwidth number Sets the border line width (in px) of the outlier sample points.
	Outlierwidth float64 `json:"outlierwidth,omitempty"`

	// Width number Sets the width (in px) of the lines bounding the marker points.
	Width float64 `json:"width,omitempty"`
}

type BoxSelectedMarker struct {

	// Color color Sets the marker color of selected points.
	Color String `json:"color,omitempty"`

	// Opacity number Sets the marker opacity of selected points.
	Opacity float64 `json:"opacity,omitempty"`

	// Size number Sets the marker size of selected points.
	Size float64 `json:"size,omitempty"`
}

type BoxUnselectedMarker struct {

	// Color color Sets the marker color of unselected points, applied only when a selection exists.
	Color String `json:"color,omitempty"`

	// Opacity number Sets the marker opacity of unselected points, applied only when a selection exists.
	Opacity float64 `json:"opacity,omitempty"`

	// Size number Sets the marker size of unselected points, applied only when a selection exists.
	Size float64 `json:"size,omitempty"`
}

type CandlestickDecreasingLine struct {

	// Color color Sets the color of line bounding the box(es).
	Color String `json:"color,omitempty"`

	// Width number Sets the width (in px) of line bounding the box(es).
	Width float64 `json:"width,omitempty"`
}

type CandlestickHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type CandlestickIncreasingLine struct {

	// Color color Sets the color of line bounding the box(es).
	Color String `json:"color,omitempty"`

	// Width number Sets the width (in px) of line bounding the box(es).
	Width float64 `json:"width,omitempty"`
}

type CarpetAaxisTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// CarpetAaxisTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type CarpetAaxisTickformatstops interface{}

type CarpetAaxisTitle struct {

	// Font <no value> Sets this axis' title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *CarpetAaxisTitleFont `json:"font,omitempty"`

	// Offset number An additional amount by which to offset the title from the tick labels, given in pixels. Note that this used to be set by the now deprecated `titleoffset` attribute.
	Offset float64 `json:"offset,omitempty"`

	// Text string Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type CarpetBaxisTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// CarpetBaxisTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type CarpetBaxisTickformatstops interface{}

type CarpetBaxisTitle struct {

	// Font <no value> Sets this axis' title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *CarpetBaxisTitleFont `json:"font,omitempty"`

	// Offset number An additional amount by which to offset the title from the tick labels, given in pixels. Note that this used to be set by the now deprecated `titleoffset` attribute.
	Offset float64 `json:"offset,omitempty"`

	// Text string Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type ChoroplethColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// ChoroplethColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type ChoroplethColorbarTickformatstops interface{}

type ChoroplethColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *ChoroplethColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side ChoroplethColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type ChoroplethHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type ChoroplethMarkerLine struct {

	// Color color Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Width number Sets the width (in px) of the lines bounding the marker points.
	Width interface{} `json:"width,omitempty"`

	// Widthsrc string Sets the source reference on Chart Studio Cloud for  width .
	Widthsrc String `json:"widthsrc,omitempty"`
}

type ChoroplethSelectedMarker struct {

	// Opacity number Sets the marker opacity of selected points.
	Opacity float64 `json:"opacity,omitempty"`
}

type ChoroplethUnselectedMarker struct {

	// Opacity number Sets the marker opacity of unselected points, applied only when a selection exists.
	Opacity float64 `json:"opacity,omitempty"`
}

type ChoroplethmapboxColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// ChoroplethmapboxColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type ChoroplethmapboxColorbarTickformatstops interface{}

type ChoroplethmapboxColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *ChoroplethmapboxColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side ChoroplethmapboxColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type ChoroplethmapboxHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type ChoroplethmapboxMarkerLine struct {

	// Color color Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Width number Sets the width (in px) of the lines bounding the marker points.
	Width interface{} `json:"width,omitempty"`

	// Widthsrc string Sets the source reference on Chart Studio Cloud for  width .
	Widthsrc String `json:"widthsrc,omitempty"`
}

type ChoroplethmapboxSelectedMarker struct {

	// Opacity number Sets the marker opacity of selected points.
	Opacity float64 `json:"opacity,omitempty"`
}

type ChoroplethmapboxUnselectedMarker struct {

	// Opacity number Sets the marker opacity of unselected points, applied only when a selection exists.
	Opacity float64 `json:"opacity,omitempty"`
}

type ConeColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// ConeColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type ConeColorbarTickformatstops interface{}

type ConeColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *ConeColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side ConeColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type ConeHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type ContourColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// ContourColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type ContourColorbarTickformatstops interface{}

type ContourColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *ContourColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side ContourColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type ContourContoursImpliededits struct {
}

type ContourContoursLabelfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type ContourHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type ContourcarpetColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// ContourcarpetColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type ContourcarpetColorbarTickformatstops interface{}

type ContourcarpetColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *ContourcarpetColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side ContourcarpetColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type ContourcarpetContoursImpliededits struct {
}

type ContourcarpetContoursLabelfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type DensitymapboxColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// DensitymapboxColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type DensitymapboxColorbarTickformatstops interface{}

type DensitymapboxColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *DensitymapboxColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side DensitymapboxColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type DensitymapboxHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type FunnelConnectorLine struct {

	// Color color Sets the line color.
	Color String `json:"color,omitempty"`

	// Dash string Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Dash String `json:"dash,omitempty"`

	// Width number Sets the line width (in px).
	Width float64 `json:"width,omitempty"`
}

type FunnelHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type FunnelMarkerColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat FunnelMarkerColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode FunnelMarkerColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent FunnelMarkerColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix FunnelMarkerColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix FunnelMarkerColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode FunnelMarkerColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *FunnelMarkerColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops FunnelMarkerColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition FunnelMarkerColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode FunnelMarkerColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks FunnelMarkerColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *FunnelMarkerColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor FunnelMarkerColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor FunnelMarkerColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type FunnelMarkerLine struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Width number Sets the width (in px) of the lines bounding the marker points.
	Width interface{} `json:"width,omitempty"`

	// Widthsrc string Sets the source reference on Chart Studio Cloud for  width .
	Widthsrc String `json:"widthsrc,omitempty"`
}

type FunnelareaHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type FunnelareaMarkerLine struct {

	// Color color Sets the color of the line enclosing each sector. Defaults to the `paper_bgcolor` value.
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Width number Sets the width (in px) of the line enclosing each sector.
	Width interface{} `json:"width,omitempty"`

	// Widthsrc string Sets the source reference on Chart Studio Cloud for  width .
	Widthsrc String `json:"widthsrc,omitempty"`
}

type FunnelareaTitleFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type HeatmapColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// HeatmapColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type HeatmapColorbarTickformatstops interface{}

type HeatmapColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *HeatmapColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side HeatmapColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type HeatmapHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type HeatmapglColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// HeatmapglColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type HeatmapglColorbarTickformatstops interface{}

type HeatmapglColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *HeatmapglColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side HeatmapglColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type HeatmapglHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type Histogram2dColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// Histogram2dColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type Histogram2dColorbarTickformatstops interface{}

type Histogram2dColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *Histogram2dColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side Histogram2dColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type Histogram2dHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type Histogram2dcontourColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// Histogram2dcontourColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type Histogram2dcontourColorbarTickformatstops interface{}

type Histogram2dcontourColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *Histogram2dcontourColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side Histogram2dcontourColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type Histogram2dcontourContoursImpliededits struct {
}

type Histogram2dcontourContoursLabelfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type Histogram2dcontourHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type HistogramHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type HistogramMarkerColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat HistogramMarkerColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode HistogramMarkerColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent HistogramMarkerColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix HistogramMarkerColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix HistogramMarkerColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode HistogramMarkerColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *HistogramMarkerColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops HistogramMarkerColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition HistogramMarkerColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode HistogramMarkerColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks HistogramMarkerColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *HistogramMarkerColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor HistogramMarkerColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor HistogramMarkerColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type HistogramMarkerLine struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Width number Sets the width (in px) of the lines bounding the marker points.
	Width interface{} `json:"width,omitempty"`

	// Widthsrc string Sets the source reference on Chart Studio Cloud for  width .
	Widthsrc String `json:"widthsrc,omitempty"`
}

type HistogramSelectedMarker struct {

	// Color color Sets the marker color of selected points.
	Color String `json:"color,omitempty"`

	// Opacity number Sets the marker opacity of selected points.
	Opacity float64 `json:"opacity,omitempty"`
}

type HistogramSelectedTextfont struct {

	// Color color Sets the text font color of selected points.
	Color String `json:"color,omitempty"`
}

type HistogramUnselectedMarker struct {

	// Color color Sets the marker color of unselected points, applied only when a selection exists.
	Color String `json:"color,omitempty"`

	// Opacity number Sets the marker opacity of unselected points, applied only when a selection exists.
	Opacity float64 `json:"opacity,omitempty"`
}

type HistogramUnselectedTextfont struct {

	// Color color Sets the text font color of unselected points, applied only when a selection exists.
	Color String `json:"color,omitempty"`
}

type ImageHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type IndicatorDeltaDecreasing struct {

	// Color color Sets the color for increasing value.
	Color String `json:"color,omitempty"`

	// Symbol string Sets the symbol to display for increasing value
	Symbol String `json:"symbol,omitempty"`
}

type IndicatorDeltaFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type IndicatorDeltaIncreasing struct {

	// Color color Sets the color for increasing value.
	Color String `json:"color,omitempty"`

	// Symbol string Sets the symbol to display for increasing value
	Symbol String `json:"symbol,omitempty"`
}

type IndicatorGaugeAxis struct {

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat IndicatorGaugeAxisExponentformat `json:"exponentformat,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Range info_array Sets the range of this axis.
	Range interface{} `json:"range,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent IndicatorGaugeAxisShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix IndicatorGaugeAxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix IndicatorGaugeAxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *IndicatorGaugeAxisTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops IndicatorGaugeAxisTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode IndicatorGaugeAxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks IndicatorGaugeAxisTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Visible boolean A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false
	Visible Bool `json:"visible,omitempty"`
}

type IndicatorGaugeBar struct {

	// Color color Sets the background color of the arc.
	Color String `json:"color,omitempty"`

	// Line <no value> <no value>
	Line *IndicatorGaugeBarLine `json:"line,omitempty"`

	// Thickness number Sets the thickness of the bar as a fraction of the total thickness of the gauge.
	Thickness float64 `json:"thickness,omitempty"`
}

// IndicatorGaugeSteps It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// step
//      color
//      editType
//      line
//      name
//      range
//      role
//      templateitemname
//      thickness
type IndicatorGaugeSteps interface{}

type IndicatorGaugeThreshold struct {

	// Line <no value> <no value>
	Line *IndicatorGaugeThresholdLine `json:"line,omitempty"`

	// Thickness number Sets the thickness of the threshold line as a fraction of the thickness of the gauge.
	Thickness float64 `json:"thickness,omitempty"`

	// Value number Sets a treshold value drawn as a line.
	Value float64 `json:"value,omitempty"`
}

type IndicatorNumberFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type IndicatorTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type IsosurfaceCapsX struct {

	// Fill number Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.
	Fill float64 `json:"fill,omitempty"`

	// Show boolean Sets the fill ratio of the `slices`. The default fill value of the x `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.
	Show Bool `json:"show,omitempty"`
}

type IsosurfaceCapsY struct {

	// Fill number Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.
	Fill float64 `json:"fill,omitempty"`

	// Show boolean Sets the fill ratio of the `slices`. The default fill value of the y `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.
	Show Bool `json:"show,omitempty"`
}

type IsosurfaceCapsZ struct {

	// Fill number Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.
	Fill float64 `json:"fill,omitempty"`

	// Show boolean Sets the fill ratio of the `slices`. The default fill value of the z `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.
	Show Bool `json:"show,omitempty"`
}

type IsosurfaceColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// IsosurfaceColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type IsosurfaceColorbarTickformatstops interface{}

type IsosurfaceColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *IsosurfaceColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side IsosurfaceColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type IsosurfaceHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type IsosurfaceSlicesX struct {

	// Fill number Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.
	Fill float64 `json:"fill,omitempty"`

	// Locations data_array Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis x except start and end.
	Locations interface{} `json:"locations,omitempty"`

	// Locationssrc string Sets the source reference on Chart Studio Cloud for  locations .
	Locationssrc String `json:"locationssrc,omitempty"`

	// Show boolean Determines whether or not slice planes about the x dimension are drawn.
	Show Bool `json:"show,omitempty"`
}

type IsosurfaceSlicesY struct {

	// Fill number Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.
	Fill float64 `json:"fill,omitempty"`

	// Locations data_array Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis y except start and end.
	Locations interface{} `json:"locations,omitempty"`

	// Locationssrc string Sets the source reference on Chart Studio Cloud for  locations .
	Locationssrc String `json:"locationssrc,omitempty"`

	// Show boolean Determines whether or not slice planes about the y dimension are drawn.
	Show Bool `json:"show,omitempty"`
}

type IsosurfaceSlicesZ struct {

	// Fill number Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.
	Fill float64 `json:"fill,omitempty"`

	// Locations data_array Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis z except start and end.
	Locations interface{} `json:"locations,omitempty"`

	// Locationssrc string Sets the source reference on Chart Studio Cloud for  locations .
	Locationssrc String `json:"locationssrc,omitempty"`

	// Show boolean Determines whether or not slice planes about the z dimension are drawn.
	Show Bool `json:"show,omitempty"`
}

type LayoutColoraxisColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat LayoutColoraxisColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode LayoutColoraxisColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent LayoutColoraxisColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix LayoutColoraxisColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix LayoutColoraxisColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode LayoutColoraxisColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *LayoutColoraxisColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops LayoutColoraxisColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition LayoutColoraxisColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode LayoutColoraxisColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks LayoutColoraxisColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *LayoutColoraxisColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor LayoutColoraxisColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor LayoutColoraxisColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type LayoutGeoCenter struct {

	// Lat number Sets the latitude of the map's center. For all projection types, the map's latitude center lies at the middle of the latitude range by default.
	Lat float64 `json:"lat,omitempty"`

	// Lon number Sets the longitude of the map's center. By default, the map's longitude center lies at the middle of the longitude range for scoped projection and above `projection.rotation.lon` otherwise.
	Lon float64 `json:"lon,omitempty"`
}

type LayoutGeoDomain struct {

	// Column integer If there is a layout grid, use the domain for this column in the grid for this geo subplot . Note that geo subplots are constrained by domain. In general, when `projection.scale` is set to 1. a map will fit either its x or y domain, but not both.
	Column int64 `json:"column,omitempty"`

	// Row integer If there is a layout grid, use the domain for this row in the grid for this geo subplot . Note that geo subplots are constrained by domain. In general, when `projection.scale` is set to 1. a map will fit either its x or y domain, but not both.
	Row int64 `json:"row,omitempty"`

	// X info_array Sets the horizontal domain of this geo subplot (in plot fraction). Note that geo subplots are constrained by domain. In general, when `projection.scale` is set to 1. a map will fit either its x or y domain, but not both.
	X interface{} `json:"x,omitempty"`

	// Y info_array Sets the vertical domain of this geo subplot (in plot fraction). Note that geo subplots are constrained by domain. In general, when `projection.scale` is set to 1. a map will fit either its x or y domain, but not both.
	Y interface{} `json:"y,omitempty"`
}

type LayoutGeoLataxis struct {

	// Dtick number Sets the graticule's longitude/latitude tick step.
	Dtick float64 `json:"dtick,omitempty"`

	// Gridcolor color Sets the graticule's stroke color.
	Gridcolor String `json:"gridcolor,omitempty"`

	// Gridwidth number Sets the graticule's stroke width (in px).
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Range info_array Sets the range of this axis (in degrees), sets the map's clipped coordinates.
	Range interface{} `json:"range,omitempty"`

	// Showgrid boolean Sets whether or not graticule are shown on the map.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Tick0 number Sets the graticule's starting tick longitude/latitude.
	Tick0 float64 `json:"tick0,omitempty"`
}

type LayoutGeoLonaxis struct {

	// Dtick number Sets the graticule's longitude/latitude tick step.
	Dtick float64 `json:"dtick,omitempty"`

	// Gridcolor color Sets the graticule's stroke color.
	Gridcolor String `json:"gridcolor,omitempty"`

	// Gridwidth number Sets the graticule's stroke width (in px).
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Range info_array Sets the range of this axis (in degrees), sets the map's clipped coordinates.
	Range interface{} `json:"range,omitempty"`

	// Showgrid boolean Sets whether or not graticule are shown on the map.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Tick0 number Sets the graticule's starting tick longitude/latitude.
	Tick0 float64 `json:"tick0,omitempty"`
}

type LayoutGeoProjection struct {

	// Parallels info_array For conic projection types only. Sets the parallels (tangent, secant) where the cone intersects the sphere.
	Parallels interface{} `json:"parallels,omitempty"`

	// Rotation <no value> <no value>
	Rotation *LayoutGeoProjectionRotation `json:"rotation,omitempty"`

	// Scale number Zooms in or out on the map view. A scale of *1* corresponds to the largest zoom level that fits the map's lon and lat ranges.
	Scale float64 `json:"scale,omitempty"`

	// Type enumerated Sets the projection type.
	Type LayoutGeoProjectionType `json:"type,omitempty"`
}

type LayoutGridDomain struct {

	// X info_array Sets the horizontal domain of this grid subplot (in plot fraction). The first and last cells end exactly at the domain edges, with no grout around the edges.
	X interface{} `json:"x,omitempty"`

	// Y info_array Sets the vertical domain of this grid subplot (in plot fraction). The first and last cells end exactly at the domain edges, with no grout around the edges.
	Y interface{} `json:"y,omitempty"`
}

type LayoutHoverlabelFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type LayoutLegendFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type LayoutLegendTitle struct {

	// Font <no value> Sets this legend's title font.
	Font *LayoutLegendTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of legend's title with respect to the legend items. Defaulted to *top* with `orientation` is *h*. Defaulted to *left* with `orientation` is *v*. The *top left* options could be used to expand legend area in both x and y sides.
	Side LayoutLegendTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the legend.
	Text String `json:"text,omitempty"`
}

type LayoutMapboxCenter struct {

	// Lat number Sets the latitude of the center of the map (in degrees North).
	Lat float64 `json:"lat,omitempty"`

	// Lon number Sets the longitude of the center of the map (in degrees East).
	Lon float64 `json:"lon,omitempty"`
}

type LayoutMapboxDomain struct {

	// Column integer If there is a layout grid, use the domain for this column in the grid for this mapbox subplot .
	Column int64 `json:"column,omitempty"`

	// Row integer If there is a layout grid, use the domain for this row in the grid for this mapbox subplot .
	Row int64 `json:"row,omitempty"`

	// X info_array Sets the horizontal domain of this mapbox subplot (in plot fraction).
	X interface{} `json:"x,omitempty"`

	// Y info_array Sets the vertical domain of this mapbox subplot (in plot fraction).
	Y interface{} `json:"y,omitempty"`
}

// LayoutMapboxLayers It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// layer
//      below
//      circle
//      color
//      coordinates
//      editType
//      fill
//      line
//      maxzoom
//      minzoom
//      name
//      opacity
//      role
//      source
//      sourceattribution
//      sourcelayer
//      sourcetype
//      symbol
//      templateitemname
//      type
//      visible
type LayoutMapboxLayers interface{}

type LayoutNewshapeLine struct {

	// Color color Sets the line color. By default uses either dark grey or white to increase contrast with background color.
	Color String `json:"color,omitempty"`

	// Dash string Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Dash String `json:"dash,omitempty"`

	// Width number Sets the line width (in px).
	Width float64 `json:"width,omitempty"`
}

type LayoutPolarAngularaxis struct {

	// Autotypenumbers enumerated Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
	Autotypenumbers LayoutPolarAngularaxisAutotypenumbers `json:"autotypenumbers,omitempty"`

	// Categoryarray data_array Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
	Categoryarray interface{} `json:"categoryarray,omitempty"`

	// Categoryarraysrc string Sets the source reference on Chart Studio Cloud for  categoryarray .
	Categoryarraysrc String `json:"categoryarraysrc,omitempty"`

	// Categoryorder enumerated Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.
	Categoryorder LayoutPolarAngularaxisCategoryorder `json:"categoryorder,omitempty"`

	// Color color Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	Color String `json:"color,omitempty"`

	// Direction enumerated Sets the direction corresponding to positive angles.
	Direction LayoutPolarAngularaxisDirection `json:"direction,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat LayoutPolarAngularaxisExponentformat `json:"exponentformat,omitempty"`

	// Gridcolor color Sets the color of the grid lines.
	Gridcolor String `json:"gridcolor,omitempty"`

	// Gridwidth number Sets the width (in px) of the grid lines.
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Hoverformat string Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Hoverformat String `json:"hoverformat,omitempty"`

	// Layer enumerated Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
	Layer LayoutPolarAngularaxisLayer `json:"layer,omitempty"`

	// Linecolor color Sets the axis line color.
	Linecolor String `json:"linecolor,omitempty"`

	// Linewidth number Sets the width (in px) of the axis line.
	Linewidth float64 `json:"linewidth,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Period number Set the angular period. Has an effect only when `angularaxis.type` is *category*.
	Period float64 `json:"period,omitempty"`

	// Rotation angle Sets that start position (in degrees) of the angular axis By default, polar subplots with `direction` set to *counterclockwise* get a `rotation` of *0* which corresponds to due East (like what mathematicians prefer). In turn, polar with `direction` set to *clockwise* get a rotation of *90* which corresponds to due North (like on a compass),
	Rotation float64 `json:"rotation,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent LayoutPolarAngularaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid boolean Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Showline boolean Determines whether or not a line bounding this axis is drawn.
	Showline Bool `json:"showline,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix LayoutPolarAngularaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix LayoutPolarAngularaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Thetaunit enumerated Sets the format unit of the formatted *theta* values. Has an effect only when `angularaxis.type` is *linear*.
	Thetaunit LayoutPolarAngularaxisThetaunit `json:"thetaunit,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the tick font.
	Tickfont *LayoutPolarAngularaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops LayoutPolarAngularaxisTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode LayoutPolarAngularaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks LayoutPolarAngularaxisTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Type enumerated Sets the angular axis type. If *linear*, set `thetaunit` to determine the unit in which axis value are shown. If *category, use `period` to set the number of integer coordinates around polar axis.
	Type LayoutPolarAngularaxisType `json:"type,omitempty"`

	// Uirevision any Controls persistence of user-driven changes in axis `rotation`. Defaults to `polar<N>.uirevision`.
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Visible boolean A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false
	Visible Bool `json:"visible,omitempty"`
}

type LayoutPolarDomain struct {

	// Column integer If there is a layout grid, use the domain for this column in the grid for this polar subplot .
	Column int64 `json:"column,omitempty"`

	// Row integer If there is a layout grid, use the domain for this row in the grid for this polar subplot .
	Row int64 `json:"row,omitempty"`

	// X info_array Sets the horizontal domain of this polar subplot (in plot fraction).
	X interface{} `json:"x,omitempty"`

	// Y info_array Sets the vertical domain of this polar subplot (in plot fraction).
	Y interface{} `json:"y,omitempty"`
}

type LayoutPolarRadialaxis struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Angle angle Sets the angle (in degrees) from which the radial axis is drawn. Note that by default, radial axis line on the theta=0 line corresponds to a line pointing right (like what mathematicians prefer). Defaults to the first `polar.sector` angle.
	Angle float64 `json:"angle,omitempty"`

	// Autorange enumerated Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.
	Autorange LayoutPolarRadialaxisAutorange `json:"autorange,omitempty"`

	// Autotypenumbers enumerated Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
	Autotypenumbers LayoutPolarRadialaxisAutotypenumbers `json:"autotypenumbers,omitempty"`

	// Calendar enumerated Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
	Calendar LayoutPolarRadialaxisCalendar `json:"calendar,omitempty"`

	// Categoryarray data_array Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
	Categoryarray interface{} `json:"categoryarray,omitempty"`

	// Categoryarraysrc string Sets the source reference on Chart Studio Cloud for  categoryarray .
	Categoryarraysrc String `json:"categoryarraysrc,omitempty"`

	// Categoryorder enumerated Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.
	Categoryorder LayoutPolarRadialaxisCategoryorder `json:"categoryorder,omitempty"`

	// Color color Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	Color String `json:"color,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat LayoutPolarRadialaxisExponentformat `json:"exponentformat,omitempty"`

	// Gridcolor color Sets the color of the grid lines.
	Gridcolor String `json:"gridcolor,omitempty"`

	// Gridwidth number Sets the width (in px) of the grid lines.
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Hoverformat string Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Hoverformat String `json:"hoverformat,omitempty"`

	// Layer enumerated Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
	Layer LayoutPolarRadialaxisLayer `json:"layer,omitempty"`

	// Linecolor color Sets the axis line color.
	Linecolor String `json:"linecolor,omitempty"`

	// Linewidth number Sets the width (in px) of the axis line.
	Linewidth float64 `json:"linewidth,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Range info_array Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.
	Range interface{} `json:"range,omitempty"`

	// Rangemode enumerated If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. If *normal*, the range is computed in relation to the extrema of the input data (same behavior as for cartesian axes).
	Rangemode LayoutPolarRadialaxisRangemode `json:"rangemode,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent LayoutPolarRadialaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid boolean Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Showline boolean Determines whether or not a line bounding this axis is drawn.
	Showline Bool `json:"showline,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix LayoutPolarRadialaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix LayoutPolarRadialaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Side enumerated Determines on which side of radial axis line the tick and tick labels appear.
	Side LayoutPolarRadialaxisSide `json:"side,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the tick font.
	Tickfont *LayoutPolarRadialaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops LayoutPolarRadialaxisTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode LayoutPolarRadialaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks LayoutPolarRadialaxisTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *LayoutPolarRadialaxisTitle `json:"title,omitempty"`

	// Type enumerated Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
	Type LayoutPolarRadialaxisType `json:"type,omitempty"`

	// Uirevision any Controls persistence of user-driven changes in axis `range`, `autorange`, `angle`, and `title` if in `editable: true` configuration. Defaults to `polar<N>.uirevision`.
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Visible boolean A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false
	Visible Bool `json:"visible,omitempty"`
}

// LayoutSceneAnnotations It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// annotation
//      align
//      arrowcolor
//      arrowhead
//      arrowside
//      arrowsize
//      arrowwidth
//      ax
//      ay
//      bgcolor
//      bordercolor
//      borderpad
//      borderwidth
//      captureevents
//      editType
//      font
//      height
//      hoverlabel
//      hovertext
//      name
//      opacity
//      role
//      showarrow
//      standoff
//      startarrowhead
//      startarrowsize
//      startstandoff
//      templateitemname
//      text
//      textangle
//      valign
//      visible
//      width
//      x
//      xanchor
//      xshift
//      y
//      yanchor
//      yshift
//      z
type LayoutSceneAnnotations interface{}

type LayoutSceneAspectratio struct {

	// ImpliedEdits <no value> <no value>
	ImpliedEdits *LayoutSceneAspectratioImpliededits `json:"impliedEdits,omitempty"`

	// X number <no value>
	X float64 `json:"x,omitempty"`

	// Y number <no value>
	Y float64 `json:"y,omitempty"`

	// Z number <no value>
	Z float64 `json:"z,omitempty"`
}

type LayoutSceneCamera struct {

	// Center <no value> Sets the (x,y,z) components of the 'center' camera vector This vector determines the translation (x,y,z) space about the center of this scene. By default, there is no such translation.
	Center *LayoutSceneCameraCenter `json:"center,omitempty"`

	// Eye <no value> Sets the (x,y,z) components of the 'eye' camera vector. This vector determines the view point about the origin of this scene.
	Eye *LayoutSceneCameraEye `json:"eye,omitempty"`

	// Projection <no value> <no value>
	Projection *LayoutSceneCameraProjection `json:"projection,omitempty"`

	// Up <no value> Sets the (x,y,z) components of the 'up' camera vector. This vector determines the up direction of this scene with respect to the page. The default is *{x: 0, y: 0, z: 1}* which means that the z axis points up.
	Up *LayoutSceneCameraUp `json:"up,omitempty"`
}

type LayoutSceneDomain struct {

	// Column integer If there is a layout grid, use the domain for this column in the grid for this scene subplot .
	Column int64 `json:"column,omitempty"`

	// Row integer If there is a layout grid, use the domain for this row in the grid for this scene subplot .
	Row int64 `json:"row,omitempty"`

	// X info_array Sets the horizontal domain of this scene subplot (in plot fraction).
	X interface{} `json:"x,omitempty"`

	// Y info_array Sets the vertical domain of this scene subplot (in plot fraction).
	Y interface{} `json:"y,omitempty"`
}

type LayoutSceneXaxis struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Autorange enumerated Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.
	Autorange LayoutSceneXaxisAutorange `json:"autorange,omitempty"`

	// Autotypenumbers enumerated Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
	Autotypenumbers LayoutSceneXaxisAutotypenumbers `json:"autotypenumbers,omitempty"`

	// Backgroundcolor color Sets the background color of this axis' wall.
	Backgroundcolor String `json:"backgroundcolor,omitempty"`

	// Calendar enumerated Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
	Calendar LayoutSceneXaxisCalendar `json:"calendar,omitempty"`

	// Categoryarray data_array Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
	Categoryarray interface{} `json:"categoryarray,omitempty"`

	// Categoryarraysrc string Sets the source reference on Chart Studio Cloud for  categoryarray .
	Categoryarraysrc String `json:"categoryarraysrc,omitempty"`

	// Categoryorder enumerated Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.
	Categoryorder LayoutSceneXaxisCategoryorder `json:"categoryorder,omitempty"`

	// Color color Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	Color String `json:"color,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat LayoutSceneXaxisExponentformat `json:"exponentformat,omitempty"`

	// Gridcolor color Sets the color of the grid lines.
	Gridcolor String `json:"gridcolor,omitempty"`

	// Gridwidth number Sets the width (in px) of the grid lines.
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Hoverformat string Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Hoverformat String `json:"hoverformat,omitempty"`

	// Linecolor color Sets the axis line color.
	Linecolor String `json:"linecolor,omitempty"`

	// Linewidth number Sets the width (in px) of the axis line.
	Linewidth float64 `json:"linewidth,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Mirror enumerated Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.
	Mirror LayoutSceneXaxisMirror `json:"mirror,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Range info_array Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.
	Range interface{} `json:"range,omitempty"`

	// Rangemode enumerated If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.
	Rangemode LayoutSceneXaxisRangemode `json:"rangemode,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showaxeslabels boolean Sets whether or not this axis is labeled
	Showaxeslabels Bool `json:"showaxeslabels,omitempty"`

	// Showbackground boolean Sets whether or not this axis' wall has a background color.
	Showbackground Bool `json:"showbackground,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent LayoutSceneXaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid boolean Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Showline boolean Determines whether or not a line bounding this axis is drawn.
	Showline Bool `json:"showline,omitempty"`

	// Showspikes boolean Sets whether or not spikes starting from data points to this axis' wall are shown on hover.
	Showspikes Bool `json:"showspikes,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix LayoutSceneXaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix LayoutSceneXaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Spikecolor color Sets the color of the spikes.
	Spikecolor String `json:"spikecolor,omitempty"`

	// Spikesides boolean Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.
	Spikesides Bool `json:"spikesides,omitempty"`

	// Spikethickness number Sets the thickness (in px) of the spikes.
	Spikethickness float64 `json:"spikethickness,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the tick font.
	Tickfont *LayoutSceneXaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops LayoutSceneXaxisTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode LayoutSceneXaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks LayoutSceneXaxisTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *LayoutSceneXaxisTitle `json:"title,omitempty"`

	// Type enumerated Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
	Type LayoutSceneXaxisType `json:"type,omitempty"`

	// Visible boolean A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false
	Visible Bool `json:"visible,omitempty"`

	// Zeroline boolean Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.
	Zeroline Bool `json:"zeroline,omitempty"`

	// Zerolinecolor color Sets the line color of the zero line.
	Zerolinecolor String `json:"zerolinecolor,omitempty"`

	// Zerolinewidth number Sets the width (in px) of the zero line.
	Zerolinewidth float64 `json:"zerolinewidth,omitempty"`
}

type LayoutSceneYaxis struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Autorange enumerated Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.
	Autorange LayoutSceneYaxisAutorange `json:"autorange,omitempty"`

	// Autotypenumbers enumerated Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
	Autotypenumbers LayoutSceneYaxisAutotypenumbers `json:"autotypenumbers,omitempty"`

	// Backgroundcolor color Sets the background color of this axis' wall.
	Backgroundcolor String `json:"backgroundcolor,omitempty"`

	// Calendar enumerated Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
	Calendar LayoutSceneYaxisCalendar `json:"calendar,omitempty"`

	// Categoryarray data_array Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
	Categoryarray interface{} `json:"categoryarray,omitempty"`

	// Categoryarraysrc string Sets the source reference on Chart Studio Cloud for  categoryarray .
	Categoryarraysrc String `json:"categoryarraysrc,omitempty"`

	// Categoryorder enumerated Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.
	Categoryorder LayoutSceneYaxisCategoryorder `json:"categoryorder,omitempty"`

	// Color color Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	Color String `json:"color,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat LayoutSceneYaxisExponentformat `json:"exponentformat,omitempty"`

	// Gridcolor color Sets the color of the grid lines.
	Gridcolor String `json:"gridcolor,omitempty"`

	// Gridwidth number Sets the width (in px) of the grid lines.
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Hoverformat string Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Hoverformat String `json:"hoverformat,omitempty"`

	// Linecolor color Sets the axis line color.
	Linecolor String `json:"linecolor,omitempty"`

	// Linewidth number Sets the width (in px) of the axis line.
	Linewidth float64 `json:"linewidth,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Mirror enumerated Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.
	Mirror LayoutSceneYaxisMirror `json:"mirror,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Range info_array Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.
	Range interface{} `json:"range,omitempty"`

	// Rangemode enumerated If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.
	Rangemode LayoutSceneYaxisRangemode `json:"rangemode,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showaxeslabels boolean Sets whether or not this axis is labeled
	Showaxeslabels Bool `json:"showaxeslabels,omitempty"`

	// Showbackground boolean Sets whether or not this axis' wall has a background color.
	Showbackground Bool `json:"showbackground,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent LayoutSceneYaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid boolean Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Showline boolean Determines whether or not a line bounding this axis is drawn.
	Showline Bool `json:"showline,omitempty"`

	// Showspikes boolean Sets whether or not spikes starting from data points to this axis' wall are shown on hover.
	Showspikes Bool `json:"showspikes,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix LayoutSceneYaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix LayoutSceneYaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Spikecolor color Sets the color of the spikes.
	Spikecolor String `json:"spikecolor,omitempty"`

	// Spikesides boolean Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.
	Spikesides Bool `json:"spikesides,omitempty"`

	// Spikethickness number Sets the thickness (in px) of the spikes.
	Spikethickness float64 `json:"spikethickness,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the tick font.
	Tickfont *LayoutSceneYaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops LayoutSceneYaxisTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode LayoutSceneYaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks LayoutSceneYaxisTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *LayoutSceneYaxisTitle `json:"title,omitempty"`

	// Type enumerated Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
	Type LayoutSceneYaxisType `json:"type,omitempty"`

	// Visible boolean A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false
	Visible Bool `json:"visible,omitempty"`

	// Zeroline boolean Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.
	Zeroline Bool `json:"zeroline,omitempty"`

	// Zerolinecolor color Sets the line color of the zero line.
	Zerolinecolor String `json:"zerolinecolor,omitempty"`

	// Zerolinewidth number Sets the width (in px) of the zero line.
	Zerolinewidth float64 `json:"zerolinewidth,omitempty"`
}

type LayoutSceneZaxis struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Autorange enumerated Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.
	Autorange LayoutSceneZaxisAutorange `json:"autorange,omitempty"`

	// Autotypenumbers enumerated Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
	Autotypenumbers LayoutSceneZaxisAutotypenumbers `json:"autotypenumbers,omitempty"`

	// Backgroundcolor color Sets the background color of this axis' wall.
	Backgroundcolor String `json:"backgroundcolor,omitempty"`

	// Calendar enumerated Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
	Calendar LayoutSceneZaxisCalendar `json:"calendar,omitempty"`

	// Categoryarray data_array Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
	Categoryarray interface{} `json:"categoryarray,omitempty"`

	// Categoryarraysrc string Sets the source reference on Chart Studio Cloud for  categoryarray .
	Categoryarraysrc String `json:"categoryarraysrc,omitempty"`

	// Categoryorder enumerated Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.
	Categoryorder LayoutSceneZaxisCategoryorder `json:"categoryorder,omitempty"`

	// Color color Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	Color String `json:"color,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat LayoutSceneZaxisExponentformat `json:"exponentformat,omitempty"`

	// Gridcolor color Sets the color of the grid lines.
	Gridcolor String `json:"gridcolor,omitempty"`

	// Gridwidth number Sets the width (in px) of the grid lines.
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Hoverformat string Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Hoverformat String `json:"hoverformat,omitempty"`

	// Linecolor color Sets the axis line color.
	Linecolor String `json:"linecolor,omitempty"`

	// Linewidth number Sets the width (in px) of the axis line.
	Linewidth float64 `json:"linewidth,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Mirror enumerated Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.
	Mirror LayoutSceneZaxisMirror `json:"mirror,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Range info_array Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.
	Range interface{} `json:"range,omitempty"`

	// Rangemode enumerated If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.
	Rangemode LayoutSceneZaxisRangemode `json:"rangemode,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showaxeslabels boolean Sets whether or not this axis is labeled
	Showaxeslabels Bool `json:"showaxeslabels,omitempty"`

	// Showbackground boolean Sets whether or not this axis' wall has a background color.
	Showbackground Bool `json:"showbackground,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent LayoutSceneZaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid boolean Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Showline boolean Determines whether or not a line bounding this axis is drawn.
	Showline Bool `json:"showline,omitempty"`

	// Showspikes boolean Sets whether or not spikes starting from data points to this axis' wall are shown on hover.
	Showspikes Bool `json:"showspikes,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix LayoutSceneZaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix LayoutSceneZaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Spikecolor color Sets the color of the spikes.
	Spikecolor String `json:"spikecolor,omitempty"`

	// Spikesides boolean Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.
	Spikesides Bool `json:"spikesides,omitempty"`

	// Spikethickness number Sets the thickness (in px) of the spikes.
	Spikethickness float64 `json:"spikethickness,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the tick font.
	Tickfont *LayoutSceneZaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops LayoutSceneZaxisTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode LayoutSceneZaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks LayoutSceneZaxisTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *LayoutSceneZaxisTitle `json:"title,omitempty"`

	// Type enumerated Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
	Type LayoutSceneZaxisType `json:"type,omitempty"`

	// Visible boolean A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false
	Visible Bool `json:"visible,omitempty"`

	// Zeroline boolean Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.
	Zeroline Bool `json:"zeroline,omitempty"`

	// Zerolinecolor color Sets the line color of the zero line.
	Zerolinecolor String `json:"zerolinecolor,omitempty"`

	// Zerolinewidth number Sets the width (in px) of the zero line.
	Zerolinewidth float64 `json:"zerolinewidth,omitempty"`
}

type LayoutTernaryAaxis struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Color color Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	Color String `json:"color,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat LayoutTernaryAaxisExponentformat `json:"exponentformat,omitempty"`

	// Gridcolor color Sets the color of the grid lines.
	Gridcolor String `json:"gridcolor,omitempty"`

	// Gridwidth number Sets the width (in px) of the grid lines.
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Hoverformat string Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Hoverformat String `json:"hoverformat,omitempty"`

	// Layer enumerated Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
	Layer LayoutTernaryAaxisLayer `json:"layer,omitempty"`

	// Linecolor color Sets the axis line color.
	Linecolor String `json:"linecolor,omitempty"`

	// Linewidth number Sets the width (in px) of the axis line.
	Linewidth float64 `json:"linewidth,omitempty"`

	// Min number The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.
	Min float64 `json:"min,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent LayoutTernaryAaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid boolean Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Showline boolean Determines whether or not a line bounding this axis is drawn.
	Showline Bool `json:"showline,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix LayoutTernaryAaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix LayoutTernaryAaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the tick font.
	Tickfont *LayoutTernaryAaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops LayoutTernaryAaxisTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode LayoutTernaryAaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks LayoutTernaryAaxisTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *LayoutTernaryAaxisTitle `json:"title,omitempty"`

	// Uirevision any Controls persistence of user-driven changes in axis `min`, and `title` if in `editable: true` configuration. Defaults to `ternary<N>.uirevision`.
	Uirevision interface{} `json:"uirevision,omitempty"`
}

type LayoutTernaryBaxis struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Color color Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	Color String `json:"color,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat LayoutTernaryBaxisExponentformat `json:"exponentformat,omitempty"`

	// Gridcolor color Sets the color of the grid lines.
	Gridcolor String `json:"gridcolor,omitempty"`

	// Gridwidth number Sets the width (in px) of the grid lines.
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Hoverformat string Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Hoverformat String `json:"hoverformat,omitempty"`

	// Layer enumerated Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
	Layer LayoutTernaryBaxisLayer `json:"layer,omitempty"`

	// Linecolor color Sets the axis line color.
	Linecolor String `json:"linecolor,omitempty"`

	// Linewidth number Sets the width (in px) of the axis line.
	Linewidth float64 `json:"linewidth,omitempty"`

	// Min number The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.
	Min float64 `json:"min,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent LayoutTernaryBaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid boolean Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Showline boolean Determines whether or not a line bounding this axis is drawn.
	Showline Bool `json:"showline,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix LayoutTernaryBaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix LayoutTernaryBaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the tick font.
	Tickfont *LayoutTernaryBaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops LayoutTernaryBaxisTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode LayoutTernaryBaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks LayoutTernaryBaxisTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *LayoutTernaryBaxisTitle `json:"title,omitempty"`

	// Uirevision any Controls persistence of user-driven changes in axis `min`, and `title` if in `editable: true` configuration. Defaults to `ternary<N>.uirevision`.
	Uirevision interface{} `json:"uirevision,omitempty"`
}

type LayoutTernaryCaxis struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Color color Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	Color String `json:"color,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat LayoutTernaryCaxisExponentformat `json:"exponentformat,omitempty"`

	// Gridcolor color Sets the color of the grid lines.
	Gridcolor String `json:"gridcolor,omitempty"`

	// Gridwidth number Sets the width (in px) of the grid lines.
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Hoverformat string Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Hoverformat String `json:"hoverformat,omitempty"`

	// Layer enumerated Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
	Layer LayoutTernaryCaxisLayer `json:"layer,omitempty"`

	// Linecolor color Sets the axis line color.
	Linecolor String `json:"linecolor,omitempty"`

	// Linewidth number Sets the width (in px) of the axis line.
	Linewidth float64 `json:"linewidth,omitempty"`

	// Min number The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.
	Min float64 `json:"min,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent LayoutTernaryCaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid boolean Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Showline boolean Determines whether or not a line bounding this axis is drawn.
	Showline Bool `json:"showline,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix LayoutTernaryCaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix LayoutTernaryCaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the tick font.
	Tickfont *LayoutTernaryCaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops LayoutTernaryCaxisTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode LayoutTernaryCaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks LayoutTernaryCaxisTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *LayoutTernaryCaxisTitle `json:"title,omitempty"`

	// Uirevision any Controls persistence of user-driven changes in axis `min`, and `title` if in `editable: true` configuration. Defaults to `ternary<N>.uirevision`.
	Uirevision interface{} `json:"uirevision,omitempty"`
}

type LayoutTernaryDomain struct {

	// Column integer If there is a layout grid, use the domain for this column in the grid for this ternary subplot .
	Column int64 `json:"column,omitempty"`

	// Row integer If there is a layout grid, use the domain for this row in the grid for this ternary subplot .
	Row int64 `json:"row,omitempty"`

	// X info_array Sets the horizontal domain of this ternary subplot (in plot fraction).
	X interface{} `json:"x,omitempty"`

	// Y info_array Sets the vertical domain of this ternary subplot (in plot fraction).
	Y interface{} `json:"y,omitempty"`
}

type LayoutTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type LayoutTitlePad struct {

	// B number The amount of padding (in px) along the bottom of the component.
	B float64 `json:"b,omitempty"`

	// L number The amount of padding (in px) on the left side of the component.
	L float64 `json:"l,omitempty"`

	// R number The amount of padding (in px) on the right side of the component.
	R float64 `json:"r,omitempty"`

	// T number The amount of padding (in px) along the top of the component.
	T float64 `json:"t,omitempty"`
}

// LayoutXaxisRangebreaks It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// rangebreak
//      bounds
//      dvalue
//      editType
//      enabled
//      name
//      pattern
//      role
//      templateitemname
//      values
type LayoutXaxisRangebreaks interface{}

type LayoutXaxisRangeselector struct {

	// Activecolor color Sets the background color of the active range selector button.
	Activecolor String `json:"activecolor,omitempty"`

	// Bgcolor color Sets the background color of the range selector buttons.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the color of the border enclosing the range selector.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) of the border enclosing the range selector.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Buttons <no value> <no value>
	Buttons LayoutXaxisRangeselectorButtons `json:"buttons,omitempty"`

	// Font <no value> Sets the font of the range selector button text.
	Font *LayoutXaxisRangeselectorFont `json:"font,omitempty"`

	// Visible boolean Determines whether or not this range selector is visible. Note that range selectors are only available for x axes of `type` set to or auto-typed to *date*.
	Visible Bool `json:"visible,omitempty"`

	// X number Sets the x position (in normalized coordinates) of the range selector.
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets the range selector's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the range selector.
	Xanchor LayoutXaxisRangeselectorXanchor `json:"xanchor,omitempty"`

	// Y number Sets the y position (in normalized coordinates) of the range selector.
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets the range selector's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the range selector.
	Yanchor LayoutXaxisRangeselectorYanchor `json:"yanchor,omitempty"`
}

type LayoutXaxisRangeslider struct {

	// Autorange boolean Determines whether or not the range slider range is computed in relation to the input data. If `range` is provided, then `autorange` is set to *false*.
	Autorange Bool `json:"autorange,omitempty"`

	// Bgcolor color Sets the background color of the range slider.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the border color of the range slider.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth integer Sets the border width of the range slider.
	Borderwidth int64 `json:"borderwidth,omitempty"`

	// Range info_array Sets the range of the range slider. If not set, defaults to the full xaxis range. If the axis `type` is *log*, then you must take the log of your desired range. If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.
	Range interface{} `json:"range,omitempty"`

	// Thickness number The height of the range slider as a fraction of the total plot area height.
	Thickness float64 `json:"thickness,omitempty"`

	// Visible boolean Determines whether or not the range slider will be visible. If visible, perpendicular axes will be set to `fixedrange`
	Visible Bool `json:"visible,omitempty"`

	// Yaxis <no value> <no value>
	Yaxis *LayoutXaxisRangesliderYaxis `json:"yaxis,omitempty"`
}

type LayoutXaxisTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// LayoutXaxisTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type LayoutXaxisTickformatstops interface{}

type LayoutXaxisTitle struct {

	// Font <no value> Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
	Font *LayoutXaxisTitleFont `json:"font,omitempty"`

	// Standoff number Sets the standoff distance (in px) between the axis labels and the title text The default value is a function of the axis tick labels, the title `font.size` and the axis `linewidth`. Note that the axis title position is always constrained within the margins, so the actual standoff distance is always less than the set or default value. By setting `standoff` and turning on `automargin`, plotly.js will push the margins to fit the axis title at given standoff distance.
	Standoff float64 `json:"standoff,omitempty"`

	// Text string Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

// LayoutYaxisRangebreaks It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// rangebreak
//      bounds
//      dvalue
//      editType
//      enabled
//      name
//      pattern
//      role
//      templateitemname
//      values
type LayoutYaxisRangebreaks interface{}

type LayoutYaxisTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// LayoutYaxisTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type LayoutYaxisTickformatstops interface{}

type LayoutYaxisTitle struct {

	// Font <no value> Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
	Font *LayoutYaxisTitleFont `json:"font,omitempty"`

	// Standoff number Sets the standoff distance (in px) between the axis labels and the title text The default value is a function of the axis tick labels, the title `font.size` and the axis `linewidth`. Note that the axis title position is always constrained within the margins, so the actual standoff distance is always less than the set or default value. By setting `standoff` and turning on `automargin`, plotly.js will push the margins to fit the axis title at given standoff distance.
	Standoff float64 `json:"standoff,omitempty"`

	// Text string Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type Mesh3dColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// Mesh3dColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type Mesh3dColorbarTickformatstops interface{}

type Mesh3dColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *Mesh3dColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side Mesh3dColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type Mesh3dHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type OhlcDecreasingLine struct {

	// Color color Sets the line color.
	Color String `json:"color,omitempty"`

	// Dash string Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Dash String `json:"dash,omitempty"`

	// Width number Sets the line width (in px).
	Width float64 `json:"width,omitempty"`
}

type OhlcHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type OhlcIncreasingLine struct {

	// Color color Sets the line color.
	Color String `json:"color,omitempty"`

	// Dash string Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Dash String `json:"dash,omitempty"`

	// Width number Sets the line width (in px).
	Width float64 `json:"width,omitempty"`
}

type ParcatsLineColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat ParcatsLineColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode ParcatsLineColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent ParcatsLineColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix ParcatsLineColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix ParcatsLineColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode ParcatsLineColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *ParcatsLineColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops ParcatsLineColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition ParcatsLineColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode ParcatsLineColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks ParcatsLineColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *ParcatsLineColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor ParcatsLineColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor ParcatsLineColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type ParcoordsLineColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat ParcoordsLineColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode ParcoordsLineColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent ParcoordsLineColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix ParcoordsLineColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix ParcoordsLineColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode ParcoordsLineColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *ParcoordsLineColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops ParcoordsLineColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition ParcoordsLineColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode ParcoordsLineColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks ParcoordsLineColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *ParcoordsLineColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor ParcoordsLineColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor ParcoordsLineColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type PieHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type PieMarkerLine struct {

	// Color color Sets the color of the line enclosing each sector.
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Width number Sets the width (in px) of the line enclosing each sector.
	Width interface{} `json:"width,omitempty"`

	// Widthsrc string Sets the source reference on Chart Studio Cloud for  width .
	Widthsrc String `json:"widthsrc,omitempty"`
}

type PieTitleFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type PointcloudHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type PointcloudMarkerBorder struct {

	// Arearatio number Specifies what fraction of the marker area is covered with the border.
	Arearatio float64 `json:"arearatio,omitempty"`

	// Color color Sets the stroke color. It accepts a specific color. If the color is not fully opaque and there are hundreds of thousands of points, it may cause slower zooming and panning.
	Color String `json:"color,omitempty"`
}

type SankeyHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

// SankeyLinkColorscales It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// concentrationscales
//      cmax
//      cmin
//      colorscale
//      editType
//      label
//      name
//      role
//      templateitemname
type SankeyLinkColorscales interface{}

type SankeyLinkHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align SankeyLinkHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *SankeyLinkHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type SankeyLinkLine struct {

	// Color color Sets the color of the `line` around each `link`.
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Width number Sets the width (in px) of the `line` around each `link`.
	Width interface{} `json:"width,omitempty"`

	// Widthsrc string Sets the source reference on Chart Studio Cloud for  width .
	Widthsrc String `json:"widthsrc,omitempty"`
}

type SankeyNodeHoverlabel struct {

	// Align enumerated Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align SankeyNodeHoverlabelAlign `json:"align,omitempty"`

	// Alignsrc string Sets the source reference on Chart Studio Cloud for  align .
	Alignsrc String `json:"alignsrc,omitempty"`

	// Bgcolor color Sets the background color of the hover labels for this trace
	Bgcolor interface{} `json:"bgcolor,omitempty"`

	// Bgcolorsrc string Sets the source reference on Chart Studio Cloud for  bgcolor .
	Bgcolorsrc String `json:"bgcolorsrc,omitempty"`

	// Bordercolor color Sets the border color of the hover labels for this trace.
	Bordercolor interface{} `json:"bordercolor,omitempty"`

	// Bordercolorsrc string Sets the source reference on Chart Studio Cloud for  bordercolor .
	Bordercolorsrc String `json:"bordercolorsrc,omitempty"`

	// Font <no value> Sets the font used in hover labels.
	Font *SankeyNodeHoverlabelFont `json:"font,omitempty"`

	// Namelength integer Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength interface{} `json:"namelength,omitempty"`

	// Namelengthsrc string Sets the source reference on Chart Studio Cloud for  namelength .
	Namelengthsrc String `json:"namelengthsrc,omitempty"`
}

type SankeyNodeLine struct {

	// Color color Sets the color of the `line` around each `node`.
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Width number Sets the width (in px) of the `line` around each `node`.
	Width interface{} `json:"width,omitempty"`

	// Widthsrc string Sets the source reference on Chart Studio Cloud for  width .
	Widthsrc String `json:"widthsrc,omitempty"`
}

type Scatter3dHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type Scatter3dLineColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat Scatter3dLineColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode Scatter3dLineColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent Scatter3dLineColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix Scatter3dLineColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix Scatter3dLineColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode Scatter3dLineColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *Scatter3dLineColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops Scatter3dLineColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition Scatter3dLineColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode Scatter3dLineColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks Scatter3dLineColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *Scatter3dLineColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor Scatter3dLineColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor Scatter3dLineColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type Scatter3dMarkerColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat Scatter3dMarkerColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode Scatter3dMarkerColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent Scatter3dMarkerColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix Scatter3dMarkerColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix Scatter3dMarkerColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode Scatter3dMarkerColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *Scatter3dMarkerColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops Scatter3dMarkerColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition Scatter3dMarkerColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode Scatter3dMarkerColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks Scatter3dMarkerColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *Scatter3dMarkerColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor Scatter3dMarkerColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor Scatter3dMarkerColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type Scatter3dMarkerLine struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Width number Sets the width (in px) of the lines bounding the marker points.
	Width float64 `json:"width,omitempty"`
}

type Scatter3dProjectionX struct {

	// Opacity number Sets the projection color.
	Opacity float64 `json:"opacity,omitempty"`

	// Scale number Sets the scale factor determining the size of the projection marker points.
	Scale float64 `json:"scale,omitempty"`

	// Show boolean Sets whether or not projections are shown along the x axis.
	Show Bool `json:"show,omitempty"`
}

type Scatter3dProjectionY struct {

	// Opacity number Sets the projection color.
	Opacity float64 `json:"opacity,omitempty"`

	// Scale number Sets the scale factor determining the size of the projection marker points.
	Scale float64 `json:"scale,omitempty"`

	// Show boolean Sets whether or not projections are shown along the y axis.
	Show Bool `json:"show,omitempty"`
}

type Scatter3dProjectionZ struct {

	// Opacity number Sets the projection color.
	Opacity float64 `json:"opacity,omitempty"`

	// Scale number Sets the scale factor determining the size of the projection marker points.
	Scale float64 `json:"scale,omitempty"`

	// Show boolean Sets whether or not projections are shown along the z axis.
	Show Bool `json:"show,omitempty"`
}

type ScatterHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type ScatterMarkerColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat ScatterMarkerColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode ScatterMarkerColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent ScatterMarkerColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix ScatterMarkerColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix ScatterMarkerColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode ScatterMarkerColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *ScatterMarkerColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops ScatterMarkerColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition ScatterMarkerColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode ScatterMarkerColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks ScatterMarkerColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *ScatterMarkerColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor ScatterMarkerColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor ScatterMarkerColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type ScatterMarkerGradient struct {

	// Color color Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Type enumerated Sets the type of gradient used to fill the markers
	Type ScatterMarkerGradientType `json:"type,omitempty"`

	// Typesrc string Sets the source reference on Chart Studio Cloud for  type .
	Typesrc String `json:"typesrc,omitempty"`
}

type ScatterMarkerLine struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Width number Sets the width (in px) of the lines bounding the marker points.
	Width interface{} `json:"width,omitempty"`

	// Widthsrc string Sets the source reference on Chart Studio Cloud for  width .
	Widthsrc String `json:"widthsrc,omitempty"`
}

type ScatterSelectedMarker struct {

	// Color color Sets the marker color of selected points.
	Color String `json:"color,omitempty"`

	// Opacity number Sets the marker opacity of selected points.
	Opacity float64 `json:"opacity,omitempty"`

	// Size number Sets the marker size of selected points.
	Size float64 `json:"size,omitempty"`
}

type ScatterSelectedTextfont struct {

	// Color color Sets the text font color of selected points.
	Color String `json:"color,omitempty"`
}

type ScatterUnselectedMarker struct {

	// Color color Sets the marker color of unselected points, applied only when a selection exists.
	Color String `json:"color,omitempty"`

	// Opacity number Sets the marker opacity of unselected points, applied only when a selection exists.
	Opacity float64 `json:"opacity,omitempty"`

	// Size number Sets the marker size of unselected points, applied only when a selection exists.
	Size float64 `json:"size,omitempty"`
}

type ScatterUnselectedTextfont struct {

	// Color color Sets the text font color of unselected points, applied only when a selection exists.
	Color String `json:"color,omitempty"`
}

type ScattercarpetHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type ScattercarpetMarkerColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat ScattercarpetMarkerColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode ScattercarpetMarkerColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent ScattercarpetMarkerColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix ScattercarpetMarkerColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix ScattercarpetMarkerColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode ScattercarpetMarkerColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *ScattercarpetMarkerColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops ScattercarpetMarkerColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition ScattercarpetMarkerColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode ScattercarpetMarkerColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks ScattercarpetMarkerColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *ScattercarpetMarkerColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor ScattercarpetMarkerColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor ScattercarpetMarkerColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type ScattercarpetMarkerGradient struct {

	// Color color Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Type enumerated Sets the type of gradient used to fill the markers
	Type ScattercarpetMarkerGradientType `json:"type,omitempty"`

	// Typesrc string Sets the source reference on Chart Studio Cloud for  type .
	Typesrc String `json:"typesrc,omitempty"`
}

type ScattercarpetMarkerLine struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Width number Sets the width (in px) of the lines bounding the marker points.
	Width interface{} `json:"width,omitempty"`

	// Widthsrc string Sets the source reference on Chart Studio Cloud for  width .
	Widthsrc String `json:"widthsrc,omitempty"`
}

type ScattercarpetSelectedMarker struct {

	// Color color Sets the marker color of selected points.
	Color String `json:"color,omitempty"`

	// Opacity number Sets the marker opacity of selected points.
	Opacity float64 `json:"opacity,omitempty"`

	// Size number Sets the marker size of selected points.
	Size float64 `json:"size,omitempty"`
}

type ScattercarpetSelectedTextfont struct {

	// Color color Sets the text font color of selected points.
	Color String `json:"color,omitempty"`
}

type ScattercarpetUnselectedMarker struct {

	// Color color Sets the marker color of unselected points, applied only when a selection exists.
	Color String `json:"color,omitempty"`

	// Opacity number Sets the marker opacity of unselected points, applied only when a selection exists.
	Opacity float64 `json:"opacity,omitempty"`

	// Size number Sets the marker size of unselected points, applied only when a selection exists.
	Size float64 `json:"size,omitempty"`
}

type ScattercarpetUnselectedTextfont struct {

	// Color color Sets the text font color of unselected points, applied only when a selection exists.
	Color String `json:"color,omitempty"`
}

type ScattergeoHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type ScattergeoMarkerColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat ScattergeoMarkerColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode ScattergeoMarkerColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent ScattergeoMarkerColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix ScattergeoMarkerColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix ScattergeoMarkerColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode ScattergeoMarkerColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *ScattergeoMarkerColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops ScattergeoMarkerColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition ScattergeoMarkerColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode ScattergeoMarkerColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks ScattergeoMarkerColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *ScattergeoMarkerColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor ScattergeoMarkerColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor ScattergeoMarkerColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type ScattergeoMarkerGradient struct {

	// Color color Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Type enumerated Sets the type of gradient used to fill the markers
	Type ScattergeoMarkerGradientType `json:"type,omitempty"`

	// Typesrc string Sets the source reference on Chart Studio Cloud for  type .
	Typesrc String `json:"typesrc,omitempty"`
}

type ScattergeoMarkerLine struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Width number Sets the width (in px) of the lines bounding the marker points.
	Width interface{} `json:"width,omitempty"`

	// Widthsrc string Sets the source reference on Chart Studio Cloud for  width .
	Widthsrc String `json:"widthsrc,omitempty"`
}

type ScattergeoSelectedMarker struct {

	// Color color Sets the marker color of selected points.
	Color String `json:"color,omitempty"`

	// Opacity number Sets the marker opacity of selected points.
	Opacity float64 `json:"opacity,omitempty"`

	// Size number Sets the marker size of selected points.
	Size float64 `json:"size,omitempty"`
}

type ScattergeoSelectedTextfont struct {

	// Color color Sets the text font color of selected points.
	Color String `json:"color,omitempty"`
}

type ScattergeoUnselectedMarker struct {

	// Color color Sets the marker color of unselected points, applied only when a selection exists.
	Color String `json:"color,omitempty"`

	// Opacity number Sets the marker opacity of unselected points, applied only when a selection exists.
	Opacity float64 `json:"opacity,omitempty"`

	// Size number Sets the marker size of unselected points, applied only when a selection exists.
	Size float64 `json:"size,omitempty"`
}

type ScattergeoUnselectedTextfont struct {

	// Color color Sets the text font color of unselected points, applied only when a selection exists.
	Color String `json:"color,omitempty"`
}

type ScatterglHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type ScatterglMarkerColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat ScatterglMarkerColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode ScatterglMarkerColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent ScatterglMarkerColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix ScatterglMarkerColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix ScatterglMarkerColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode ScatterglMarkerColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *ScatterglMarkerColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops ScatterglMarkerColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition ScatterglMarkerColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode ScatterglMarkerColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks ScatterglMarkerColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *ScatterglMarkerColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor ScatterglMarkerColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor ScatterglMarkerColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type ScatterglMarkerLine struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Width number Sets the width (in px) of the lines bounding the marker points.
	Width interface{} `json:"width,omitempty"`

	// Widthsrc string Sets the source reference on Chart Studio Cloud for  width .
	Widthsrc String `json:"widthsrc,omitempty"`
}

type ScatterglSelectedMarker struct {

	// Color color Sets the marker color of selected points.
	Color String `json:"color,omitempty"`

	// Opacity number Sets the marker opacity of selected points.
	Opacity float64 `json:"opacity,omitempty"`

	// Size number Sets the marker size of selected points.
	Size float64 `json:"size,omitempty"`
}

type ScatterglSelectedTextfont struct {

	// Color color Sets the text font color of selected points.
	Color String `json:"color,omitempty"`
}

type ScatterglUnselectedMarker struct {

	// Color color Sets the marker color of unselected points, applied only when a selection exists.
	Color String `json:"color,omitempty"`

	// Opacity number Sets the marker opacity of unselected points, applied only when a selection exists.
	Opacity float64 `json:"opacity,omitempty"`

	// Size number Sets the marker size of unselected points, applied only when a selection exists.
	Size float64 `json:"size,omitempty"`
}

type ScatterglUnselectedTextfont struct {

	// Color color Sets the text font color of unselected points, applied only when a selection exists.
	Color String `json:"color,omitempty"`
}

type ScattermapboxHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type ScattermapboxMarkerColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat ScattermapboxMarkerColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode ScattermapboxMarkerColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent ScattermapboxMarkerColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix ScattermapboxMarkerColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix ScattermapboxMarkerColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode ScattermapboxMarkerColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *ScattermapboxMarkerColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops ScattermapboxMarkerColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition ScattermapboxMarkerColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode ScattermapboxMarkerColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks ScattermapboxMarkerColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *ScattermapboxMarkerColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor ScattermapboxMarkerColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor ScattermapboxMarkerColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type ScattermapboxSelectedMarker struct {

	// Color color Sets the marker color of selected points.
	Color String `json:"color,omitempty"`

	// Opacity number Sets the marker opacity of selected points.
	Opacity float64 `json:"opacity,omitempty"`

	// Size number Sets the marker size of selected points.
	Size float64 `json:"size,omitempty"`
}

type ScattermapboxUnselectedMarker struct {

	// Color color Sets the marker color of unselected points, applied only when a selection exists.
	Color String `json:"color,omitempty"`

	// Opacity number Sets the marker opacity of unselected points, applied only when a selection exists.
	Opacity float64 `json:"opacity,omitempty"`

	// Size number Sets the marker size of unselected points, applied only when a selection exists.
	Size float64 `json:"size,omitempty"`
}

type ScatterpolarHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type ScatterpolarMarkerColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat ScatterpolarMarkerColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode ScatterpolarMarkerColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent ScatterpolarMarkerColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix ScatterpolarMarkerColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix ScatterpolarMarkerColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode ScatterpolarMarkerColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *ScatterpolarMarkerColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops ScatterpolarMarkerColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition ScatterpolarMarkerColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode ScatterpolarMarkerColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks ScatterpolarMarkerColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *ScatterpolarMarkerColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor ScatterpolarMarkerColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor ScatterpolarMarkerColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type ScatterpolarMarkerGradient struct {

	// Color color Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Type enumerated Sets the type of gradient used to fill the markers
	Type ScatterpolarMarkerGradientType `json:"type,omitempty"`

	// Typesrc string Sets the source reference on Chart Studio Cloud for  type .
	Typesrc String `json:"typesrc,omitempty"`
}

type ScatterpolarMarkerLine struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Width number Sets the width (in px) of the lines bounding the marker points.
	Width interface{} `json:"width,omitempty"`

	// Widthsrc string Sets the source reference on Chart Studio Cloud for  width .
	Widthsrc String `json:"widthsrc,omitempty"`
}

type ScatterpolarSelectedMarker struct {

	// Color color Sets the marker color of selected points.
	Color String `json:"color,omitempty"`

	// Opacity number Sets the marker opacity of selected points.
	Opacity float64 `json:"opacity,omitempty"`

	// Size number Sets the marker size of selected points.
	Size float64 `json:"size,omitempty"`
}

type ScatterpolarSelectedTextfont struct {

	// Color color Sets the text font color of selected points.
	Color String `json:"color,omitempty"`
}

type ScatterpolarUnselectedMarker struct {

	// Color color Sets the marker color of unselected points, applied only when a selection exists.
	Color String `json:"color,omitempty"`

	// Opacity number Sets the marker opacity of unselected points, applied only when a selection exists.
	Opacity float64 `json:"opacity,omitempty"`

	// Size number Sets the marker size of unselected points, applied only when a selection exists.
	Size float64 `json:"size,omitempty"`
}

type ScatterpolarUnselectedTextfont struct {

	// Color color Sets the text font color of unselected points, applied only when a selection exists.
	Color String `json:"color,omitempty"`
}

type ScatterpolarglHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type ScatterpolarglMarkerColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat ScatterpolarglMarkerColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode ScatterpolarglMarkerColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent ScatterpolarglMarkerColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix ScatterpolarglMarkerColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix ScatterpolarglMarkerColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode ScatterpolarglMarkerColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *ScatterpolarglMarkerColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops ScatterpolarglMarkerColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition ScatterpolarglMarkerColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode ScatterpolarglMarkerColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks ScatterpolarglMarkerColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *ScatterpolarglMarkerColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor ScatterpolarglMarkerColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor ScatterpolarglMarkerColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type ScatterpolarglMarkerLine struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Width number Sets the width (in px) of the lines bounding the marker points.
	Width interface{} `json:"width,omitempty"`

	// Widthsrc string Sets the source reference on Chart Studio Cloud for  width .
	Widthsrc String `json:"widthsrc,omitempty"`
}

type ScatterpolarglSelectedMarker struct {

	// Color color Sets the marker color of selected points.
	Color String `json:"color,omitempty"`

	// Opacity number Sets the marker opacity of selected points.
	Opacity float64 `json:"opacity,omitempty"`

	// Size number Sets the marker size of selected points.
	Size float64 `json:"size,omitempty"`
}

type ScatterpolarglSelectedTextfont struct {

	// Color color Sets the text font color of selected points.
	Color String `json:"color,omitempty"`
}

type ScatterpolarglUnselectedMarker struct {

	// Color color Sets the marker color of unselected points, applied only when a selection exists.
	Color String `json:"color,omitempty"`

	// Opacity number Sets the marker opacity of unselected points, applied only when a selection exists.
	Opacity float64 `json:"opacity,omitempty"`

	// Size number Sets the marker size of unselected points, applied only when a selection exists.
	Size float64 `json:"size,omitempty"`
}

type ScatterpolarglUnselectedTextfont struct {

	// Color color Sets the text font color of unselected points, applied only when a selection exists.
	Color String `json:"color,omitempty"`
}

type ScatterternaryHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type ScatterternaryMarkerColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat ScatterternaryMarkerColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode ScatterternaryMarkerColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent ScatterternaryMarkerColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix ScatterternaryMarkerColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix ScatterternaryMarkerColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode ScatterternaryMarkerColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *ScatterternaryMarkerColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops ScatterternaryMarkerColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition ScatterternaryMarkerColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode ScatterternaryMarkerColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks ScatterternaryMarkerColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *ScatterternaryMarkerColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor ScatterternaryMarkerColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor ScatterternaryMarkerColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type ScatterternaryMarkerGradient struct {

	// Color color Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Type enumerated Sets the type of gradient used to fill the markers
	Type ScatterternaryMarkerGradientType `json:"type,omitempty"`

	// Typesrc string Sets the source reference on Chart Studio Cloud for  type .
	Typesrc String `json:"typesrc,omitempty"`
}

type ScatterternaryMarkerLine struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Width number Sets the width (in px) of the lines bounding the marker points.
	Width interface{} `json:"width,omitempty"`

	// Widthsrc string Sets the source reference on Chart Studio Cloud for  width .
	Widthsrc String `json:"widthsrc,omitempty"`
}

type ScatterternarySelectedMarker struct {

	// Color color Sets the marker color of selected points.
	Color String `json:"color,omitempty"`

	// Opacity number Sets the marker opacity of selected points.
	Opacity float64 `json:"opacity,omitempty"`

	// Size number Sets the marker size of selected points.
	Size float64 `json:"size,omitempty"`
}

type ScatterternarySelectedTextfont struct {

	// Color color Sets the text font color of selected points.
	Color String `json:"color,omitempty"`
}

type ScatterternaryUnselectedMarker struct {

	// Color color Sets the marker color of unselected points, applied only when a selection exists.
	Color String `json:"color,omitempty"`

	// Opacity number Sets the marker opacity of unselected points, applied only when a selection exists.
	Opacity float64 `json:"opacity,omitempty"`

	// Size number Sets the marker size of unselected points, applied only when a selection exists.
	Size float64 `json:"size,omitempty"`
}

type ScatterternaryUnselectedTextfont struct {

	// Color color Sets the text font color of unselected points, applied only when a selection exists.
	Color String `json:"color,omitempty"`
}

type SplomHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type SplomMarkerColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat SplomMarkerColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode SplomMarkerColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent SplomMarkerColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix SplomMarkerColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix SplomMarkerColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode SplomMarkerColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *SplomMarkerColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops SplomMarkerColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition SplomMarkerColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode SplomMarkerColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks SplomMarkerColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *SplomMarkerColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor SplomMarkerColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor SplomMarkerColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type SplomMarkerLine struct {

	// Autocolorscale boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto boolean Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax number Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid number Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin number Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color color Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
	Color interface{} `json:"color,omitempty"`

	// Coloraxis subplotid Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis String `json:"coloraxis,omitempty"`

	// Colorscale colorscale Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
	// Pending of type "colorscale"Colorscale  `json:"colorscale,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Reversescale boolean Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Width number Sets the width (in px) of the lines bounding the marker points.
	Width interface{} `json:"width,omitempty"`

	// Widthsrc string Sets the source reference on Chart Studio Cloud for  width .
	Widthsrc String `json:"widthsrc,omitempty"`
}

type SplomSelectedMarker struct {

	// Color color Sets the marker color of selected points.
	Color String `json:"color,omitempty"`

	// Opacity number Sets the marker opacity of selected points.
	Opacity float64 `json:"opacity,omitempty"`

	// Size number Sets the marker size of selected points.
	Size float64 `json:"size,omitempty"`
}

type SplomUnselectedMarker struct {

	// Color color Sets the marker color of unselected points, applied only when a selection exists.
	Color String `json:"color,omitempty"`

	// Opacity number Sets the marker opacity of unselected points, applied only when a selection exists.
	Opacity float64 `json:"opacity,omitempty"`

	// Size number Sets the marker size of unselected points, applied only when a selection exists.
	Size float64 `json:"size,omitempty"`
}

type StreamtubeColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// StreamtubeColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type StreamtubeColorbarTickformatstops interface{}

type StreamtubeColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *StreamtubeColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side StreamtubeColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type StreamtubeHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type SunburstHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type SunburstMarkerColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat SunburstMarkerColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode SunburstMarkerColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent SunburstMarkerColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix SunburstMarkerColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix SunburstMarkerColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode SunburstMarkerColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *SunburstMarkerColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops SunburstMarkerColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition SunburstMarkerColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode SunburstMarkerColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks SunburstMarkerColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *SunburstMarkerColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor SunburstMarkerColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor SunburstMarkerColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type SunburstMarkerLine struct {

	// Color color Sets the color of the line enclosing each sector. Defaults to the `paper_bgcolor` value.
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Width number Sets the width (in px) of the line enclosing each sector.
	Width interface{} `json:"width,omitempty"`

	// Widthsrc string Sets the source reference on Chart Studio Cloud for  width .
	Widthsrc String `json:"widthsrc,omitempty"`
}

type SurfaceColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// SurfaceColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type SurfaceColorbarTickformatstops interface{}

type SurfaceColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *SurfaceColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side SurfaceColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type SurfaceContoursX struct {

	// Color color Sets the color of the contour lines.
	Color String `json:"color,omitempty"`

	// End number Sets the end contour level value. Must be more than `contours.start`
	End float64 `json:"end,omitempty"`

	// Highlight boolean Determines whether or not contour lines about the x dimension are highlighted on hover.
	Highlight Bool `json:"highlight,omitempty"`

	// Highlightcolor color Sets the color of the highlighted contour lines.
	Highlightcolor String `json:"highlightcolor,omitempty"`

	// Highlightwidth number Sets the width of the highlighted contour lines.
	Highlightwidth float64 `json:"highlightwidth,omitempty"`

	// Project <no value> <no value>
	Project *SurfaceContoursXProject `json:"project,omitempty"`

	// Show boolean Determines whether or not contour lines about the x dimension are drawn.
	Show Bool `json:"show,omitempty"`

	// Size number Sets the step between each contour level. Must be positive.
	Size float64 `json:"size,omitempty"`

	// Start number Sets the starting contour level value. Must be less than `contours.end`
	Start float64 `json:"start,omitempty"`

	// Usecolormap boolean An alternate to *color*. Determines whether or not the contour lines are colored using the trace *colorscale*.
	Usecolormap Bool `json:"usecolormap,omitempty"`

	// Width number Sets the width of the contour lines.
	Width float64 `json:"width,omitempty"`
}

type SurfaceContoursY struct {

	// Color color Sets the color of the contour lines.
	Color String `json:"color,omitempty"`

	// End number Sets the end contour level value. Must be more than `contours.start`
	End float64 `json:"end,omitempty"`

	// Highlight boolean Determines whether or not contour lines about the y dimension are highlighted on hover.
	Highlight Bool `json:"highlight,omitempty"`

	// Highlightcolor color Sets the color of the highlighted contour lines.
	Highlightcolor String `json:"highlightcolor,omitempty"`

	// Highlightwidth number Sets the width of the highlighted contour lines.
	Highlightwidth float64 `json:"highlightwidth,omitempty"`

	// Project <no value> <no value>
	Project *SurfaceContoursYProject `json:"project,omitempty"`

	// Show boolean Determines whether or not contour lines about the y dimension are drawn.
	Show Bool `json:"show,omitempty"`

	// Size number Sets the step between each contour level. Must be positive.
	Size float64 `json:"size,omitempty"`

	// Start number Sets the starting contour level value. Must be less than `contours.end`
	Start float64 `json:"start,omitempty"`

	// Usecolormap boolean An alternate to *color*. Determines whether or not the contour lines are colored using the trace *colorscale*.
	Usecolormap Bool `json:"usecolormap,omitempty"`

	// Width number Sets the width of the contour lines.
	Width float64 `json:"width,omitempty"`
}

type SurfaceContoursZ struct {

	// Color color Sets the color of the contour lines.
	Color String `json:"color,omitempty"`

	// End number Sets the end contour level value. Must be more than `contours.start`
	End float64 `json:"end,omitempty"`

	// Highlight boolean Determines whether or not contour lines about the z dimension are highlighted on hover.
	Highlight Bool `json:"highlight,omitempty"`

	// Highlightcolor color Sets the color of the highlighted contour lines.
	Highlightcolor String `json:"highlightcolor,omitempty"`

	// Highlightwidth number Sets the width of the highlighted contour lines.
	Highlightwidth float64 `json:"highlightwidth,omitempty"`

	// Project <no value> <no value>
	Project *SurfaceContoursZProject `json:"project,omitempty"`

	// Show boolean Determines whether or not contour lines about the z dimension are drawn.
	Show Bool `json:"show,omitempty"`

	// Size number Sets the step between each contour level. Must be positive.
	Size float64 `json:"size,omitempty"`

	// Start number Sets the starting contour level value. Must be less than `contours.end`
	Start float64 `json:"start,omitempty"`

	// Usecolormap boolean An alternate to *color*. Determines whether or not the contour lines are colored using the trace *colorscale*.
	Usecolormap Bool `json:"usecolormap,omitempty"`

	// Width number Sets the width of the contour lines.
	Width float64 `json:"width,omitempty"`
}

type SurfaceHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type TableCellsFill struct {

	// Color color Sets the cell fill color. It accepts either a specific color or an array of colors or a 2D array of colors.
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`
}

type TableCellsFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type TableCellsLine struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Width number <no value>
	Width interface{} `json:"width,omitempty"`

	// Widthsrc string Sets the source reference on Chart Studio Cloud for  width .
	Widthsrc String `json:"widthsrc,omitempty"`
}

type TableHeaderFill struct {

	// Color color Sets the cell fill color. It accepts either a specific color or an array of colors or a 2D array of colors.
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`
}

type TableHeaderFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type TableHeaderLine struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Width number <no value>
	Width interface{} `json:"width,omitempty"`

	// Widthsrc string Sets the source reference on Chart Studio Cloud for  width .
	Widthsrc String `json:"widthsrc,omitempty"`
}

type TableHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type TreemapHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type TreemapMarkerColorbar struct {

	// _deprecated <no value> <no value>
	// Pending... _deprecated No valTyp <no value> `json:"_deprecated,omitempty"`

	// Bgcolor color Sets the color of padded area.
	Bgcolor String `json:"bgcolor,omitempty"`

	// Bordercolor color Sets the axis line color.
	Bordercolor String `json:"bordercolor,omitempty"`

	// Borderwidth number Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick any Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat enumerated Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat TreemapMarkerColorbarExponentformat `json:"exponentformat,omitempty"`

	// Len number Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode enumerated Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode TreemapMarkerColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent number Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks integer Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Outlinecolor color Sets the axis line color.
	Outlinecolor String `json:"outlinecolor,omitempty"`

	// Outlinewidth number Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands boolean If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent enumerated If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent TreemapMarkerColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels boolean Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix enumerated If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix TreemapMarkerColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix enumerated Same as `showtickprefix` but for tick suffixes.
	Showticksuffix TreemapMarkerColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness number Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode enumerated Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode TreemapMarkerColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0 any Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle angle Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor color Sets the tick color.
	Tickcolor String `json:"tickcolor,omitempty"`

	// Tickfont <no value> Sets the color bar's tick label font
	Tickfont *TreemapMarkerColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat string Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops <no value> <no value>
	Tickformatstops TreemapMarkerColorbarTickformatstops `json:"tickformatstops,omitempty"`

	// Ticklabelposition enumerated Determines where tick labels are drawn.
	Ticklabelposition TreemapMarkerColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklen number Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode enumerated Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode TreemapMarkerColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix string Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks enumerated Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks TreemapMarkerColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix string Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext data_array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc string Sets the source reference on Chart Studio Cloud for  ticktext .
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals data_array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc string Sets the source reference on Chart Studio Cloud for  tickvals .
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth number Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title <no value> <no value>
	Title *TreemapMarkerColorbarTitle `json:"title,omitempty"`

	// X number Sets the x position of the color bar (in plot fraction).
	X float64 `json:"x,omitempty"`

	// Xanchor enumerated Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.
	Xanchor TreemapMarkerColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad number Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Y number Sets the y position of the color bar (in plot fraction).
	Y float64 `json:"y,omitempty"`

	// Yanchor enumerated Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.
	Yanchor TreemapMarkerColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad number Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`
}

type TreemapMarkerLine struct {

	// Color color Sets the color of the line enclosing each sector. Defaults to the `paper_bgcolor` value.
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Width number Sets the width (in px) of the line enclosing each sector.
	Width interface{} `json:"width,omitempty"`

	// Widthsrc string Sets the source reference on Chart Studio Cloud for  width .
	Widthsrc String `json:"widthsrc,omitempty"`
}

type TreemapMarkerPad struct {

	// B number Sets the padding form the bottom (in px).
	B float64 `json:"b,omitempty"`

	// L number Sets the padding form the left (in px).
	L float64 `json:"l,omitempty"`

	// R number Sets the padding form the right (in px).
	R float64 `json:"r,omitempty"`

	// T number Sets the padding form the top (in px).
	T float64 `json:"t,omitempty"`
}

type TreemapPathbarTextfont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type ViolinBoxLine struct {

	// Color color Sets the inner box plot bounding line color.
	Color String `json:"color,omitempty"`

	// Width number Sets the inner box plot bounding line width.
	Width float64 `json:"width,omitempty"`
}

type ViolinHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type ViolinMarkerLine struct {

	// Color color Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
	Color String `json:"color,omitempty"`

	// Outliercolor color Sets the border line color of the outlier sample points. Defaults to marker.color
	Outliercolor String `json:"outliercolor,omitempty"`

	// Outlierwidth number Sets the border line width (in px) of the outlier sample points.
	Outlierwidth float64 `json:"outlierwidth,omitempty"`

	// Width number Sets the width (in px) of the lines bounding the marker points.
	Width float64 `json:"width,omitempty"`
}

type ViolinSelectedMarker struct {

	// Color color Sets the marker color of selected points.
	Color String `json:"color,omitempty"`

	// Opacity number Sets the marker opacity of selected points.
	Opacity float64 `json:"opacity,omitempty"`

	// Size number Sets the marker size of selected points.
	Size float64 `json:"size,omitempty"`
}

type ViolinUnselectedMarker struct {

	// Color color Sets the marker color of unselected points, applied only when a selection exists.
	Color String `json:"color,omitempty"`

	// Opacity number Sets the marker opacity of unselected points, applied only when a selection exists.
	Opacity float64 `json:"opacity,omitempty"`

	// Size number Sets the marker size of unselected points, applied only when a selection exists.
	Size float64 `json:"size,omitempty"`
}

type VolumeCapsX struct {

	// Fill number Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.
	Fill float64 `json:"fill,omitempty"`

	// Show boolean Sets the fill ratio of the `slices`. The default fill value of the x `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.
	Show Bool `json:"show,omitempty"`
}

type VolumeCapsY struct {

	// Fill number Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.
	Fill float64 `json:"fill,omitempty"`

	// Show boolean Sets the fill ratio of the `slices`. The default fill value of the y `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.
	Show Bool `json:"show,omitempty"`
}

type VolumeCapsZ struct {

	// Fill number Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.
	Fill float64 `json:"fill,omitempty"`

	// Show boolean Sets the fill ratio of the `slices`. The default fill value of the z `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.
	Show Bool `json:"show,omitempty"`
}

type VolumeColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// VolumeColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type VolumeColorbarTickformatstops interface{}

type VolumeColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *VolumeColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side VolumeColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type VolumeHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type VolumeSlicesX struct {

	// Fill number Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.
	Fill float64 `json:"fill,omitempty"`

	// Locations data_array Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis x except start and end.
	Locations interface{} `json:"locations,omitempty"`

	// Locationssrc string Sets the source reference on Chart Studio Cloud for  locations .
	Locationssrc String `json:"locationssrc,omitempty"`

	// Show boolean Determines whether or not slice planes about the x dimension are drawn.
	Show Bool `json:"show,omitempty"`
}

type VolumeSlicesY struct {

	// Fill number Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.
	Fill float64 `json:"fill,omitempty"`

	// Locations data_array Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis y except start and end.
	Locations interface{} `json:"locations,omitempty"`

	// Locationssrc string Sets the source reference on Chart Studio Cloud for  locations .
	Locationssrc String `json:"locationssrc,omitempty"`

	// Show boolean Determines whether or not slice planes about the y dimension are drawn.
	Show Bool `json:"show,omitempty"`
}

type VolumeSlicesZ struct {

	// Fill number Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.
	Fill float64 `json:"fill,omitempty"`

	// Locations data_array Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis z except start and end.
	Locations interface{} `json:"locations,omitempty"`

	// Locationssrc string Sets the source reference on Chart Studio Cloud for  locations .
	Locationssrc String `json:"locationssrc,omitempty"`

	// Show boolean Determines whether or not slice planes about the z dimension are drawn.
	Show Bool `json:"show,omitempty"`
}

type WaterfallConnectorLine struct {

	// Color color Sets the line color.
	Color String `json:"color,omitempty"`

	// Dash string Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Dash String `json:"dash,omitempty"`

	// Width number Sets the line width (in px).
	Width float64 `json:"width,omitempty"`
}

type WaterfallDecreasingMarker struct {

	// Color color Sets the marker color of all decreasing values.
	Color String `json:"color,omitempty"`

	// Line <no value> <no value>
	Line *WaterfallDecreasingMarkerLine `json:"line,omitempty"`
}

type WaterfallHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type WaterfallIncreasingMarker struct {

	// Color color Sets the marker color of all increasing values.
	Color String `json:"color,omitempty"`

	// Line <no value> <no value>
	Line *WaterfallIncreasingMarkerLine `json:"line,omitempty"`
}

type WaterfallTotalsMarker struct {

	// Color color Sets the marker color of all intermediate sums and total values.
	Color String `json:"color,omitempty"`

	// Line <no value> <no value>
	Line *WaterfallTotalsMarkerLine `json:"line,omitempty"`
}

// DEEP 2
type BarMarkerColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// BarMarkerColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type BarMarkerColorbarTickformatstops interface{}

type BarMarkerColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *BarMarkerColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side BarMarkerColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type BarpolarMarkerColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// BarpolarMarkerColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type BarpolarMarkerColorbarTickformatstops interface{}

type BarpolarMarkerColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *BarpolarMarkerColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side BarpolarMarkerColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type CarpetAaxisTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type CarpetBaxisTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type ChoroplethColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type ChoroplethmapboxColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type ConeColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type ContourColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type ContourcarpetColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type DensitymapboxColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type FunnelMarkerColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// FunnelMarkerColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type FunnelMarkerColorbarTickformatstops interface{}

type FunnelMarkerColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *FunnelMarkerColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side FunnelMarkerColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type HeatmapColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type HeatmapglColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type Histogram2dColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type Histogram2dcontourColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type HistogramMarkerColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// HistogramMarkerColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type HistogramMarkerColorbarTickformatstops interface{}

type HistogramMarkerColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *HistogramMarkerColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side HistogramMarkerColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type IndicatorGaugeAxisTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// IndicatorGaugeAxisTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type IndicatorGaugeAxisTickformatstops interface{}

type IndicatorGaugeBarLine struct {

	// Color color Sets the color of the line enclosing each sector.
	Color String `json:"color,omitempty"`

	// Width number Sets the width (in px) of the line enclosing each sector.
	Width float64 `json:"width,omitempty"`
}

type IndicatorGaugeThresholdLine struct {

	// Color color Sets the color of the threshold line.
	Color String `json:"color,omitempty"`

	// Width number Sets the width (in px) of the threshold line.
	Width float64 `json:"width,omitempty"`
}

type IsosurfaceColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type LayoutColoraxisColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// LayoutColoraxisColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type LayoutColoraxisColorbarTickformatstops interface{}

type LayoutColoraxisColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *LayoutColoraxisColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side LayoutColoraxisColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type LayoutGeoProjectionRotation struct {

	// Lat number Rotates the map along meridians (in degrees North).
	Lat float64 `json:"lat,omitempty"`

	// Lon number Rotates the map along parallels (in degrees East). Defaults to the center of the `lonaxis.range` values.
	Lon float64 `json:"lon,omitempty"`

	// Roll number Roll the map (in degrees) For example, a roll of *180* makes the map appear upside down.
	Roll float64 `json:"roll,omitempty"`
}

type LayoutLegendTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type LayoutPolarAngularaxisTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// LayoutPolarAngularaxisTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type LayoutPolarAngularaxisTickformatstops interface{}

type LayoutPolarRadialaxisTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// LayoutPolarRadialaxisTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type LayoutPolarRadialaxisTickformatstops interface{}

type LayoutPolarRadialaxisTitle struct {

	// Font <no value> Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
	Font *LayoutPolarRadialaxisTitleFont `json:"font,omitempty"`

	// Text string Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type LayoutSceneAspectratioImpliededits struct {
}

type LayoutSceneCameraCenter struct {

	// X number <no value>
	X float64 `json:"x,omitempty"`

	// Y number <no value>
	Y float64 `json:"y,omitempty"`

	// Z number <no value>
	Z float64 `json:"z,omitempty"`
}

type LayoutSceneCameraEye struct {

	// X number <no value>
	X float64 `json:"x,omitempty"`

	// Y number <no value>
	Y float64 `json:"y,omitempty"`

	// Z number <no value>
	Z float64 `json:"z,omitempty"`
}

type LayoutSceneCameraProjection struct {

	// Type enumerated Sets the projection type. The projection type could be either *perspective* or *orthographic*. The default is *perspective*.
	Type LayoutSceneCameraProjectionType `json:"type,omitempty"`
}

type LayoutSceneCameraUp struct {

	// X number <no value>
	X float64 `json:"x,omitempty"`

	// Y number <no value>
	Y float64 `json:"y,omitempty"`

	// Z number <no value>
	Z float64 `json:"z,omitempty"`
}

type LayoutSceneXaxisTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// LayoutSceneXaxisTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type LayoutSceneXaxisTickformatstops interface{}

type LayoutSceneXaxisTitle struct {

	// Font <no value> Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
	Font *LayoutSceneXaxisTitleFont `json:"font,omitempty"`

	// Text string Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type LayoutSceneYaxisTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// LayoutSceneYaxisTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type LayoutSceneYaxisTickformatstops interface{}

type LayoutSceneYaxisTitle struct {

	// Font <no value> Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
	Font *LayoutSceneYaxisTitleFont `json:"font,omitempty"`

	// Text string Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type LayoutSceneZaxisTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// LayoutSceneZaxisTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type LayoutSceneZaxisTickformatstops interface{}

type LayoutSceneZaxisTitle struct {

	// Font <no value> Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
	Font *LayoutSceneZaxisTitleFont `json:"font,omitempty"`

	// Text string Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type LayoutTernaryAaxisTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// LayoutTernaryAaxisTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type LayoutTernaryAaxisTickformatstops interface{}

type LayoutTernaryAaxisTitle struct {

	// Font <no value> Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
	Font *LayoutTernaryAaxisTitleFont `json:"font,omitempty"`

	// Text string Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type LayoutTernaryBaxisTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// LayoutTernaryBaxisTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type LayoutTernaryBaxisTickformatstops interface{}

type LayoutTernaryBaxisTitle struct {

	// Font <no value> Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
	Font *LayoutTernaryBaxisTitleFont `json:"font,omitempty"`

	// Text string Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type LayoutTernaryCaxisTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// LayoutTernaryCaxisTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type LayoutTernaryCaxisTickformatstops interface{}

type LayoutTernaryCaxisTitle struct {

	// Font <no value> Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
	Font *LayoutTernaryCaxisTitleFont `json:"font,omitempty"`

	// Text string Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

// LayoutXaxisRangeselectorButtons It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// button
//      count
//      description
//      editType
//      label
//      name
//      role
//      step
//      stepmode
//      templateitemname
//      visible
type LayoutXaxisRangeselectorButtons interface{}

type LayoutXaxisRangeselectorFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type LayoutXaxisRangesliderYaxis struct {

	// Range info_array Sets the range of this axis for the rangeslider.
	Range interface{} `json:"range,omitempty"`

	// Rangemode enumerated Determines whether or not the range of this axis in the rangeslider use the same value than in the main plot when zooming in/out. If *auto*, the autorange will be used. If *fixed*, the `range` is used. If *match*, the current range of the corresponding y-axis on the main subplot is used.
	Rangemode LayoutXaxisRangesliderYaxisRangemode `json:"rangemode,omitempty"`
}

type LayoutXaxisTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type LayoutYaxisTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type Mesh3dColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type ParcatsLineColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// ParcatsLineColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type ParcatsLineColorbarTickformatstops interface{}

type ParcatsLineColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *ParcatsLineColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side ParcatsLineColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type ParcoordsLineColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// ParcoordsLineColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type ParcoordsLineColorbarTickformatstops interface{}

type ParcoordsLineColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *ParcoordsLineColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side ParcoordsLineColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type SankeyLinkHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type SankeyNodeHoverlabelFont struct {

	// Color color <no value>
	Color interface{} `json:"color,omitempty"`

	// Colorsrc string Sets the source reference on Chart Studio Cloud for  color .
	Colorsrc String `json:"colorsrc,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family interface{} `json:"family,omitempty"`

	// Familysrc string Sets the source reference on Chart Studio Cloud for  family .
	Familysrc String `json:"familysrc,omitempty"`

	// Size number <no value>
	Size interface{} `json:"size,omitempty"`

	// Sizesrc string Sets the source reference on Chart Studio Cloud for  size .
	Sizesrc String `json:"sizesrc,omitempty"`
}

type Scatter3dLineColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// Scatter3dLineColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type Scatter3dLineColorbarTickformatstops interface{}

type Scatter3dLineColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *Scatter3dLineColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side Scatter3dLineColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type Scatter3dMarkerColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// Scatter3dMarkerColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type Scatter3dMarkerColorbarTickformatstops interface{}

type Scatter3dMarkerColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *Scatter3dMarkerColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side Scatter3dMarkerColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type ScatterMarkerColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// ScatterMarkerColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type ScatterMarkerColorbarTickformatstops interface{}

type ScatterMarkerColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *ScatterMarkerColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side ScatterMarkerColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type ScattercarpetMarkerColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// ScattercarpetMarkerColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type ScattercarpetMarkerColorbarTickformatstops interface{}

type ScattercarpetMarkerColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *ScattercarpetMarkerColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side ScattercarpetMarkerColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type ScattergeoMarkerColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// ScattergeoMarkerColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type ScattergeoMarkerColorbarTickformatstops interface{}

type ScattergeoMarkerColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *ScattergeoMarkerColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side ScattergeoMarkerColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type ScatterglMarkerColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// ScatterglMarkerColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type ScatterglMarkerColorbarTickformatstops interface{}

type ScatterglMarkerColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *ScatterglMarkerColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side ScatterglMarkerColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type ScattermapboxMarkerColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// ScattermapboxMarkerColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type ScattermapboxMarkerColorbarTickformatstops interface{}

type ScattermapboxMarkerColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *ScattermapboxMarkerColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side ScattermapboxMarkerColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type ScatterpolarMarkerColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// ScatterpolarMarkerColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type ScatterpolarMarkerColorbarTickformatstops interface{}

type ScatterpolarMarkerColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *ScatterpolarMarkerColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side ScatterpolarMarkerColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type ScatterpolarglMarkerColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// ScatterpolarglMarkerColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type ScatterpolarglMarkerColorbarTickformatstops interface{}

type ScatterpolarglMarkerColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *ScatterpolarglMarkerColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side ScatterpolarglMarkerColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type ScatterternaryMarkerColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// ScatterternaryMarkerColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type ScatterternaryMarkerColorbarTickformatstops interface{}

type ScatterternaryMarkerColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *ScatterternaryMarkerColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side ScatterternaryMarkerColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type SplomMarkerColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// SplomMarkerColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type SplomMarkerColorbarTickformatstops interface{}

type SplomMarkerColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *SplomMarkerColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side SplomMarkerColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type StreamtubeColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type SunburstMarkerColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// SunburstMarkerColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type SunburstMarkerColorbarTickformatstops interface{}

type SunburstMarkerColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *SunburstMarkerColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side SunburstMarkerColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type SurfaceColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type SurfaceContoursXProject struct {

	// X boolean Determines whether or not these contour lines are projected on the x plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.
	X Bool `json:"x,omitempty"`

	// Y boolean Determines whether or not these contour lines are projected on the y plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.
	Y Bool `json:"y,omitempty"`

	// Z boolean Determines whether or not these contour lines are projected on the z plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.
	Z Bool `json:"z,omitempty"`
}

type SurfaceContoursYProject struct {

	// X boolean Determines whether or not these contour lines are projected on the x plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.
	X Bool `json:"x,omitempty"`

	// Y boolean Determines whether or not these contour lines are projected on the y plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.
	Y Bool `json:"y,omitempty"`

	// Z boolean Determines whether or not these contour lines are projected on the z plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.
	Z Bool `json:"z,omitempty"`
}

type SurfaceContoursZProject struct {

	// X boolean Determines whether or not these contour lines are projected on the x plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.
	X Bool `json:"x,omitempty"`

	// Y boolean Determines whether or not these contour lines are projected on the y plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.
	Y Bool `json:"y,omitempty"`

	// Z boolean Determines whether or not these contour lines are projected on the z plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.
	Z Bool `json:"z,omitempty"`
}

type TreemapMarkerColorbarTickfont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

// TreemapMarkerColorbarTickformatstops It's an items array and what goes inside it's... messy... check the docs
// Here is a hint to help you to define your own type
// tickformatstop
//      dtickrange
//      editType
//      enabled
//      name
//      role
//      templateitemname
//      value
type TreemapMarkerColorbarTickformatstops interface{}

type TreemapMarkerColorbarTitle struct {

	// Font <no value> Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
	Font *TreemapMarkerColorbarTitleFont `json:"font,omitempty"`

	// Side enumerated Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side TreemapMarkerColorbarTitleSide `json:"side,omitempty"`

	// Text string Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

type VolumeColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type WaterfallDecreasingMarkerLine struct {

	// Color color Sets the line color of all decreasing values.
	Color String `json:"color,omitempty"`

	// Width number Sets the line width of all decreasing values.
	Width float64 `json:"width,omitempty"`
}

type WaterfallIncreasingMarkerLine struct {

	// Color color Sets the line color of all increasing values.
	Color String `json:"color,omitempty"`

	// Width number Sets the line width of all increasing values.
	Width float64 `json:"width,omitempty"`
}

type WaterfallTotalsMarkerLine struct {

	// Color color Sets the line color of all intermediate sums and total values.
	Color String `json:"color,omitempty"`

	// Width number Sets the line width of all intermediate sums and total values.
	Width float64 `json:"width,omitempty"`
}

// DEEP 3
type BarMarkerColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type BarpolarMarkerColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type FunnelMarkerColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type HistogramMarkerColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type LayoutColoraxisColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type LayoutPolarRadialaxisTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type LayoutSceneXaxisTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type LayoutSceneYaxisTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type LayoutSceneZaxisTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type LayoutTernaryAaxisTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type LayoutTernaryBaxisTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type LayoutTernaryCaxisTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type ParcatsLineColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type ParcoordsLineColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type Scatter3dLineColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type Scatter3dMarkerColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type ScatterMarkerColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type ScattercarpetMarkerColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type ScattergeoMarkerColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type ScatterglMarkerColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type ScattermapboxMarkerColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type ScatterpolarMarkerColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type ScatterpolarglMarkerColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type ScatterternaryMarkerColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type SplomMarkerColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type SunburstMarkerColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}

type TreemapMarkerColorbarTitleFont struct {

	// Color color <no value>
	Color String `json:"color,omitempty"`

	// Family string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size number <no value>
	Size float64 `json:"size,omitempty"`
}
